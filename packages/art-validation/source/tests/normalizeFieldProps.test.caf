import &StandardImport
{normalizeFieldProps} = Validator

assertIsTrimmedString = (ft) ->
  assert.eq ft.dataType, "string"
  assert.isFunction ft.validate
  assert.isFunction ft.preprocess

testEq = (f, a, b) ->
  test "#{f.name} #{formattedInspect a} should-eq #{formattedInspect b}" ->
    assert.eq
      stripFunctions f(a)
      stripFunctions b

stripFunctions = (o) ->
  switch
  when o is Object then object v from o with stripFunctions v
  when o is Array then array v from o with stripFunctions v
  when o is Function then :function
  else o

describe
  basic: ->
    testEq normalizeFieldProps, {required: true}, required: true
    testEq normalizeFieldProps, {dood: 'trimmedString'}, dood: 'trimmedString'
    testEq normalizeFieldProps, {required: ['trimmedString']}, required: ['trimmedString']

  depricated: ->
    test "requiredPresent: true", -> assert.throws -> normalizeFieldProps requiredPresent: true
    test "required: 'foo'", -> assert.throws -> normalizeFieldProps required: 'foo'
    test "present: 'foo'", -> assert.throws -> normalizeFieldProps present: 'foo'

  objectValues: ->
    testEq normalizeFieldProps, {required: foobar: true}, required: true, foobar: true
    testEq normalizeFieldProps, {foobar: required: true}, required: true, foobar: true

  topLevelArrayValues: ->
    testEq normalizeFieldProps, [w 'foobar'                   ], foobar: true
    testEq normalizeFieldProps, [w 'required foobar'          ], required: true, foobar: true
    testEq normalizeFieldProps, [w 'required foobar', fad: 123], required: true, foobar: true, fad: 123

  topLevelStringValues: ->
    testEq normalizeFieldProps, 'foobar', foobar: true
    testEq normalizeFieldProps, 'foo bar', foo: true, bar: true

    test "'trimmedString'", ->
      assertIsTrimmedString normalizeFieldProps 'trimmedString'

    test "'trimmedString foo bar'", ->
      ft = normalizeFieldProps 'trimmedString foo bar'
      assertIsTrimmedString ft
      assert.eq true, ft.foo
      assert.eq true, ft.bar

  nestedTypes:
    arrays: ->
      testEq
        normalizeFieldProps
        {} array: :number

        array:
          dataType:   :number
          fromString: :function
          fieldType:  :number
          validate:   :function

        validate:     :function
        preprocess:   :function
        postValidate: :function

    objects: ->
      testEq
        normalizeFieldProps
        {} fields: myCustomSubField: :string

        dataType:  :object
        fieldType: :object
        validate:  :function
        fields:    myCustomSubField:
          dataType:     :string
          fieldType:    :string
          validate:     :function

        preprocess:   :function
        postValidate: :function

  specialFields: ->
    test "fieldType: 'trimmedString'", ->
      assertIsTrimmedString normalizeFieldProps fieldType: 'trimmedString'

    test "instanceof: Validator", ->
      ft = normalizeFieldProps instanceof: Validator
      assert.eq true, ft.validate new Validator
      assert.eq false, ft.validate {}

  customFieldTypes: ->
    test "mapped to another fieldType" ->
      assert.eq
        normalizeFieldProps
          :myCustomField
          myCustomField: :string
        merge
          normalizeFieldProps :string
          fieldType: :myCustomField

    test "mapped to an object definition" ->
      assert.eq
        stripFunctions normalizeFieldProps
          :myCustomField
          myCustomField:
            fields:
              myCustomSubField: :string

        dataType:  :object
        fieldType: :myCustomField
        validate:  :function
        fields:    myCustomSubField:
          dataType:     :string
          fieldType:    :string
          validate:     :function

        preprocess:   :function
        postValidate: :function

    test "normalizeFields accepts custom fields" ->
      assert.eq
        normalizeFields
          {} foo: :myCustomField
          myCustomField: :string
        foo: merge
          normalizeFieldProps :string
          fieldType: :myCustomField
