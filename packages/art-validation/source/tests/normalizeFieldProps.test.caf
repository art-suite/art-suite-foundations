import &StandardImport
{normalizeFieldProps} = Validator

assertIsTrimmedString = (ft) ->
  assert.eq ft.dataType, "string"
  assert.isFunction ft.validate
  assert.isFunction ft.preprocess

cleanStackAndThrow = (stack, error) ->
  stack =
    array line from stack.split /\n/ # when /^\s*at\s/.test line
    .join "\n"

  mergedStack =
    array line from "#{error.stack}\n#{stack}".split /\n/ when /testEqNormalizeFieldProps/.test line
    .join "\n"
    .split "at describe"
  error.stack = peek mergedStack
  throw error

normalizeArgsAndName = (args) ->
  if args.length >= 3
    [name, testInput, shouldEqualOutput] = args
  else
    [testInput, shouldEqualOutput] = args
    name = "#{formattedInspect(testInput).replace /\n/g, ', '} >>> #{formattedInspect(shouldEqualOutput).replace /\n/g, ', '}"
  return {} name, testInput, shouldEqualOutput

testEqNormalizeFieldProps = (args...) ->
  {stack} = new Error
  {name, testInput, shouldEqualOutput} = normalizeArgsAndName args
  test name, ->
    try
      assertDefinitionEq testInput, shouldEqualOutput
    catch error
      cleanStackAndThrow stack, error

testEqNormalizeFieldPropsWithFunctionsIdentified = (args...) ->
  {stack} = new Error
  {name, testInput, shouldEqualOutput} = normalizeArgsAndName args
  test name, ->
    try
      assertDefinitionEq testInput, shouldEqualOutput, identifyFunctions
    catch error
      cleanStackAndThrow stack, error

assertDefinitionEq = (a, b, cleanThings = stripFunctions) ->
  assert.eq
    cleanThings normalizeFieldProps a
    cleanThings b
    """
      this:       normalizeFieldProps #{formattedInspect a}
      should eq:  #{formattedInspect b}

stripFunctions = (o) ->
  switch
  when o is Object then object v from o with stripFunctions v when !isFunction v
  when o is Array then array v from o with stripFunctions v when !isFunction v
  else o

identifyFunctions = (o) ->
  switch
  when o is Object    then object v from o with identifyFunctions v
  when o is Array     then array  v from o with identifyFunctions v
  when o is Function  then :function
  else o

describe
  basicDefinitions: ->
    test
      "" just fieldType name (e.g. "number") selects the functions for that fieldType
      ->
        assert.eq
          normalizeFieldProps :number
          FieldTypes.number

    test
      "" just custom functions, returned as-is
      ->
        assert.eq
          normalizeFieldProps definition =
            preprocess:     (a) -> a
            validated:      (a) -> true
            postValidated:  (a) -> true

          definition

    test
      "" can override fieldType's definition
      ->
        assert.eq
          normalizeFieldProps [] :number definition =
            preprocess:     (a) -> a

          merge FieldTypes.number, definition

    test "'required' tag" -> assert.eq normalizeFieldProps(:required), required: true
    test "'present' tag" -> assert.eq normalizeFieldProps(:present), present: true

  ## deprecated:
    hard: ->
      test "requiredPresent: true", -> assert.throws -> normalizeFieldProps requiredPresent: true

    soft: ->
      testEqNormalizeFieldProps
        {} required: :number
        {} dataType: :number, fieldType: :number, required: true

      testEqNormalizeFieldProps
        {} present: :number
        {} dataType: :number, fieldType: :number, present: true

      testEqNormalizeFieldProps {required: ['trimmedString']}, required: ['trimmedString']

  # invalid: ->
  #   test "explicit, unknown field type is an error" ->
  #     assert.rejects -> normalizeFieldProps fieldType: :unknownFieldType
  #     .then (rejectsWith) ->
  #       assert.match
  #         rejectsWith.message
  #         ///i unknown .* unknownFieldType

  tags:
    unknown-field-types-are-treated-as-tags: ->
      testEqNormalizeFieldProps :unknownFieldType, unknownFieldType: true

    asObjectProperties: ->
      testEqNormalizeFieldProps {required: true}, required: true
      testEqNormalizeFieldProps {present: true}, present: true

    asSimpleStrings: ->
      testEqNormalizeFieldProps :required required: true
      testEqNormalizeFieldProps :present present: true

    asArrays: ->
      testEqNormalizeFieldProps [:required :present] required: true, present: true
      testEqNormalizeFieldProps [:required :number] dataType: :number, fieldType: :number, required: true
      testEqNormalizeFieldProps [:required :present :number] dataType: :number, fieldType: :number, required: true, present: true

    asCompoundStrings: ->
      testEqNormalizeFieldProps "required present" required: true, present: true
      testEqNormalizeFieldProps "required number" dataType: :number, fieldType: :number, required: true
      testEqNormalizeFieldProps "required present number" dataType: :number, fieldType: :number, required: true, present: true

    tagsCanBeMixedWithCustomProps: ->
      testEqNormalizeFieldProps
        "" fieldType then object-props
        :trimmedString foo: true bar: true
        normalizeFieldProps foo: true bar: true fieldType: :trimmedString

      testEqNormalizeFieldProps
        "" alternating tags and object-props
        []
          :present
          foo: true
          :required
          bar: true
          :trimmedString
        normalizeFieldProps foo: true bar: true fieldType: :trimmedString required: true present: true

  properties-on-a-custom-field-are-not-interpreted: ->
    testEqNormalizeFieldProps {foobar: :number}, foobar: :number
    testEqNormalizeFieldProps {foobar: required: true}, foobar: required: true
    testEqNormalizeFieldProps {foobar: required: :number}, foobar: required: :number

  nestedTypes: ->
    testEqNormalizeFieldProps
      :arrays
      {} array: :number

      dataType:  :array
      fieldType: :array
      array:
        dataType:   :number
        fieldType:  :number

    testEqNormalizeFieldProps
      :objects
      {} fields: myCustomSubField: :string

      dataType:  :object
      fieldType: :object
      fields:    myCustomSubField:
        dataType:     :string
        fieldType:    :string

    testEqNormalizeFieldProps
      "" arrays of objects
      {} array: fields: myCustomSubField: :string

      dataType:  :array
      fieldType: :array
      array:
        dataType:  :object
        fieldType: :object
        fields:    myCustomSubField: dataType: :string, fieldType: :string

    testEqNormalizeFieldProps
      "" object with array field
      {} fields: coordinates: array: :number

      dataType:  :object
      fieldType: :object
      fields:    coordinates:
        dataType:  :array
        fieldType: :array
        array:     dataType: :number, fieldType: :number


  buildInValidators: ->
    testEqNormalizeFieldPropsWithFunctionsIdentified
      instanceof: Validator
      instanceof: :function, validate: :function

    testEqNormalizeFieldPropsWithFunctionsIdentified
      minLength: 5
      minLength: 5, postValidate: :function

    testEqNormalizeFieldPropsWithFunctionsIdentified
      maxLength: 5
      maxLength: 5, postValidate: :function

    testEqNormalizeFieldPropsWithFunctionsIdentified
      length: 5
      length: 5, maxLength: 5, minLength: 5, postValidate: :function

  customFieldTypes:
    basic: ->
      test "mapped to another fieldType" ->
        assert.eq
          normalizeFieldProps
            :myCustomField
            customFieldTypes: myCustomField: :string
          merge
            normalizeFieldProps :string
            fieldType: :myCustomField

      test "mapped to an object definition" ->
        assert.eq
          stripFunctions normalizeFieldProps
            :myCustomField
            customFieldTypes: myCustomField:
              fields:
                myCustomSubField: :string

          dataType:  :object
          fieldType: :myCustomField
          fields:    myCustomSubField:
            dataType:     :string
            fieldType:    :string

      test "normalizeFields accepts custom fields" ->
        assert.eq
          normalizeFields
            {} foo: :myCustomField
            customFieldTypes: myCustomField: :string
          foo: merge
            normalizeFieldProps :string
            fieldType: :myCustomField

    recursiveTypesWithCustomFieldTypes: ->
      test "object" ->
        assert.eq
          stripFunctions normalizeFieldProps
            {} fields: data:   :record
            customFieldTypes: record: fields: name: :string

          dataType:     :object
          fieldType:    :object
          fields:       data:
            dataType:     :object
            fieldType:    :record
            fields:       name: dataType: :string, fieldType: :string

      test "array" ->
        assert.eq
          stripFunctions normalizeFieldProps
            {} array:   :record
            customFieldTypes: record: fields: name: :string

          dataType: :array
          fieldType: :array
          array:
            fieldType:    :record
            dataType:     :object
            fields:       name: dataType: :string, fieldType: :string

    recursiveCustomFieldTypes: ->
      test "a references b" ->
        assert.eq
          stripFunctions normalizeFieldProps
            :myCustomField
            customFieldTypes:
              myCustomField:  :myCustomField2
              myCustomField2: :string

          fieldType: :myCustomField, dataType: :string

      test "a references object with b" ->
        assert.eq
          stripFunctions normalizeFieldProps
            :myCustomField
            customFieldTypes:
              myCustomField:  fields: myFieldName: :myCustomField2
              myCustomField2: :string

          fieldType:    :myCustomField
          dataType:     :object
          fields: myFieldName: dataType: :string, fieldType: :myCustomField2

      chainedTest "a references a not allowed" ->
        assert.rejects ->
          stripFunctions normalizeFieldProps
            :myCustomField
            customFieldTypes: myCustomField: :myCustomField
        .then (rejectsWith) -> assert.match rejectsWith.message, ///i recursive .* not\ supported

      .thenTest "after a failed recursion check, we don't wrongly trigger it again" ->
        stripFunctions normalizeFieldProps
          :myCustomField
          customFieldTypes: myCustomField:  fields: myFieldName: :string

      test "a references object a not allowed" ->
        assert.rejects ->
          stripFunctions normalizeFieldProps
            :myCustomField
            customFieldTypes: myCustomField:  fields: myFieldName: :myCustomField

        .then (rejectsWith) -> assert.match rejectsWith.message, ///i recursive .* not\ supported

      test "a references b refernces a not allowed" ->
        assert.rejects ->
          stripFunctions normalizeFieldProps
            :myCustomField
            customFieldTypes:
              myCustomField:    fields: myFieldName: :myCustomField2
              myCustomField2:   fields: myFieldName: :myCustomField

        .then (rejectsWith) -> assert.match rejectsWith.message, ///i recursive .* not\ supported

  regressions:
    art_pipelines_link_fields_filter: ->
      test "'link required'" ->
        assert.eq
          stripFunctions normalizeFieldProps 'link required'
          link:     true
          required: true

      test "link: 'user'" ->
        assert.eq
          stripFunctions normalizeFieldProps link: :user
          link: :user

    array_and_lengths: ->
      testEqNormalizeFieldProps
        "" length-tests on the array itself
        {} array: :string maxLength: 10

        dataType:  :array
        fieldType: :array
        array:     dataType: :string, fieldType: :string
        maxLength: 10

      testEqNormalizeFieldProps
        "" length-tests on elements within the array
        {} array: [] :string maxLength: 10

        dataType:  :array
        fieldType: :array
        array:     dataType: :string, fieldType: :string maxLength: 10
