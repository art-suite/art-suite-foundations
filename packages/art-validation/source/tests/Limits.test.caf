import &StandardImport

describe
  length: ->
    test "length: 5" ->
      v = new Validator caption:
        fieldType: :trimmedString
        length: 5
      v.validateCreate caption: "" 12345
      assert.throws -> v.validateCreate caption: "" 123456
      assert.throws -> v.validateCreate caption: "" 1234

    test "object length: 2" ->
      v = new Validator location:
        fields:
          x: :number
          y: :number
          z: :number
        length: 2
      v.validateCreate location: x: 1 y: 2
      v.validateCreate location: z: 1 y: 2
      v.validateCreate location: x: 1 z: 2
      assert.throws -> v.validateCreate location: x: 1 y: 2 z: 3
      assert.throws -> v.validateCreate location: z: 3

  maxLength: ->
    test "maxLength" ->
      v = new Validator id:
        fieldType: 'trimmedString'
        maxLength: 5
      assert.throws -> v.validateCreate id: "  too long man"

    test "maxLength: 3000" ->
      v = new Validator caption:
        fieldType: 'trimmedString'
        maxLength: 3000
      v.validateCreate caption: randomString 2999

    test "maxLength is after preprocess" ->
      v = new Validator id:
        fieldType: 'trimmedString'
        maxLength: 5
      assert.eq
        id: "123"
        v.validateCreate id: "   123   "

  minLength: ->
    test "minLength" ->
      v = new Validator id:
        fieldType: 'trimmedString'
        minLength: 5
      assert.throws -> v.validateCreate id: "shrt"
      v.validateCreate id: "long enough"

    test "minLength is after preprocess" ->
      v = new Validator id:
        fieldType: 'trimmedString'
        minLength: 5
      assert.throws -> v.validateCreate id: "   123   "

  both: ->
    test "minLength and maxLength" ->
      v = new Validator id:
        fieldType: 'trimmedString'
        minLength: 5
        maxLength: 10
      assert.throws -> v.validateCreate id: "1234"
      assert.throws -> v.validateCreate id: "1234567890-"
      v.validateCreate id: "12345"
      v.validateCreate id: "1234567890"
