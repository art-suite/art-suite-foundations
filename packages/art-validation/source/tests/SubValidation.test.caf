import &StandardImport

describe
  arrayValidation: ->
    test :array-basic ->
      v = new Validator
        idList: array: :number

      v.validate idList: []
      v.validate idList: [] 1
      v.validate idList: 1 2 3
      v.validate idList: null
      assert.throws -> v.validate idList: 123
      assert.throws -> v.validate idList: [] :string-not-ok
      assert.throws -> v.validate idList: [] {}
      assert.throws -> v.validate idList: [] []

    test :maxLength ->
      v = new Validator idList: array: maxLength: 3 fieldType: :number
      v.validate idList: 1 2
      v.validate idList: 1 2 3
      assert.throws -> v.validate idList: 1 2 3 4

    test :minLength ->
      v = new Validator idList: array: minLength: 3 fieldType: :number
      v.validate idList: 1 2 3
      v.validate idList: 1 2 3 4
      assert.throws -> v.validate idList: 1 2

    test :customValidate ->
      v = new Validator idList:
        array: :number
        validate: (a) -> 10 == reduce sum, v from a inject 0 with sum + v

      v.validate idList: 1 2 3 4
      v.validate idList: [] 10
      v.validate idList: 6 4
      assert.throws -> v.validate idList: 1 2

    test :customPreprocess ->
      v = new Validator idList:
        array: :string
        preprocess: (a) -> w a
        validate: (a) -> isArray(a) || isString(a)

      v.validate idList: "" a b c
      v.validate idList: :a :b :c

      assert.eq
        v.preprocess idList: "" a b c
        idList: :a :b :c

    test :array-of-objects ->
      v = new Validator
        recordList: array: fields:
          id:     :string
          count:  :number

      v.validate recordList: []
        id: :a1 count: 10
        id: :a2 count: 20

      assert.throws ->
        v.validate recordList: [] 123

      assert.throws ->
        v.validate recordList: []
          id: :a1 count: :aString
          id: :a2 count: 20

    test :array-of-arrays ->
      v = new Validator
        matrix: array:
          length: 3
          array:
            :number
            length: 3
      v.validate matrix:
        1 2 3
        4 5 6
        7 8 9
      assert.throws -> v.validate matrix:
        1 2 3 4
        4 5 6
        7 8 9
      assert.throws -> v.validate matrix:
        1 2 3
        4 5 6
      assert.throws -> v.validate matrix:
        1 2 3
        4 5
        7 8 9

  object: ->
    test "fields" ->
      v = new Validator
        dimensions:
          fields:
            x: :number
            y: :number

      v.validate dimensions: x: 1
      v.validate dimensions: {}
      v.validate dimensions: null
      v.validate dimensions: undefined
      assert.throws -> v.validate dimensions: "not a string"
      assert.throws -> v.validate dimensions: 1
      assert.throws -> v.validate dimensions: []
      assert.throws -> v.validate dimensions: x: "not a string"
      assert.throws -> v.validate dimensions: z: 1

    test "required fields" ->
      v = new Validator
        dimensions: required:
          fields:
            x: :number
            y: :number

      assert.throws -> v.validate dimensions: null
      assert.throws -> v.validate dimensions: undefined

    test "preprocess" ->
      v = new Validator
        normalFoo:
          preprocess: (v) -> v.trim()

        myFields: required:
          fields:
            foo:
              preprocess: (v) -> v.trim()

      assert.eq
        myFields: foo: "hi"
        normalFoo: "hi"
        v.validate
          myFields: foo: "   hi   "
          normalFoo: " hi "

