import &StandardImport

describe
  new: ->
    test "new Validator", ->
      new Validator

  exclusive: ->
    test "exclusive only allows declared fields", ->
      v = new Validator {id: 'trimmedString'}, exclusive: true
      v.validate id: "hi"
      assert.throws -> v.validate id: "id", foo: "bar"
      assert.throws -> v.validateUpdate id: "id", foo: "bar"
      v.validate id: "id"
      v.validateUpdate id: "id"

    test "inclusive", ->
      v = new Validator id: 'trimmedString'
      v.validate id: "hi"
      v.validate id: "id", foo: "bar"
      v.validateUpdate id: "id", foo: "bar"

    test "true is sufficient for declaring expected fields", ->
      v = new Validator {id: true, foo: true}, exclusive: true
      v.validate id: "hi"
      v.validate id: "id", foo: "bar"
      v.validateUpdate id: "id", foo: "bar"

  trimmedString: ->
    test "id: 'trimmedString'", ->
      v = new Validator id: 'trimmedString'
      v.validate id: "ok"
      v.validate {}
      assert.throws -> v.validate id: 123

    test "required: 'trimmedString'", ->
      v = new Validator id: :required :trimmedString
      v.validate id: "hi"
      assert.throws -> v.validate id: 123
      assert.throws -> v.validate()

    test "requiredPresent: 'trimmedString'", ->
      v = new Validator id: [] :required :present fieldType: :trimmedString
      assert.throws -> v.validate(id: 123), "with number"
      assert.throws -> v.validate(), "missing"
      assert.throws -> v.validate(id: ""), "id:''"
      assert.throws -> v.validate(id: "  "), "id:'  '"
      v.validate id: "hi"

  declarationTypes: ->
    test "fieldType: 'id'", ->
      v = new Validator
        id: fieldType: "id"

      assert.throws -> v.validate {}
      v.validateUpdate {}
      v.validate id: "123"
      assert.rejects -> v.validate(id: 123)
      .then ({info}) -> assert.eq Object.keys(info.errors), [] :id

    test "validate: ->", ->
      v = new Validator
        id: validate: (v) -> isString v

      v.validate {}
      v.validateUpdate {}
      v.validate id: "123"
      assert.rejects -> v.validate id: 123
      .then ({info}) -> assert.eq info.errors, id: "invalid"

    test "preprocess: ->", ->
      v = new Validator
        id: preprocess: (v) -> "#{v}a"

      {id} = v.validateUpdate id: "123"
      assert.eq id, "123a"

      {id} = v.validateUpdate id: 456
      assert.eq id, "456a"


    test "present: true", ->
      v = new Validator
        id: present: true

      v.validate id: "123"
      v.validateUpdate {}
      assert.throws -> v.validate id: ""
      assert.throws -> v.validate id: null
      assert.throws -> v.validate id: undefined
      assert.throws -> v.validateUpdate id: ""
      assert.throws -> v.validateUpdate id: null
      assert.throws -> v.validateUpdate id: undefined

      # NOTE: present(false) is false
      # from Rails: https://apidock.com/rails/Object/blank%3F
      assert.throws -> v.validate id: false
      assert.throws -> v.validateUpdate id: false

      v.validate id: 123
      v.validate id: :abc
      v.validateUpdate id: 123
      v.validateUpdate id: :abc

    test "required: true", ->
      v = new Validator
        id: required: true

      v.validate id: 123
      v.validateUpdate {}
      assert.throws -> v.validate {}
      assert.throws -> v.validate id: undefined
      assert.throws -> v.validateUpdate id: null
      assert.throws -> v.validateUpdate id: undefined

      assert.rejects -> v.validate id: null
      .then ({info}) ->
        log {} info
        assert.eq info.errors, id: "missing"
      .then -> assert.rejects -> v.validate id: undefined
      .then ({info}) -> assert.eq info.errors, id: "missing"

    test "instanceof: Foo", ->
      class Foo
      class Bar extends Foo
      v = new Validator
        foo: instanceof: Foo

      Promise.resolve()
      v.validate foo: new Foo
      v.validate foo: new Bar
      v.validate foo: null
      assert.rejects -> v.validate foo: {}
      .then ({info}) -> assert.eq info.errors, foo: "invalid"

  compoundTests:->
    test "'required', validate: ->", ->
      v = new Validator
        foo:
          :required
          validate: (v) -> v.match /// ^email\:#{findEmailRegexp.source}$

      assert.throws -> v.validate id: 123
      assert.throws -> v.validate foo: "test@test.com"
      assert.throws -> v.validate foo: "email:metest"
      assert.rejects -> v.validate foo: "email:me"
      .then ({info}) -> assert.eq info.errors, foo: "invalid"
      .then -> assert.rejects -> v.validateUpdate foo: "email:me"
      .then ({info, stack}) -> assert.eq info.errors, foo: "invalid"
      .then -> v.validateUpdate()

  customFieldTypes: ->
    test "accepts custom fields" ->
      v = new Validator
        {} myField: :myCustomFieldType
        customFieldTypes: customFieldTypes = myCustomFieldType: :string

      assert.eq
        v.customFieldTypes
        customFieldTypes

      assert.eq
        v.fields
        myField: merge
          normalizeFieldProps :string
          fieldType: :myCustomFieldType

      v.validate myField: :aString
      assert.throws -> v.validate myField: 123
