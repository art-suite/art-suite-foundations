import &StandardImport

describe
  validation: ->
    test "optional enum" ->
      validator = new Validator myStatus: enum: :ok :failure :retry

      validator.validate myStatus: :ok
      validator.validate myStatus: :failure
      validator.validate myStatus: :retry
      validator.validate {} # not required
      assert.throws -> validator.validate myStatus: :alice

    test "required enum" ->
      validator = new Validator myStatus: :required enum: :ok :failure :retry

      validator.validate myStatus: :ok
      assert.throws -> validator.validate {} # required

  invalidForms: ->
    test "enum values must be strings" ->
      assert.throws -> new Validator myStatus: enum: 123

    test "strings must be present" ->
      assert.throws -> new Validator myStatus: enum: ''
      assert.throws -> new Validator myStatus: enum: [] '         '

    test "must have at least one value" ->
      assert.throws -> new Validator myStatus: enum: []

  validForms: ->
    test "single enum, no array" ->
      a = new Validator myStatus: enum: :ok # single string, no array
      assert.eq a.fields.myStatus.enum, [] :ok

    test "nested arrays ok" ->
      a = new Validator myStatus: enum: :ok [] :foo [] :bar # nested arrays
      assert.eq a.fields.myStatus.enum, [] :ok :foo :bar

    test "multiple enums in one string ok" ->
      a = new Validator myStatus: enum: "ok foo bar" # nested arrays
      assert.eq a.fields.myStatus.enum, [] :ok :foo :bar
