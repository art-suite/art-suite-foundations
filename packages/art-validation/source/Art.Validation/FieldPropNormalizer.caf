import &StandardImport, &StandardValidations, &Enum, &Tools, {} &FieldTypes

namespace = require :./namespace

alwaysValid = -> true
noop = (a) -> a

standardTags =
  required: true
  present: true

## normalizeRecursivePlainObjectProps
  IN: plainObjectFieldType: plain object
  OUT: plain object

  converts something like this:
    this: is: a: recursive: field: definition: :number

  into this:
    this: true
    is: true
    a: true
    recursive: true
    field: true
    definition: true
    fieldType: :number
normalizeRecursivePlainObjectProps = (plainObjectFieldType, validatorOptions) ->
  if 1 == objectKeyCount plainObjectFieldType
    find singleFieldValue, singleFieldName from plainObjectFieldType when standardTags[singleFieldName] &&
        isPlainObject singleFieldValue
        || isString singleFieldValue
      message = validatorOptions.getNiceErrorMessage
        "" ArtValidation DEPRECATED fieldProps: {#{singleFieldName}: object/string}. USE: ["#{singleFieldName}", object/string]
        plainObjectFieldType
      log.warn message unless validatorOptions.quiet

      [] singleFieldName, singleFieldValue

  ? plainObjectFieldType

normalizeDeprecatedProps = (fieldProps, validatorOptions) ->
  if fieldProps.requiredPresent
    throw new DeprecationError validatorOptions.getNiceErrorMessage "ArtValidation DEPRECATED fieldProps: requiredPresent. USE: present: true", fieldProps
  fieldProps

normalizeRecursiveFieldProps = (fieldProps, validatorOptions) ->
  fieldProps extract fields, array as _array, validate, postValidate, preprocess, map
  if (fields && 1 || 0) + (_array && 1 || 0) + (map && 1 || 0) > 1
    throw new ConfigurationError validatorOptions.getNiceErrorMessage "Invalid fieldProps. Can only specify one of `array: ...`, `fields: ...` or 'object: ...'", fieldProps

  switch
  when fields
    subValidator = new namespace.Validator fields, merge validatorOptions, exclusive: true
    fieldProps = merge fieldProps, {}
      subValidator.fields
      getValidationErrors: (value, fieldPath, forCreate) ->
        if !isPlainObject value
          {} fieldPath, value, error: "" must be a plain object
        else
          unless subValidator.isValid value, forCreate
            subValidator.getValidationErrors value, fieldPath, forCreate

      dataType:   :object
      fieldType:  :object
      validate:   validate ? (v) -> isPlainObject(v) && subValidator.isValid v
      preprocess: preprocess ? (v) -> subValidator.preprocess v

  when _array
    normalizedArray = _normalizeFieldProps _array, validatorOptions
    elementIsValid = (v) ->
      if normalizedArray.required && !v?
        false
      else
        if v? && normalizedArray.validate
          !!normalizedArray.validate v
        else true

    merge fieldProps,
      getValidationErrors: (value, fieldPath, forCreate) ->
        if !isArray value
          {} fieldPath, value, errorIs: "" not an array
        else
          array subValue, i in-array value when !elementIsValid subValue
            subFieldPath = joinFieldPath fieldPath, i
            makeEmptyArraysIntoNulls normalizedArray.getValidationErrors? subValue, subFieldPath, forCreate
            || {} value: subValue, fieldPath: subFieldPath, errorIs: standardInvalidMessage normalizedArray, subValue

      dataType:   :array
      fieldType:  :array
      array:      normalizedArray
      validate:   validate ? if normalizedArray.validate || normalizedArray.required
        (_array) ->
          isArray _array
          && !validate || validate _array
          && !find v in-array _array with !elementIsValid v

      preprocess: preprocess ? if normalizedArray.preprocess
        (_array) -> if isArray _array then array v in _array with normalizedArray.preprocess v else _array

      postValidate: postValidate ? if normalizedArray.postValidate
        (_array) -> !find v in-array _array with !normalizedArray.postValidate v

  when map
    map extract keys, values
    if !keys && !values
      throw new ConfigurationError validatorOptions.getNiceErrorMessage "Invalid fieldProps. 'object' definition must specify 'keys' and/or 'values'", fieldProps
    keys = keys && _normalizeFieldProps [:string, keys, dataType: :string], validatorOptions
    values = values && _normalizeFieldProps values, validatorOptions

    validateKey = keys?.validate || alwaysValid
    validateValue = values?.validate || alwaysValid
    preprocessKey = keys?.preprocess || noop
    preprocessValue = values?.preprocess || noop
    postValidateKey = keys?.postValidate || alwaysValid
    postValidateValue = values?.postValidate || alwaysValid

    needToPreprocess = values?.preprocess || keys?.preprocess

    elementIsValid = if validateKey || validateValue
      (value, key) -> validateKey(key) && validateValue value

    elementIsPostValid = if postValidateKey || postValidateValue
      (value, key) -> postValidateKey(key) && postValidateValue(value)

    dataType:   :object
    fieldType:  :map
    object: {} keys, values
    validate: validate = (value) ->
      if isObject value
        elementIsValid && !find v, k in value with !elementIsValid v, k

    preprocess: preprocess = (value) ->
      if isObject value
        if needToPreprocess
          object v, k from value with-key preprocessKey k with preprocessValue v
        else value

    postValidate: if elementIsPostValid then (value) -> !find v, k in value with !elementIsPostValid v, k

    getValidationErrors: (value, fieldPath, forCreate) ->
      if !isObject value
        {} fieldPath, value, errorIs: "" not an object
      else
        if !validate value
          keyTest = keys?.validate ? alwaysValid
          valueTest = values?.validate ? alwaysValid
          fieldTest = elementIsValid
        else
          keyTest = keys?.postValidate ? alwaysValid
          valueTest = values?.postValidate ? alwaysValid
          value = preprocess value
          fieldTest = elementIsPostValid

        if fieldTest
          compactFlatten array v, k in value when !fieldTest v, k
            path = joinFieldPath(fieldPath, k)
            []
              if !keyTest k
                keyPath = path+"(the key itself)"
                keys.getValidationErrors? k, keyPath, forCreate
                || value: k, fieldPath: keyPath, errorIs: standardInvalidMessage keys, k

              if !valueTest k
                values.getValidationErrors? v, path, forCreate
                || value: v, fieldPath: path, errorIs: standardInvalidMessage values, v

  else fieldProps

processingCustomFieldTypePath = []
normalizeStringFieldProp = (fieldPropString, validatorOptions) ->
  if customFieldType = validatorOptions.customFieldTypes[fieldPropString]
    try
      if fieldPropString in processingCustomFieldTypePath
        throw new ConfigurationError validatorOptions.getNiceErrorMessage "" Invalid custom fields. Recursive custom field types are not supported. Recursive path: #{processingCustomFieldTypePath.join ' > '} > #{fieldPropString}

      processingCustomFieldTypePath.push fieldPropString

      if isPlainObject(customFieldType) || isString customFieldType
        customFieldTypeProps = _normalizeFieldProps customFieldType, validatorOptions

      else throw new ConfigurationError validatorOptions.getNiceErrorMessage "Invalid custom field type. Expected fieldPropString or plain object", customFieldType

      merge customFieldTypeProps, fieldType: fieldPropString

    finally
      processingCustomFieldTypePath.pop()

  else if namedFieldTypeProps = FieldTypes[fieldPropString]
    merge namedFieldTypeProps, fieldType: fieldPropString

  else
    [fieldPropString]: true

normalizeFieldPropsStructure = (fieldProps, validatorOptions) ->
  compactFlatten array element in compactFlattenAll fieldProps
    switch
    when isString element then w element
    when isPlainObject element
      element = normalizeRecursivePlainObjectProps element, validatorOptions
      if (element extract enum as rawEnum)?
        createEnumFieldType element

      else if element extract fieldType
        if FieldTypes[fieldType] || validatorOptions.customFieldTypes[fieldType]
          [] element.fieldType, element
        else throw new ConfigurationError validatorOptions.getNiceErrorMessage
          "" Invalid, explicit fieldType. Valid fieldTypes: #{}
            Object.keys merge FieldTypes, validatorOptions.customFieldTypes
            .sort()
            .join ', '

          fieldType

      else element

    when element == true then FieldTypes.any
    else throw new ConfigurationError validatorOptions.getNiceErrorMessage "Invalid fieldProps. Expected string, plainObject, or array of strings, plainObjects and/or arrays", element

_normalizeFieldProps = (fieldProps, validatorOptions) ->
  each fieldProps in normalizeFieldPropsStructure fieldProps, validatorOptions into normalizedFieldProps = {}
    mergeInto
      normalizedFieldProps
      switch
      when isString fieldProps then normalizeStringFieldProp fieldProps, validatorOptions

      when isPlainObject fieldProps
        fieldProps = preExpandStandardValidationProps fieldProps, validatorOptions
        fieldProps = normalizeDeprecatedProps fieldProps, validatorOptions
        fieldProps = normalizeRecursiveFieldProps fieldProps, validatorOptions

      else throw new ConfigurationError validatorOptions.getNiceErrorMessage "Internal failure. Should not be possible to get here.", fieldProps

  normalizeAllStandardValidations normalizedFieldProps, validatorOptions

normalizeValidatorOptions = (validatorOptions) ->
  merge
    validatorOptions
    customFieldTypes: validatorOptions?.customFieldTypes ? {}
    getNiceErrorMessage: (message, invalidInput) ~>
      joiner = '. '
      compact []
        message
        if invalidInput && invalidInput != @rawFieldProps
          inspected = formattedInspect invalidInput
          if /\n/.test inspected
            joiner = "\n"
            inspected = "\n  " + inspected.replace /\n/g, "\n  "
          "" Got: #{inspected}
        if @fieldName then "Field #{@fieldName}:"
        if @rawFieldProps
          inspected = formattedInspect @rawFieldProps
          if /\n/.test inspected
            joiner = "\n"
            inspected = "\n  " + inspected.replace /\n/g, "\n  "
          "" Raw fieldProps: #{inspected}

      .join joiner

{}
  normalizeFieldProps:  (fieldProps, validatorOptions) ->
    validatorOptions = normalizeValidatorOptions validatorOptions
    validatorOptions.rawFieldProps = fieldProps
    _normalizeFieldProps fieldProps, validatorOptions

  normalizeFields:      (fields, validatorOptions) ->
    validatorOptions = normalizeValidatorOptions validatorOptions
    object fieldProps, fieldName in fields
      validatorOptions.fieldName = fieldName
      validatorOptions.rawFieldProps = fieldProps
      _normalizeFieldProps fieldProps, validatorOptions
