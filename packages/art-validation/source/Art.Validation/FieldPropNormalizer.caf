import &ArtStandardLib, {} &FieldTypes

namespace = require :./namespace

normalizeInstanceOfProp = (ft) ->
  if _instanceof = ft.instanceof
    {validate} = ft
    merge ft,
      validate: (v) ->
        (v instanceof _instanceof) &&
        (!validate || validate v)
  else
    ft

allowedBooleanProps =
  required: true
  present: true

## normalizeRecursivePlainObjectProps
  IN: plainObjectFieldType: plain object
  OUT: plain object

  converts something like this:
    this: is: a: recursive: field: definition: :number

  into this:
    this: true
    is: true
    a: true
    recursive: true
    field: true
    definition: true
    fieldType: :number
normalizeRecursivePlainObjectProps = (plainObjectFieldType) ->
  if 1 == objectKeyCount plainObjectFieldType
    find singleFieldValue, singleFieldName from plainObjectFieldType when allowedBooleanProps[singleFieldName] &&
        isPlainObject singleFieldValue
        || isString singleFieldValue
      mergeIntoUnless
        [singleFieldName]: true
        if isString singleFieldValue
          FieldTypes[singleFieldValue]
        else normalizeRecursivePlainObjectProps singleFieldValue

  ? plainObjectFieldType

normalizeDeprecatedProps = (ft) ->
  throw new Error "DEPRECATED: requiredPresent. Use: present: true" if ft.requiredPresent
  ft

normalizeFieldTypeProp = (ft, customFieldTypes) ->
  {fieldType, fields, array: _array, validate, postValidate, preprocess, minLength, maxLength} = ft
  fieldType ?= :object if fields
  ft = merge FieldTypes[fieldType], ft if isString fieldType
  if fields
    throw new Error "Can only specify `array: ...` or `fields: ...`" if _array
    subValidator = new namespace.Validator fields, {} customFieldTypes, exclusive: true
    ft = merge ft, {}
      subValidator.fields
      validate:   validate ? (v) -> isPlainObject(v) && subValidator.isValid v
      preprocess: preprocess ? (v) -> subValidator.preprocess v

  else if _array
    normalizedArray = _normalizeFieldProps _array, customFieldTypes
    merge ft,
      array:      normalizedArray
      validate:  validate ? if normalizedArray.validate || normalizedArray.required
        (_array) ->
          isArray _array
          && !validate || validate _array
          && !normalizedArray.validate || !find v in-array _array when v? && !normalizedArray.validate v with true
          && !normalizedArray.required || !find v in-array _array when !v? with true

      preprocess: preprocess ? if normalizedArray.preprocess
        (_array) ->
          if isArray _array then array v in _array with normalizedArray.preprocess v else _array

      postValidate: postValidate ? if normalizedArray.postValidate
        (_array) ->
          !find v in-array _array when !normalizedArray.postValidate v with true

  else ft

fieldPropsWithGeneratedPostValidator = (fieldProps, customFieldTypes) ->
  fieldProps extract preprocess, validate, postValidate, maxLength, minLength, fields

  if (maxLength? || minLength?) # not array, because we already create a postValidate for arrays
    fieldProps.postValidate = (value, fieldName, fields) ->
      if postValidate && !postValidate value, fieldName, fields then false
      else if value?
        if maxLength? && value.length > maxLength       then false
        else if minLength? && value.length < minLength  then false
        else true

      else true

  fieldProps

normalizeLengthChecks = (ft) ->
  if ft extract length? then merge ft, maxLength: length, minLength: length else ft

processingCustomFieldtypePath = []
_normalizeFieldProps = (ft, customFieldTypes) ->
  fieldProps =
    switch
    when isPlainObject ft
      normalizeFieldTypeProp
        normalizeInstanceOfProp normalizeDeprecatedProps normalizeRecursivePlainObjectProps normalizeLengthChecks ft
        customFieldTypes

    when isPlainArray ftArray = ft
      each ft in compactFlatten ftArray into out = {}
        mergeInto out, _normalizeFieldProps ft, customFieldTypes

    when isString strings = ft
      ft = {}
      each string in-array w strings
        if customFieldType = customFieldTypes?[string]
          try
            if string in processingCustomFieldtypePath
              throw new Error "" Recursive custom field types are not supported. Recursive path: #{processingCustomFieldtypePath.join ' > '} > #{string}

            processingCustomFieldtypePath.push string

            if isPlainObject(customFieldType) || isString customFieldType
              customFieldTypeProps = _normalizeFieldProps customFieldType, customFieldTypes

            else throw new Error "Invalid custom field type #{customFieldType}. Expected string or plain object. Got: #{formattedInspect customFieldType}"

          finally
            processingCustomFieldtypePath.pop()

        if subFt = customFieldTypeProps ? FieldTypes[string]
          ft.fieldType = string
          mergeIntoUnless ft, subFt

        else if allowedBooleanProps[string]
          ft[string] = true

        else throw new Error "" Unknown field-type: #{JSON.stringify string}

      ft

    when ft == true
      FieldTypes.any

    else
      throw new Error "fieldType must be a string or plainObject. Was: #{formattedInspect ft}"

  fieldPropsWithGeneratedPostValidator
    merge FieldTypes[fieldProps.fieldType], fieldProps
    customFieldTypes

noCustomFieldTypes = {}

{}
  normalizeFieldProps = (fieldType, customFieldTypes) -> _normalizeFieldProps fieldType, customFieldTypes ? noCustomFieldTypes
  normalizeFields:      (fields, customFieldTypes) -> object fieldType in fields with normalizeFieldProps fieldType, customFieldTypes
