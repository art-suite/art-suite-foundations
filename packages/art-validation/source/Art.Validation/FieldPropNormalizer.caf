import &ArtStandardLib, &StandardValidations, {} &FieldTypes

namespace = require :./namespace

standardTags =
  required: true
  present: true

## normalizeRecursivePlainObjectProps
  IN: plainObjectFieldType: plain object
  OUT: plain object

  converts something like this:
    this: is: a: recursive: field: definition: :number

  into this:
    this: true
    is: true
    a: true
    recursive: true
    field: true
    definition: true
    fieldType: :number
normalizeRecursivePlainObjectProps = (plainObjectFieldType, validatorOptions) ->
  if 1 == objectKeyCount plainObjectFieldType
    find singleFieldValue, singleFieldName from plainObjectFieldType when standardTags[singleFieldName] &&
        isPlainObject singleFieldValue
        || isString singleFieldValue
      message = validatorOptions.getNiceErrorMessage
        "" ArtValidation DEPRECATED fieldProps: {#{singleFieldName}: object/string}. USE: ["#{singleFieldName}", object/string]
        plainObjectFieldType
      log.warn message unless validatorOptions.quiet

      [] singleFieldName, singleFieldValue

  ? plainObjectFieldType

normalizeDeprecatedProps = (fieldProps, validatorOptions) ->
  if fieldProps.requiredPresent
    throw new Error validatorOptions.getNiceErrorMessage "ArtValidation DEPRECATED fieldProps: requiredPresent. USE: present: true", fieldProps
  fieldProps

normalizeObjectAndArrayFieldProps = (fieldProps, validatorOptions) ->
  fieldProps extract fields, array as _array, validate, postValidate, preprocess
  if fields
    if _array
      throw new Error validatorOptions.getNiceErrorMessage "Invalid fieldProps. Can only specify `array: ...` or `fields: ...`", fieldProps
    subValidator = new namespace.Validator fields, merge validatorOptions, exclusive: true
    fieldProps = merge fieldProps, {}
      subValidator.fields
      dataType:   :object
      fieldType:  :object
      validate:   validate ? (v) -> isPlainObject(v) && subValidator.isValid v
      preprocess: preprocess ? (v) -> subValidator.preprocess v

  else if _array
    normalizedArray = _normalizeFieldProps _array, validatorOptions
    merge fieldProps,
      dataType:   :array
      fieldType:  :array
      array:      normalizedArray
      validate:   validate ? if normalizedArray.validate || normalizedArray.required
        (_array) ->
          isArray _array
          && !validate || validate _array
          && !normalizedArray.validate || !find v in-array _array when v? && !normalizedArray.validate v with true
          && !normalizedArray.required || !find v in-array _array when !v? with true

      preprocess: preprocess ? if normalizedArray.preprocess
        (_array) -> if isArray _array then array v in _array with normalizedArray.preprocess v else _array

      postValidate: postValidate ? if normalizedArray.postValidate
        (_array) -> !find v in-array _array when !normalizedArray.postValidate v with true

  else fieldProps

processingCustomFieldtypePath = []
normalizeStringFieldProp = (fieldPropString, validatorOptions) ->
  if customFieldType = validatorOptions.customFieldTypes[fieldPropString]
    try
      if fieldPropString in processingCustomFieldtypePath
        throw new Error validatorOptions.getNiceErrorMessage "" Invalid custom fields. Recursive custom field types are not supported. Recursive path: #{processingCustomFieldtypePath.join ' > '} > #{fieldPropString}

      processingCustomFieldtypePath.push fieldPropString

      if isPlainObject(customFieldType) || isString customFieldType
        customFieldTypeProps = _normalizeFieldProps customFieldType, validatorOptions

      else throw new Error validatorOptions.getNiceErrorMessage "Invalid custom field type. Expected fieldPropString or plain object", customFieldType

      merge customFieldTypeProps, fieldType: fieldPropString

    finally
      processingCustomFieldtypePath.pop()

  else if namedFieldTypeProps = FieldTypes[fieldPropString]
    merge namedFieldTypeProps, fieldType: fieldPropString

  else
    [fieldPropString]: true

normalizeFieldPropsStructure = (fieldProps, validatorOptions) ->
  compactFlatten array element in compactFlattenAll fieldProps
    switch
    when isString element then w element
    when isPlainObject element
      element = normalizeRecursivePlainObjectProps element, validatorOptions
      if element extract fieldType
        if FieldTypes[fieldType] || validatorOptions.customFieldTypes[fieldType]
          [] element.fieldType, element
        else throw new Error validatorOptions.getNiceErrorMessage
          "" Invalid, explicit fieldType. Valid fieldTypes: #{}
            Object.keys merge FieldTypes, validatorOptions.customFieldTypes
            .sort()
            .join ', '

          fieldType

      else element

    when element == true then FieldTypes.any
    else throw new Error validatorOptions.getNiceErrorMessage "Invalid fieldProps. Expected string, plainObject, or array of strings, plainObjects and/or arrays", element

_normalizeFieldProps = (fieldProps, validatorOptions) ->
  each fieldProps in normalizeFieldPropsStructure fieldProps, validatorOptions into normalizedFieldProps = {}
    mergeInto
      normalizedFieldProps
      switch
      when isString fieldProps then normalizeStringFieldProp fieldProps, validatorOptions

      when isPlainObject fieldProps
        fieldProps = preExpandStandardValidationProps fieldProps, validatorOptions
        fieldProps = normalizeDeprecatedProps fieldProps, validatorOptions
        fieldProps = normalizeObjectAndArrayFieldProps fieldProps, validatorOptions

      else throw new Error validatorOptions.getNiceErrorMessage "Internal failure. Should not be possible to get here.", fieldProps

  normalizeAllStandardValidations normalizedFieldProps, validatorOptions

normalizeValidatorOptions = (validatorOptions) ->
  merge
    validatorOptions
    customFieldTypes: validatorOptions?.customFieldTypes ? {}
    getNiceErrorMessage: (message, invalidInput) ~>
      joiner = '. '
      compact []
        message
        if invalidInput && invalidInput != @rawFieldProps
          inspected = formattedInspect invalidInput
          if /\n/.test inspected
            joiner = "\n"
            inspected = "\n  " + inspected.replace /\n/g, "\n  "
          "" Got: #{inspected}
        if @fieldName then "Field #{@fieldName}:"
        if @rawFieldProps
          inspected = formattedInspect @rawFieldProps
          if /\n/.test inspected
            joiner = "\n"
            inspected = "\n  " + inspected.replace /\n/g, "\n  "
          "" Raw fieldProps: #{inspected}

      .join joiner

{}
  normalizeFieldProps:  (fieldProps, validatorOptions) ->
    validatorOptions = normalizeValidatorOptions validatorOptions
    validatorOptions.rawFieldProps = fieldProps
    _normalizeFieldProps fieldProps, validatorOptions

  normalizeFields:      (fields, validatorOptions) ->
    validatorOptions = normalizeValidatorOptions validatorOptions
    object fieldProps, fieldName in fields
      validatorOptions.fieldName = fieldName
      validatorOptions.rawFieldProps = fieldProps
      _normalizeFieldProps fieldProps, validatorOptions
