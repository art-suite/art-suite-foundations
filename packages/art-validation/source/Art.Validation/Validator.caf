import &ArtStandardLib, &ArtClassSystem, &DataTypes, &FieldPropNormalizer, {} &FieldTypes, &DataTypes

###
  CONCEPTS:

    Each field can have up to three custom functions:

      validate: (v) -> true/false

        Validate is evaludated first. If it returns a false value, validation fails.

        NOTE: Return false for validation failures, DO NOT THROUGH ERRORS

      preprocess: (v1) -> v2

        Preprocess can arbitrarily transform the input value to any output value.

        The output-value is what is passed back after successful validation.

        NOTE: preprocessors should NOT throw validation-related errors

      postValidate: (v) -> true/false

        Post-validate is evaludated last. It works the same as validate, but
        sometimes it's easy to normalize the input first with 'preprocess' and
        THEN validate it.

  USAGE:
    new Validator validatorFieldsProps, options

      IN:
        validatorFieldsProps:
          plain object with zero or more field-validations defined:
            fieldName: fieldProps
        options:
          exclusive: true/false
            if true, only fields listed in validatorFieldsProps are allowed.

          context: String
            String to attached to errors for clarity.

      fieldProps:
        string or plainObject
        string: selects fieldProps from one of the standard @FieldTypes (see below)
        plainObject: (all fields are optional)

          validate: (v) -> true/false
            whenever this field is included in an update OR create operation,
              validate() must return true
            NOTE: validate is evaluated BEFORE preprocess

          preprocess: (v1, forCreate) -> v2
            whenever this field is included in an update OR create operation,
              after validation succeeds,
              value = preprocess value
            NOTE: validate is evaluated BEFORE preprocess

          required: true/false/string
            if true/string
              when creating records, this field must be included
            if string
              fieldProps = merge fieldProps, FieldTypes[string]

          present: true/false
            if true
              when creating records, this field must be include and 'present' (see Art.Foundation.present)

          fieldType: string
            fieldProps = merge FieldTypes[string], fieldProps

          dataType: string
            sepecify which of the standard Json data-types this field contains
            This is not used by Validator itself, but is available for clients to reflect on field-types.
            Must be one of the values in: DataTypes

          instanceof: class
            in addition to passing validate(), if present, the value must also be an instance of the
            specified class
class Validator extends BaseClass

  @normalizeFields: normalizeFields
  @normalizeFieldProps: normalizeFieldProps

  ## constructor
    IN:
      fieldDeclarationMap: [fieldName]: fieldProps
      options:
        exclusive: true - only fields listed in fieldDeclarationMap are allowed
        context: string - descriptive string to attach to errors
        customFieldtypes: [filedType]: fieldProps
        customTags: [tag]: value (any) - when the tag is used, {tag: value} is added to the field-props
  constructor: (fieldDeclarationMap, validatorOptions) ->
    if validatorOptions
      @_validatorOptions = validatorOptions
      @exclusive = validatorOptions.exclusive
      @context = validatorOptions.context
      @customFieldTypes = validatorOptions.customFieldTypes
      @customTags = validatorOptions.customTags

    @_fieldProps = {}
    @_requiredFields = []
    @addFields fieldDeclarationMap

  @property :exclusive :context :customFieldProps :customTags

  addFields: (fieldDeclarationMap) ->
    each fieldOptions, field from fieldDeclarationMap
      fieldOptions = @_addField field, fieldOptions
      if fieldOptions.required || fieldOptions.present
        pushIfNotPresent @_requiredFields, field

  @getter
    fields: -> @_fieldProps
    inspectedObjects: -> Validator: @_fieldProps

  # 2017-09-01 NEW API:
  # I'm going to drop the async stuff. It just makes this lib more complex than it needs to be
  # with modest savings to other libs. All it does is ensure fields are resolved before doing
  # fully synchronous work.

  # <DEPRECATED>
  preCreate: (fields, options) ->
    log.error "Validator.preCreate is DEPRECATED. Use .validate or .validateCreate"
    Promise.resolve(fields).then (fields) => @preCreateSync fields, options

  preUpdate: (fields, options) ->
    log.error "Validator.preUpdate is DEPRECATED. Use .validateUpdate"
    Promise.resolve(fields).then (fields) => @preUpdateSync fields, options

  validateSync: -> throw new Error "DEPRECATED: use validate"

  preCreateSync: (fields = {}, options) ->
    log.error "preCreateSync is DEPRECATED. use .validateCreate or just .validate"
    @validateCreate fields, options

  preUpdateSync: (fields = {}, options) ->
    log.error "preUpdateSync is DEPRECATED. use validateUpdate"
    @validateUpdate fields, options
  # </DEPRECATED>

  ## validateCreate
    IN:
      fields: - the object to check
      options:
        context: string - included in validation errors for reference
        logErrors: false - if true, will log.error errors

    OUT:
      if valid for create
        preprocessed fields
      else throw error

    NOTE: missing fields are errors
  validateCreate: validateCreate = (fields = {}, options) ->
    processedFields = null
    try
      @requiredFieldsPresent fields
      && @presentFieldsValid fields
      && @postValidateFields processedFields = @preprocess fields, true

    catch error
      log.error Validator: error_in: validateCreate: {fields, options, this: @, error}

    || @_throwError fields, processedFields, options, true

  validate:       validateCreate


  ## isValidCreate
    IN:
      fields: - the object to check

    OUT:
      if valid for create
        preprocessed fields
      else falsish
  isValidCreate: isValidCreate = (fields) ->
    @requiredFieldsPresent fields
    && @presentFieldsValid fields
    && @postValidateFields processedFields = @preprocess fields, true

  isValid: isValidCreate

  ## isValidUpdate
    IN:
      fields: - the object to check
      options:
        context: string - included in validation errors for reference
        logErrors: false - if true, will log.error errors

    OUT:
      if valid
        preprocessed fields
      else falsish

    NOTE: missing fields are ignored
  isValidUpdate: (fields) ->
    @presentFieldsValid fields
    && @postValidateFields processedFields = @preprocess fields

  ## validateUpdate
    IN:
      fields: - the object to check
      options:
        context: string - included in validation errors for reference
        logErrors: false - if true, will log.error errors

    OUT:
      if valid
        preprocessed fields
      else thrown error

    NOTE: missing fields are ignored
  validateUpdate: validateUpdate = (fields = {}, options) ->
    try
      @presentFieldsValid fields
      && @postValidateFields processedFields = @preprocess fields

    catch error
      log.error Validator: error_in: validateUpdate: {fields, options, this: @, error}

    || @_throwError fields, processedFields, options

  _throwError: (fields, processedFields, options, forCreate) ->
    info = errors: errors = {}
    messageFields = []

    array f from @invalidFields(fields) into messageFields
      errors[f] = "invalid"
      if @exclusive && !@_fieldProps[f]
            "" #{JSON.stringify f} unexpected"
      else  "" #{JSON.stringify f} failed validation

    array f from @postInvalidFields(processedFields) into messageFields
      errors[f] = "invalid"
      "" #{JSON.stringify f} failed post-validation

    forCreate && array f from @missingFields(fields) into messageFields
      errors[f] = "missing"
      "" #{JSON.stringify f} missing

    message = "#{options?.context ? @context} #{if forCreate then 'create' else 'update'}-validation failed. Invalid fields: #{messageFields.join ', '}"
    info.fields = fields
    throw new ErrorWithInfo message.trim(), info

  ####################
  # VALIDATION CORE
  ####################
  presentFieldPostValid: (fields, fieldName, value) ->
    if fieldProps = @_fieldProps[fieldName]
      fieldProps extract postValidate
      !postValidate || !value? || postValidate value, fieldName, fields
    else
      true

  presentFieldValid: (fields, fieldName, value) ->
    if fieldProps = @_fieldProps[fieldName]
      fieldProps extract validate
      if fieldProps.present && !present value
        false
      else
        !validate || !value? || validate value, fieldName, fields
    else
      !@exclusive

  requiredFieldPresent: (fields, fieldName) ->
    unless fieldProps = @_fieldProps[fieldName]
      true
    else
      value = fields[fieldName] ? fieldProps.default
      if fieldProps.required && !value?
        false
      else if fieldProps.present  && !present value
        false
      else
        true

  presentFieldsValid: (fields) ->
    !find fieldValue, fieldName from fields with !@presentFieldValid fields, fieldName, fieldValue

  requiredFieldsPresent: (fields) ->
    !find fieldValue, fieldName from @_fieldProps with !@requiredFieldPresent fields, fieldName

  postValidateFields: (fields) ->
    !find fieldValue, fieldName from fields with !@presentFieldPostValid fields, fieldName, fieldValue
    && fields

  ####################
  # PREPROCESS CORE
  ####################
  preprocess: preprocessFields = (fields, applyDefaults) ->
    processedFields = null
    fields ?= {} if applyDefaults
    fields && each props, fieldName from @_fieldProps
      value =
        if undefined != incomingValue = fields[fieldName]
              incomingValue
        else  applyDefaults && props.default

      value = props.preprocess value, applyDefaults if props.preprocess && value?

      if value != incomingValue
        processedFields ?= shallowClone fields
        processedFields[fieldName] = value

    processedFields ? fields ? {}

  preprocessFields: preprocessFields

  ####################
  # VALIDATION INFO CORE
  ####################
  invalidFields:      (fields) -> array v, k  from fields when !@presentFieldValid fields, k, v with k
  postInvalidFields:  (fields) -> array v, k  from fields when !@presentFieldPostValid fields, k, v with k
  missingFields:      (fields) -> array k     from @_requiredFields when !@requiredFieldPresent fields, k with k

  ###################
  # PRIVATE
  ###################
  _addField: (field, fieldProps) -> @_fieldProps[field] = normalizeFieldProps fieldProps, @_validatorOptions
