"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["validator", "describe", "test", "assert"], [global, require('../StandardImport')], (validator, describe, test, assert) => {let string, number; string = validator.string; number = validator.number; return describe({atomicValidation: function() {test("string validator", () => {let myValidator; myValidator = validator("string"); assert.true(myValidator.validate("hi")); assert.eq(myValidator.getValidationErrors("hi"), []); assert.false(myValidator.validate(123)); return assert.eq(myValidator.getValidationErrors(123), [{value: 123, fieldPath: undefined, errorIs: "an invalid-type"}]);}); test("number validator", () => {let myValidator; myValidator = validator("number"); assert.true(myValidator.validate(123)); return assert.false(myValidator.validate("hi"));}); test("boolean validator", () => {let myValidator; myValidator = validator("boolean"); assert.true(myValidator.validate(true)); return assert.false(myValidator.validate("hi"));}); return test("integer validator", () => {let myValidator; myValidator = validator("integer"); assert.true(myValidator.validate(123)); assert.false(myValidator.validate("hi")); assert.true(myValidator.validate(123.5)); return assert.eq(myValidator.validated(123.5), 123);});}, required: function() {test("required", () => {let myValidator; myValidator = validator.required("string"); assert.true(myValidator.validate("hi")); assert.false(myValidator.validate(null)); assert.false(myValidator.validate(undefined)); return assert.eq(myValidator.getValidationErrors(null), [{value: null, fieldPath: undefined, errorIs: "required"}]);}); return test("streamlined required", () => {let myValidator; myValidator = string.required; assert.true(myValidator.validate("hi")); assert.false(myValidator.validate(null)); return assert.false(myValidator.validate(undefined));});}, objectValidation: function() {test("simple object", () => {let myValidator; myValidator = validator({name: "string"}); assert.true(myValidator.validate({name: "Alice"})); assert.true(myValidator.validate({})); assert.true(myValidator.validate({name: "Alice", age: 123})); return assert.eq(myValidator.getValidationErrors({name: 123}), [{value: 123, fieldPath: "name", errorIs: "an invalid-type"}]);}); test("exclusive object", () => {let myValidator; myValidator = validator.exclusive({name: "string"}); assert.true(myValidator.validate({name: "Alice"})); assert.true(myValidator.validate({})); assert.false(myValidator.validate({name: "Alice", age: 123})); return assert.eq(myValidator.getValidationErrors({name: "Alice", age: 123}), [{value: 123, fieldPath: "age", errorIs: "an unexpected field"}]);}); return test("field required", () => {let myValidator, structure; assert.true(string.required.isRequired); myValidator = validator.required(structure = {name: string.required}); assert.true(myValidator.validate({name: "Alice"})); return assert.false(myValidator.validate({}));});}, arrayValidation: function() {test("simple array", () => {let myValidator; myValidator = validator([]); assert.true(myValidator.validate([])); assert.true(myValidator.validate([1, 2, 3])); assert.false(myValidator.validate(123)); return assert.eq(myValidator.getValidationErrors(123), [{value: 123, fieldPath: undefined, errorIs: "not an array"}]);}); return test("array with item type", () => {let myValidator; myValidator = validator([string]); assert.true(myValidator.validate([])); assert.true(myValidator.validate(["hi", null])); assert.false(myValidator.validate([123])); return assert.eq(myValidator.getValidationErrors([123, "bar", 456]), [{value: 123, fieldPath: "[0]", errorIs: "an invalid-type"}, {value: 456, fieldPath: "[2]", errorIs: "an invalid-type"}]);});}, jsonStructure: function() {return test("simple json structure", () => {let myValidator, boxValidationStructure; myValidator = validator({groupName: "string", boxes: [boxValidationStructure = validator.required({x: number.required, y: number.required, w: number.required, h: number.required, colors: validator.required([string.required])})]}); assert.true(myValidator.validate({})); assert.true(myValidator.validate({groupName: "Alice"})); assert.eq(myValidator.getValidationErrors({groupName: "Alice", boxes: [{}]}), [{value: undefined, fieldPath: "boxes[0].x", errorIs: "required"}, {value: undefined, fieldPath: "boxes[0].y", errorIs: "required"}, {value: undefined, fieldPath: "boxes[0].w", errorIs: "required"}, {value: undefined, fieldPath: "boxes[0].h", errorIs: "required"}, {value: undefined, fieldPath: "boxes[0].colors", errorIs: "required"}]); return assert.false(myValidator.validate({groupName: "Alice", boxes: [{}]}));});}});});});
//# sourceMappingURL=examples.test.js.map
