"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "Validator", "assert", "upperCamelCase"], [global, require('../StandardImport')], (test, Validator, assert, upperCamelCase) => {test("stateToCapital example - key length test", function() {let v; v = new Validator({stateToCapital: {map: {keys: {length: 2}}}}); v.validate({stateToCapital: {CO: "Denver"}}); return assert.throws(() => v.validate({stateToCapital: {C: "Denver"}}));}); test("stateToCapital example - values present", function() {let v; v = new Validator({stateToCapital: {map: {values: ["present", "string"]}}}); v.validate({stateToCapital: {CO: "Denver"}}); return assert.throws(() => v.validate({stateToCapital: {CO: ""}}));}); test("stateToCapital example - keys and values minLength", function() {let v; v = new Validator({stateToCapital: {map: {keys: ["string", {minLength: 2}], values: ["string", {minLength: 2}]}}}); v.validate({stateToCapital: {CO: "Denver"}}); assert.throws(() => v.validate({stateToCapital: {CO: "1"}})); return assert.throws(() => v.validate({stateToCapital: {C: "12"}}));}); return test("stateToCapital example - keys and values preprocess", function() {let v; v = new Validator({stateToCapital: {map: {keys: {preprocess: (k) => k.toUpperCase()}, values: {preprocess: upperCamelCase}}}}); return assert.eq(v.preprocess({stateToCapital: {co: "denver"}}), {stateToCapital: {CO: "Denver"}});});});});
//# sourceMappingURL=SubMapValidation.test.js.map
