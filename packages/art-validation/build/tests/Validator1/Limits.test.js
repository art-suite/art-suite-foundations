"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Validator", "assert", "randomString"], [global, require('../StandardImport')], (describe, test, Validator, assert, randomString) => {return describe({length: function() {test("length: 5", () => {let v; v = new Validator({caption: {fieldType: "trimmedString", length: 5}}); v.validateCreate({caption: "12345"}); assert.throws(() => v.validateCreate({caption: "123456"})); return assert.throws(() => v.validateCreate({caption: "1234"}));}); return test("object length: 2", () => {let v; v = new Validator({location: {fields: {x: "number", y: "number", z: "number"}, length: 2}}); v.validateCreate({location: {x: 1, y: 2}}); v.validateCreate({location: {z: 1, y: 2}}); v.validateCreate({location: {x: 1, z: 2}}); assert.throws(() => v.validateCreate({location: {x: 1, y: 2, z: 3}})); return assert.throws(() => v.validateCreate({location: {z: 3}}));});}, maxLength: function() {test("maxLength", () => {let v; v = new Validator({id: {fieldType: "trimmedString", maxLength: 5}}); return assert.throws(() => v.validateCreate({id: "  too long man"}));}); test("maxLength: 3000", () => {let v; v = new Validator({caption: {fieldType: "trimmedString", maxLength: 3000}}); return v.validateCreate({caption: randomString(2999)});}); return test("maxLength is after preprocess", () => {let v; v = new Validator({id: {fieldType: "trimmedString", maxLength: 5}}); return assert.eq({id: "123"}, v.validateCreate({id: "   123   "}));});}, minLength: function() {test("minLength", () => {let v; v = new Validator({id: {fieldType: "trimmedString", minLength: 5}}); assert.throws(() => v.validateCreate({id: "shrt"})); return v.validateCreate({id: "long enough"});}); return test("minLength is after preprocess", () => {let v; v = new Validator({id: {fieldType: "trimmedString", minLength: 5}}); return assert.throws(() => v.validateCreate({id: "   123   "}));});}, both: function() {return test("minLength and maxLength", () => {let v; v = new Validator({id: {fieldType: "trimmedString", minLength: 5, maxLength: 10}}); assert.throws(() => v.validateCreate({id: "1234"})); assert.throws(() => v.validateCreate({id: "1234567890-"})); v.validateCreate({id: "12345"}); return v.validateCreate({id: "1234567890"});});}});});});
//# sourceMappingURL=Limits.test.js.map
