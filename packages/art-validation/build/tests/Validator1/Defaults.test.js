"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Validator", "assert", "toSeconds"], [global, require('../StandardImport')], (describe, test, Validator, assert, toSeconds) => {return describe({validateUpdate: function() {return test("default: undefined", () => {let v3; v3 = new Validator({count: {fieldType: "number", default: 1}}); return assert.eq({}, v3.validateUpdate({}));});}, validateCreate: function() {return test("default: undefined", () => {let v3; v3 = new Validator({count: {fieldType: "number", default: 1}}); return assert.eq({count: 1}, v3.validateCreate({}));});}, validate: function() {test("default: 0 with incoming undefined", () => {let v1; v1 = new Validator({count: {fieldType: "number", default: 0}}); return assert.eq(v1.validate({count: undefined}), {count: 0});}); test("default: 0 with incoming null", () => {let v1; v1 = new Validator({count: {fieldType: "number", default: 0}}); return assert.eq(v1.validate({count: null}), {count: null});}); test("default: 1, validate {}", () => {let v2; v2 = new Validator({count: {fieldType: "number", default: 1}}); return assert.eq({count: 1}, v2.validate({}));}); test("default: 1, validate()", () => {let v2; v2 = new Validator({count: {fieldType: "number", default: 1}}); return assert.eq({count: 1}, v2.validate());}); test("default: null", () => {let v3; v3 = new Validator({count: {fieldType: "number", default: null}}); return assert.eq({count: null}, v3.validate({}));}); test("default: undefined", () => {let v3; v3 = new Validator({count: {fieldType: "number", default: undefined}}); return assert.eq({}, v3.validate({}));}); return test("default applied before preprocess", () => {let v1; v1 = new Validator({text: {fieldType: "trimmedString", default: " hi "}}); return assert.eq({text: "hi"}, v1.validate({}));});}, defaultFunctions: function() {test("default: -> toSeconds()", () => {let captureValue, validator; captureValue = null; validator = new Validator({lastActivityAt: ["number", {default: () => captureValue = toSeconds()}]}); assert.eq(validator.validate({}), {lastActivityAt: captureValue}); return assert.within(captureValue, toSeconds() - 2, toSeconds() + 2);}); test("defaultFunction: -> toSeconds()", () => {let captureValue, validator; captureValue = null; validator = new Validator({lastActivityAt: ["number", {defaultFunction: () => captureValue = toSeconds()}]}); assert.eq(validator.validate({}), {lastActivityAt: captureValue}); return assert.within(captureValue, toSeconds() - 2, toSeconds() + 2);}); test("default: (fieldName, fieldProps) -> ", () => {let validator; validator = new Validator({myFieldName: ["string", {default: (fieldName, fieldProps) => `${Caf.toString(fieldName)} ${Caf.toString(fieldProps.fieldType)}`}]}); return assert.eq(validator.validate({}), {myFieldName: "myFieldName string"});}); test("default: toSeconds, dataType: :function", () => {let validator; validator = new Validator({dontEvalThisDefaultFunction: {default: toSeconds, dataType: "function"}}); return assert.eq(validator.validate({}), {dontEvalThisDefaultFunction: toSeconds});}); return test("defaultFunction: (-> toSeconds), dataType: :function", () => {let validator; validator = new Validator({doEvalThisDefaultFunction: {defaultFunction: () => toSeconds, dataType: "function"}}); return assert.eq(validator.validate({}), {doEvalThisDefaultFunction: toSeconds});});}});});});
//# sourceMappingURL=Defaults.test.js.map
