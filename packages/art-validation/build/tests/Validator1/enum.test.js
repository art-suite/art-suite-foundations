"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Validator", "assert"], [global, require('../StandardImport')], (describe, test, Validator, assert) => {return describe({validation: function() {test("optional enum", () => {let validator; validator = new Validator({myStatus: {enum: ["ok", "failure", "retry"]}}); validator.validate({myStatus: "ok"}); validator.validate({myStatus: "failure"}); validator.validate({myStatus: "retry"}); validator.validate({}); return assert.throws(() => validator.validate({myStatus: "alice"}));}); return test("required enum", () => {let validator; validator = new Validator({myStatus: "required", enum: ["ok", "failure", "retry"]}); validator.validate({myStatus: "ok"}); return assert.throws(() => validator.validate({}));});}, invalidForms: function() {test("enum values must be strings", () => assert.throws(() => new Validator({myStatus: {enum: 123}}))); test("strings must be present", () => {assert.throws(() => new Validator({myStatus: {enum: ""}})); return assert.throws(() => new Validator({myStatus: {enum: ["         "]}}));}); return test("must have at least one value", () => assert.throws(() => new Validator({myStatus: {enum: []}})));}, validForms: function() {test("single enum, no array", () => {let a; a = new Validator({myStatus: {enum: "ok"}}); return assert.eq(a.fields.myStatus.enum, ["ok"]);}); test("nested arrays ok", () => {let a; a = new Validator({myStatus: {enum: ["ok", ["foo", ["bar"]]]}}); return assert.eq(a.fields.myStatus.enum, ["ok", "foo", "bar"]);}); return test("multiple enums in one string ok", () => {let a; a = new Validator({myStatus: {enum: "ok foo bar"}}); return assert.eq(a.fields.myStatus.enum, ["ok", "foo", "bar"]);});}, defaults: function() {return test("with default value", () => {let a; a = new Validator({myColor: {enum: ["red", "green", "blue"], default: "green"}}); return assert.eq(a.validate({}, true), {myColor: "green"});});}});});});
//# sourceMappingURL=enum.test.js.map
