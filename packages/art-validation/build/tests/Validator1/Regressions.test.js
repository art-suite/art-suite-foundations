"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Validator", "assert", "isString", "isArray"], [global, require('../StandardImport')], (describe, test, Validator, assert, isString, isArray) => {return describe({dynamoDb: function() {return test("complex example", () => {let sortKey, sortFieldValidator, v; sortKey = "myRank"; sortFieldValidator = "number"; v = new Validator({key: ["string", {required: true}], select: {validate: (select) => {let from, into, to, i, temp; return isString(select) || isArray(select) && select.length >= 1 && !(from = select, into = null, (from != null) ? (to = from.length, i = 0, (() => {while (i < to) {let v2; v2 = from[i]; if (!isString(v2)) {into = v2; break;}; temp = i++;}; return temp;})()) : undefined, into);}}, limit: ["number", {postValidate: (limit) => limit >= 1}], where: {minLength: 1, fields: {[sortKey]: sortFieldValidator, eq: sortFieldValidator, lt: sortFieldValidator, lte: sortFieldValidator, gt: sortFieldValidator, gte: sortFieldValidator, beginsWith: sortFieldValidator, between: {array: sortFieldValidator, length: 2, postValidate: ([a, b]) => a <= b}}}}); v.validate({key: "abc123", select: ["a", "b"], limit: 10, where: {gt: 123}}); return assert.rejects(() => v.validate({key: "abc123", select: ["a", "b"], limit: 10, where: {gt: {foo: 1}}})).then((error) => assert.match(error.message, /where.gt.*not.*valid/));});}});});});
//# sourceMappingURL=Regressions.test.js.map
