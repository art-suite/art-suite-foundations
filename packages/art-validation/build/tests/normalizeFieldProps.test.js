"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Validator", "describe", "assert", "peek", "formattedInspect", "Error", "test", "Object", "Array", "isFunction", "Function", "FieldTypes", "merge", "normalizeFields", "chainedTest"], [global, require('./StandardImport')], (Validator, describe, assert, peek, formattedInspect, Error, test, Object, Array, isFunction, Function, FieldTypes, merge, normalizeFields, chainedTest) => {let normalizeFieldProps, assertIsTrimmedString, cleanStackAndThrow, normalizeArgsAndName, testEqNormalizeFieldProps, testEqNormalizeFieldPropsWithFunctionsIdentified, assertDefinitionEq, stripFunctions, identifyFunctions; ({normalizeFieldProps} = Validator); assertIsTrimmedString = function(ft) {assert.eq(ft.dataType, "string"); assert.isFunction(ft.validate); return assert.isFunction(ft.preprocess);}; cleanStackAndThrow = function(stack, error) {let mergedStack; stack = Caf.array(stack.split(/\n/)).join("\n"); mergedStack = Caf.array(`${Caf.toString(error.stack)}\n${Caf.toString(stack)}`.split(/\n/), null, (line) => /testEqNormalizeFieldProps/.test(line)).join("\n").split("at describe"); error.stack = peek(mergedStack); return (() => {throw error;})();}; normalizeArgsAndName = function(args) {let name, testInput, shouldEqualOutput; if (args.length >= 3) {([name, testInput, shouldEqualOutput] = args);} else {([testInput, shouldEqualOutput] = args); name = `${Caf.toString(formattedInspect(testInput).replace(/\n/g, ", "))} >>> ${Caf.toString(formattedInspect(shouldEqualOutput).replace(/\n/g, ", "))}`;}; return {name, testInput, shouldEqualOutput};}; testEqNormalizeFieldProps = function(...args) {let stack, name, testInput, shouldEqualOutput; ({stack} = new Error); ({name, testInput, shouldEqualOutput} = normalizeArgsAndName(args)); return test(name, () => {let error; return (() => {try {return assertDefinitionEq(testInput, shouldEqualOutput);} catch (error1) {error = error1; return cleanStackAndThrow(stack, error);};})();});}; testEqNormalizeFieldPropsWithFunctionsIdentified = function(...args) {let stack, name, testInput, shouldEqualOutput; ({stack} = new Error); ({name, testInput, shouldEqualOutput} = normalizeArgsAndName(args)); return test(name, () => {let error; return (() => {try {return assertDefinitionEq(testInput, shouldEqualOutput, identifyFunctions);} catch (error1) {error = error1; return cleanStackAndThrow(stack, error);};})();});}; assertDefinitionEq = function(a, b, cleanThings = stripFunctions) {return assert.eq(cleanThings(normalizeFieldProps(a)), cleanThings(b), `this:       normalizeFieldProps ${Caf.toString(formattedInspect(a))}\nshould eq:  ${Caf.toString(formattedInspect(b))}`);}; stripFunctions = function(o) {return (() => {switch (false) {case !(Caf.is(o, Object)): return Caf.object(o, (v) => stripFunctions(v), (v) => !isFunction(v)); case !(Caf.is(o, Array)): return Caf.array(o, (v) => stripFunctions(v), (v) => !isFunction(v)); default: return o;};})();}; identifyFunctions = function(o) {return (() => {switch (false) {case !(Caf.is(o, Object)): return Caf.object(o, (v) => identifyFunctions(v)); case !(Caf.is(o, Array)): return Caf.array(o, (v) => identifyFunctions(v)); case !(Caf.is(o, Function)): return "function"; default: return o;};})();}; return describe({basicDefinitions: function() {test('just fieldType name (e.g. "number") selects the functions for that fieldType', () => assert.eq(normalizeFieldProps("number"), FieldTypes.number)); test("just custom functions, returned as-is", () => {let definition; return assert.eq(normalizeFieldProps(definition = {preprocess: (a) => a, validated: (a) => true, postValidated: (a) => true}), definition);}); test("can override fieldType's definition", () => {let definition; return assert.eq(normalizeFieldProps(["number", definition = {preprocess: (a) => a}]), merge(FieldTypes.number, definition));}); test("'required' tag", () => assert.eq(normalizeFieldProps("required"), {required: true})); return test("'present' tag", () => assert.eq(normalizeFieldProps("present"), {present: true}));}, more: function() {testEqNormalizeFieldProps({required: "number"}, {dataType: "number", fieldType: "number", required: true}); testEqNormalizeFieldProps({present: "number"}, {dataType: "number", fieldType: "number", present: true}); testEqNormalizeFieldProps({dood: "number"}, {dood: "number"}); return testEqNormalizeFieldProps({required: ["trimmedString"]}, {required: ["trimmedString"]});}, deprecated: function() {return test("requiredPresent: true", () => assert.throws(() => normalizeFieldProps({requiredPresent: true})));}, invalid: function() {test("non fieldType, non-tag is illegal", () => assert.rejects(() => normalizeFieldProps("unknownFieldType")).then((rejectsWith) => assert.match(rejectsWith.message, /unknown.*unknownFieldType/i))); return test("all variations with unknownFieldType", () => {normalizeFieldProps("number"); normalizeFieldProps("required number"); assert.throws(() => normalizeFieldProps("unknownFieldType")); assert.throws(() => normalizeFieldProps("number unknownFieldType")); return assert.throws(() => normalizeFieldProps("unknownFieldType number"));});}, tags: {asObjectProperties: function() {testEqNormalizeFieldProps({required: true}, {required: true}); testEqNormalizeFieldProps({present: true}, {present: true}); testEqNormalizeFieldProps({required: "number"}, {dataType: "number", fieldType: "number", required: true}); return testEqNormalizeFieldProps({required: {present: "number"}}, {dataType: "number", fieldType: "number", required: true, present: true});}, asSimpleStrings: function() {testEqNormalizeFieldProps("required", {required: true}); return testEqNormalizeFieldProps("present", {present: true});}, asArrays: function() {testEqNormalizeFieldProps(["required", "present"], {required: true, present: true}); testEqNormalizeFieldProps(["required", "number"], {dataType: "number", fieldType: "number", required: true}); return testEqNormalizeFieldProps(["required", "present", "number"], {dataType: "number", fieldType: "number", required: true, present: true});}, asCompoundStrings: function() {testEqNormalizeFieldProps("required present", {required: true, present: true}); testEqNormalizeFieldProps("required number", {dataType: "number", fieldType: "number", required: true}); return testEqNormalizeFieldProps("required present number", {dataType: "number", fieldType: "number", required: true, present: true});}, tagsCanBeMixedWithCustomProps: function() {testEqNormalizeFieldProps("fieldType then object-props", ["trimmedString", {foo: true, bar: true}], normalizeFieldProps({foo: true, bar: true, fieldType: "trimmedString"})); return testEqNormalizeFieldProps("alternating tags and object-props", ["present", {foo: true}, "required", {bar: true}, "trimmedString"], normalizeFieldProps({foo: true, bar: true, fieldType: "trimmedString", required: true, present: true}));}}, "properties-on-a-custom-field-are-not-interpreted": function() {testEqNormalizeFieldProps({foobar: "number"}, {foobar: "number"}); testEqNormalizeFieldProps({foobar: {required: true}}, {foobar: {required: true}}); testEqNormalizeFieldProps({foobar: {required: "number"}}, {foobar: {required: "number"}}); testEqNormalizeFieldProps({required: {foobar: true}}, {required: true, foobar: true}); return testEqNormalizeFieldProps({required: {foobar: "123"}}, {required: true, foobar: "123"});}, nestedTypes: function() {testEqNormalizeFieldProps("arrays", {array: "number"}, {dataType: "array", fieldType: "array", array: {dataType: "number", fieldType: "number"}}); testEqNormalizeFieldProps("objects", {fields: {myCustomSubField: "string"}}, {dataType: "object", fieldType: "object", fields: {myCustomSubField: {dataType: "string", fieldType: "string"}}}); testEqNormalizeFieldProps("arrays of objects", {array: {fields: {myCustomSubField: "string"}}}, {dataType: "array", fieldType: "array", array: {dataType: "object", fieldType: "object", fields: {myCustomSubField: {dataType: "string", fieldType: "string"}}}}); return testEqNormalizeFieldProps("object with array field", {fields: {coordinates: {array: "number"}}}, {dataType: "object", fieldType: "object", fields: {coordinates: {dataType: "array", fieldType: "array", array: {dataType: "number", fieldType: "number"}}}});}, buildInValidators: function() {testEqNormalizeFieldPropsWithFunctionsIdentified({instanceof: Validator}, {instanceof: "function", validate: "function"}); testEqNormalizeFieldPropsWithFunctionsIdentified({minLength: 5}, {minLength: 5, postValidate: "function"}); testEqNormalizeFieldPropsWithFunctionsIdentified({maxLength: 5}, {maxLength: 5, postValidate: "function"}); return testEqNormalizeFieldPropsWithFunctionsIdentified({length: 5}, {length: 5, maxLength: 5, minLength: 5, postValidate: "function"});}, customFieldTypes: {basic: function() {test("mapped to another fieldType", () => assert.eq(normalizeFieldProps("myCustomField", {myCustomField: "string"}), merge(normalizeFieldProps("string"), {fieldType: "myCustomField"}))); test("mapped to an object definition", () => assert.eq(stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: {fields: {myCustomSubField: "string"}}})), {dataType: "object", fieldType: "myCustomField", fields: {myCustomSubField: {dataType: "string", fieldType: "string"}}})); return test("normalizeFields accepts custom fields", () => assert.eq(normalizeFields({foo: "myCustomField"}, {myCustomField: "string"}), {foo: merge(normalizeFieldProps("string"), {fieldType: "myCustomField"})}));}, recursiveTypesWithCustomFieldTypes: function() {test("object", () => assert.eq(stripFunctions(normalizeFieldProps({fields: {data: "record"}}, {record: {fields: {name: "string"}}})), {dataType: "object", fieldType: "object", fields: {data: {dataType: "object", fieldType: "record", fields: {name: {dataType: "string", fieldType: "string"}}}}})); return test("array", () => assert.eq(stripFunctions(normalizeFieldProps({array: "record"}, {record: {fields: {name: "string"}}})), {dataType: "array", fieldType: "array", array: {fieldType: "record", dataType: "object", fields: {name: {dataType: "string", fieldType: "string"}}}}));}, recursiveCustomFieldTypes: function() {test("a references b", () => assert.eq(stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: "myCustomField2", myCustomField2: "string"})), {fieldType: "myCustomField", dataType: "string"})); test("a references object with b", () => assert.eq(stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: {fields: {myFieldName: "myCustomField2"}}, myCustomField2: "string"})), {fieldType: "myCustomField", dataType: "object", fields: {myFieldName: {dataType: "string", fieldType: "myCustomField2"}}})); chainedTest("a references a not allowed", () => assert.rejects(() => stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: "myCustomField"}))).then((rejectsWith) => assert.match(rejectsWith.message, /recursive.*not supported/i))).thenTest("after a failed recursion check, we don't wrongly trigger it again", () => stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: {fields: {myFieldName: "string"}}}))); test("a references object a not allowed", () => assert.rejects(() => stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: {fields: {myFieldName: "myCustomField"}}}))).then((rejectsWith) => assert.match(rejectsWith.message, /recursive.*not supported/i))); return test("a references b refernces a not allowed", () => assert.rejects(() => stripFunctions(normalizeFieldProps("myCustomField", {myCustomField: {fields: {myFieldName: "myCustomField2"}}, myCustomField2: {fields: {myFieldName: "myCustomField"}}}))).then((rejectsWith) => assert.match(rejectsWith.message, /recursive.*not supported/i)));}}, regressions: {downstream_dependency_regressions: function() {return test("link: 'user'", () => assert.eq(stripFunctions(normalizeFieldProps({link: "user"})), {link: "user"}));}, array_and_lengths: function() {testEqNormalizeFieldProps("length-tests on the array itself", {array: "string", maxLength: 10}, {dataType: "array", fieldType: "array", array: {dataType: "string", fieldType: "string"}, maxLength: 10}); return testEqNormalizeFieldProps("length-tests on elements within the array", {array: ["string", {maxLength: 10}]}, {dataType: "array", fieldType: "array", array: {dataType: "string", fieldType: "string", maxLength: 10}});}}});});});
//# sourceMappingURL=normalizeFieldProps.test.js.map
