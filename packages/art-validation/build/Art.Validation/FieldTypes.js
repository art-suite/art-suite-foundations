"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["numberDataType", "booleanDataType", "stringDataType", "objectDataType", "arrayDataType", "anyDataType", "jsonDataType", "dateDataType", "toMilliseconds", "toDate", "functionDataType", "isString", "JSON", "Date", "isNaN", "isNumber", "isDate", "toSeconds", "emailRegexp", "lowerCase", "urlWithOptionalProtocolRegExp", "normalizeUrl", "validStatus", "DataTypes"], [global, require('art-standard-lib'), require('./DataTypes'), require('art-communication-status'), {DataTypes: require('./DataTypes')}], (numberDataType, booleanDataType, stringDataType, objectDataType, arrayDataType, anyDataType, jsonDataType, dateDataType, toMilliseconds, toDate, functionDataType, isString, JSON, Date, isNaN, isNumber, isDate, toSeconds, emailRegexp, lowerCase, urlWithOptionalProtocolRegExp, normalizeUrl, validStatus, DataTypes) => {let idRegEx, hexColorRegEx, isId, isHexColor, FieldTypes, numberFromString; idRegEx = /^[-_a-z0-9]{1,100}$/i; hexColorRegEx = /^#([a-f0-9]{3})|([a-f0-9]{6})/; isId = function(v) {return isString(v) && idRegEx.test(v);}; isHexColor = function(v) {return hexColorRegEx.test(`${Caf.toString(v)}`);}; FieldTypes = {count: {fromString: numberFromString = function(v) {return v - 0;}, dataType: numberDataType, default: 0}, boolean: {dataType: booleanDataType, fromString: function(v) {return !!/^ *t *$|true/i.test(v);}}, number: {dataType: numberDataType, fromString: numberFromString}, string: {dataType: stringDataType}, object: {dataType: objectDataType}, array: {dataType: arrayDataType}, any: {dataType: anyDataType}, json: {dataType: jsonDataType, fromString: function(v) {return JSON.parse(v);}}, integer: {dataType: numberDataType, preprocess: function(v) {return (v != null) ? v | 0 : undefined;}}, id: {required: true, validate: function(v) {return isId(v);}}, date: {fromString: function(v) {return Date.parse(v);}, validate: function(v) {return (v instanceof Date) ? !isNaN(v - 0) : isString(v);}, preprocess: function(v) {return isString(v) ? new Date(v) : v;}, dataType: dateDataType}, timestamp: {fromString: function(v) {return toMilliseconds(v);}, dataType: numberDataType, validate: function(v) {return isNumber(v) || isDate(v);}, preprocess: toMilliseconds, decode: toDate}, secondsTimestamp: {dataType: numberDataType, fromString: function(v) {return toSeconds(v);}, validate: function(v) {return isNumber(v) || isDate(v);}, preprocess: function(v) {return toSeconds(v) + .5 | 0;}, decode: toDate}, fractionalSecondsTimestamp: {dataType: numberDataType, fromString: function(v) {return toSeconds(v);}, validate: function(v) {return isNumber(v) || isDate(v);}, preprocess: function(v) {return toSeconds(v);}, decode: toDate}, color: {validate: function(v) {return isHexColor(v);}, preprocess: function(v) {return `${Caf.toString(v)}`;}}, email: {validate: function(v) {return isString(v) && v.trim().match(emailRegexp);}, preprocess: function(v) {return lowerCase(v.trim());}}, url: {validate: function(v) {return isString(v) && v.match(urlWithOptionalProtocolRegExp);}, preprocess: function(v) {return normalizeUrl(v);}}, communicationStatus: {validate: function(v) {return validStatus(v);}}, trimmedString: {validate: function(v) {return isString(v);}, preprocess: function(v) {v = v.trim(); return v.length > 0 && v;}, maxLength: 1024}, username: {minLength: 3, maxLength: 30, present: true, validate: function(v) {return isString(v) && /^\s*\w+\s*$/i.test(v);}, preprocess: function(v) {return lowerCase(v.trim());}}, function: {dataType: functionDataType}}; Caf.each2(FieldTypes, (v, k) => {let temp, temp1; v.fieldType = k; ((temp = v.dataType) != null ? temp : v.dataType = stringDataType); return ((temp1 = v.validate) != null ? temp1 : v.validate = DataTypes[v.dataType].validate);}); return FieldTypes;});});
//# sourceMappingURL=FieldTypes.js.map
