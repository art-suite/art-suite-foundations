"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["isArray", "compact", "isString", "JSON", "present", "isPlainObject", "objectKeyCount", "formattedInspect", "isFunction"], [global, require('art-standard-lib')], (isArray, compact, isString, JSON, present, isPlainObject, objectKeyCount, formattedInspect, isFunction) => {let getFieldLength; return {makeEmptyArraysIntoNulls: function(arr) {return (isArray(arr) && compact(arr).length === 0) ? null : arr;}, joinFieldPath: function(parentFieldPath, toJoin) {return !(isString(toJoin) && /^[_a-z][_a-z0-9]*$/i.test(toJoin)) ? `${Caf.toString(parentFieldPath)}[${Caf.toString(JSON.stringify(toJoin))}]` : present(parentFieldPath) ? `${Caf.toString(parentFieldPath)}.${Caf.toString(toJoin)}` : toJoin;}, getFieldLength: getFieldLength = function(value) {return isPlainObject(value) ? objectKeyCount(value) : Caf.exists(value) && value.length;}, standardInvalidMessage: function(fieldProps, value) {let fieldType, dataType, length, maxLength, minLength, fieldLength; fieldType = fieldProps.fieldType; dataType = fieldProps.dataType; length = fieldProps.length; maxLength = fieldProps.maxLength; minLength = fieldProps.minLength; return (length != null || minLength != null || maxLength != null) ? (fieldLength = getFieldLength(value), (() => {switch (false) {case !(length != null && fieldLength !== length): return `not length == ${Caf.toString(length)} (was ${Caf.toString(formattedInspect(fieldLength))})"`; case !(minLength != null && fieldLength < minLength): return `not length >= ${Caf.toString(minLength)} (was ${Caf.toString(formattedInspect(fieldLength))})"`; case !(maxLength != null && fieldLength > maxLength): return `not length <= ${Caf.toString(maxLength)} (was ${Caf.toString(formattedInspect(fieldLength))})"`;};})()) : present(fieldType) ? `not a valid ${Caf.toString(fieldType)}` : present(dataType) ? `invalid ${Caf.toString(dataType)} data` : (value != null) ? "invalid" : "missing";}, getDefaultValue: function(fieldName, fieldProps) {let defaultFunction; defaultFunction = fieldProps.defaultFunction; if (!defaultFunction && fieldProps.dataType !== "function" && isFunction(fieldProps.default)) {defaultFunction = fieldProps.default;}; return defaultFunction ? defaultFunction(fieldName, fieldProps) : fieldProps.default;}};});});
//# sourceMappingURL=Tools.js.map
