"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["merge", "Error"], [global, require('art-standard-lib')], (merge, Error) => {let normalizeInstanceofValidation, normalizeLengthValidation; return {normalizeInstanceofValidation: normalizeInstanceofValidation = function(fieldProps, validatorOptions) {let _instanceof, validate; return (_instanceof = fieldProps.instanceof) ? (({validate} = fieldProps), merge(fieldProps, {validate: (v) => v instanceof _instanceof && (!validate || validate(v))})) : fieldProps;}, normalizeLengthValidation: normalizeLengthValidation = function(fieldProps, validatorOptions) {let postValidate, maxLength, minLength; postValidate = fieldProps.postValidate; maxLength = fieldProps.maxLength; minLength = fieldProps.minLength; return (maxLength != null || minLength != null) ? merge(fieldProps, {maxLength, minLength, postValidate: (value, fieldName, fields) => (postValidate && !postValidate(value, fieldName, fields)) ? false : (value != null) ? (maxLength != null && value.length > maxLength) ? false : (minLength != null && value.length < minLength) ? false : true : true}) : fieldProps;}, preExpandStandardValidationProps: function(fieldProps, validatorOptions) {let length, maxLength, minLength, message; length = fieldProps.length; maxLength = fieldProps.maxLength; minLength = fieldProps.minLength; return (length != null) ? ((maxLength != null && maxLength !== length || minLength != null && minLength !== length) ? (message = "Invalid fieldProps: If specifying 'length', you can't also specify maxLength or minLength", validatorOptions.getNiceErrorMessage ? message = validatorOptions.getNiceErrorMessage(message, fieldProps) : undefined, (() => {throw new Error(message);})()) : undefined, merge(fieldProps, {length, minLength: length, maxLength: length})) : fieldProps;}, normalizeAllStandardValidations: function(fieldProps, validatorOptions) {return normalizeLengthValidation(normalizeInstanceofValidation(fieldProps, validatorOptions), validatorOptions);}};});});
//# sourceMappingURL=StandardValidations.js.map
