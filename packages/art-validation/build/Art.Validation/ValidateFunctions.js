"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["merge", "Error"], [global, require('art-standard-lib')], (merge, Error) => {let normalizeInstanceofValidation, normalizeLengthValidation; return {normalizeInstanceofValidation: normalizeInstanceofValidation = function(fieldProps) {let _instanceof, validate; return (_instanceof = fieldProps.instanceof) ? (({validate} = fieldProps), merge(fieldProps, {validate: (v) => v instanceof _instanceof && (!validate || validate(v))})) : fieldProps;}, normalizeLengthValidation: normalizeLengthValidation = function(fieldProps, validatorOptions) {let postValidate, maxLength, minLength, length; postValidate = fieldProps.postValidate; maxLength = fieldProps.maxLength; minLength = fieldProps.minLength; length = fieldProps.length; if (length != null) {if (maxLength != null || minLength != null) {throw new Error("If specifying 'length', you can't also specify maxLength nor minLength");}; maxLength = minLength = length;}; return (maxLength != null || minLength != null) ? merge(fieldProps, {maxLength, minLength, length, postValidate: (value, fieldName, fields) => (postValidate && !postValidate(value, fieldName, fields)) ? false : (value != null) ? (maxLength != null && value.length > maxLength) ? false : (minLength != null && value.length < minLength) ? false : true : true}) : fieldProps;}, normalizeAllStandardValidations: function(fieldProps) {return normalizeLengthValidation(normalizeInstanceofValidation(fieldProps));}};});});
//# sourceMappingURL=ValidateFunctions.js.map
