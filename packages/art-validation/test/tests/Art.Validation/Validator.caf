import &StandardImport
{normalizeFieldProps} = Validator

assertIsTrimmedString = (ft) ->
  assert.eq ft.dataType, "string"
  assert.isFunction ft.validate
  assert.isFunction ft.preprocess

suite:
  normalizeFieldProps:
    basic: ->
      assert.test.eq normalizeFieldProps, {required: true}, required: true
      assert.test.eq normalizeFieldProps, {dood: 'trimmedString'}, dood: 'trimmedString'
      assert.test.eq normalizeFieldProps, {required: ['trimmedString']}, required: ['trimmedString']

    depricated: ->
      test "requiredPresent: true", -> assert.throws -> normalizeFieldProps requiredPresent: true
      test "required: 'foo'", -> assert.throws -> normalizeFieldProps required: 'foo'
      test "present: 'foo'", -> assert.throws -> normalizeFieldProps present: 'foo'

    objectValues: ->
      assert.test.eq normalizeFieldProps, {required: foobar: true}, required: true, foobar: true
      assert.test.eq normalizeFieldProps, {foobar: required: true}, required: true, foobar: true

    topLevelArrayValues: ->
      assert.test.eq normalizeFieldProps, [w 'foobar'                   ], foobar: true
      assert.test.eq normalizeFieldProps, [w 'required foobar'          ], required: true, foobar: true
      assert.test.eq normalizeFieldProps, [w 'required foobar', fad: 123], required: true, foobar: true, fad: 123

    topLevelStringValues: ->
      assert.test.eq normalizeFieldProps, 'foobar', foobar: true
      assert.test.eq normalizeFieldProps, 'foo bar', foo: true, bar: true

      test "'trimmedString'", ->
        assertIsTrimmedString normalizeFieldProps 'trimmedString'

      test "'trimmedString foo bar'", ->
        ft = normalizeFieldProps 'trimmedString foo bar'
        assertIsTrimmedString ft
        assert.eq true, ft.foo
        assert.eq true, ft.bar

    specialFields: ->
      test "fieldType: 'trimmedString'", ->
        assertIsTrimmedString normalizeFieldProps fieldType: 'trimmedString'

      test "instanceof: Validator", ->
        ft = normalizeFieldProps instanceof: Validator
        assert.eq true, ft.validate new Validator
        assert.eq false, ft.validate {}

  new: ->
    test "new Validator", ->
      new Validator

  exclusive: ->
    test "exclusive only allows declared fields", ->
      v = new Validator {id: 'trimmedString'}, exclusive: true
      v.validate id: "hi"
      assert.throws -> v.validate id: "id", foo: "bar"
      assert.throws -> v.validateUpdate id: "id", foo: "bar"
      v.validate id: "id"
      v.validateUpdate id: "id"

    test "inclusive", ->
      v = new Validator id: 'trimmedString'
      v.validate id: "hi"
      v.validate id: "id", foo: "bar"
      v.validateUpdate id: "id", foo: "bar"

    test "true is sufficient for declaring expected fields", ->
      v = new Validator {id: true, foo: true}, exclusive: true
      v.validate id: "hi"
      v.validate id: "id", foo: "bar"
      v.validateUpdate id: "id", foo: "bar"

  trimmedString: ->
    test "id: 'trimmedString'", ->
      v = new Validator id: 'trimmedString'
      v.validate id: "ok"
      v.validate {}
      assert.throws -> v.validate id: 123

    test "required: 'trimmedString'", ->
      v = new Validator id: required: fieldType: 'trimmedString'
      v.validate id: "hi"
      assert.throws -> v.validate id: 123
      assert.throws -> v.validate()

    test "requiredPresent: 'trimmedString'", ->
      v = new Validator id: required: present: fieldType: 'trimmedString'
      assert.throws -> v.validate(id: 123), "with number"
      assert.throws -> v.validate(), "missing"
      assert.throws -> v.validate(id: ""), "id:''"
      assert.throws -> v.validate(id: "  "), "id:'  '"
      v.validate id: "hi"

  declarationTypes: ->
    test "fieldType: 'id'", ->
      v = new Validator
        id: fieldType: "id"

      assert.throws -> v.validate {}
      v.validateUpdate {}
      v.validate id: "123"
      assert.rejects -> v.validate(id: 123)
      .then ({info}) -> assert.eq info.errors, id: "invalid"

    test "validate: ->", ->
      v = new Validator
        id: validate: (v) -> isString v

      v.validate {}
      v.validateUpdate {}
      v.validate id: "123"
      assert.rejects -> v.validate id: 123
      .then ({info}) -> assert.eq info.errors, id: "invalid"

    test "preprocess: ->", ->
      v = new Validator
        id: preprocess: (v) -> "#{v}a"

      {id} = v.validateUpdate id: "123"
      assert.eq id, "123a"

      {id} = v.validateUpdate id: 456
      assert.eq id, "456a"


    test "present: true", ->
      v = new Validator
        id: present: true

      v.validate id: "123"
      assert.throws -> v.validate id: ""
      assert.throws -> v.validate id: null
      assert.throws -> v.validate id: undefined
      assert.throws -> v.validateUpdate id: ""
      assert.throws -> v.validateUpdate id: null
      assert.throws -> v.validateUpdate id: undefined

      v.validate id: false
      v.validate id: 123
      v.validateUpdate id: false
      v.validateUpdate id: 123

    test "required: true", ->
      v = new Validator
        id: required: true

      v.validate id: 123
      assert.rejects -> v.validate id: null
      .then ({info}) -> assert.eq info.errors, id: "missing"
      .then -> assert.rejects -> v.validate id: undefined
      .then ({info}) -> assert.eq info.errors, id: "missing"

    test "instanceof: Foo", ->
      class Foo
      class Bar extends Foo
      v = new Validator
        foo: instanceof: Foo

      Promise.resolve()
      v.validate foo: new Foo
      v.validate foo: new Bar
      v.validate foo: null
      assert.rejects -> v.validate foo: {}
      .then ({info}) -> assert.eq info.errors, foo: "invalid"

  defaults:
    preUpdate: ->
      test "default: undefined", ->
        v3 = new Validator count: fieldType: "number", default: 1
        assert.eq {},       v3.validateUpdate {}

    preCreate: ->

      test "default: 0", ->
        v1 = new Validator count: fieldType: "number", default: 0
        assert.eq
          count: 0
          v1.validate {}

      test "default: 1, validate {}", ->
        v2 = new Validator count: fieldType: "number", default: 1
        assert.eq
          count: 1
          v2.validate {}

      test "default: 1, validate()", ->
        v2 = new Validator count: fieldType: "number", default: 1
        assert.eq
          count: 1
          v2.validate()

      test "default: null", ->
        v3 = new Validator count: fieldType: "number", default: null
        assert.eq
          count: null
          v3.validate {}

      test "default: undefined", ->
        v3 = new Validator count: fieldType: "number", default: undefined
        assert.eq
          {}
          v3.validate {}

      test "default applied before preprocess", ->
        v1 = new Validator text: fieldType: "trimmedString", default: " hi "
        assert.eq
          text: "hi"
          v1.validate {}

  compoundTests:->
    test "require: validate: ->", ->
      v = new Validator
        foo: required: validate: (v) -> v.match /// ^email\:#{findEmailRegexp.source}$

      assert.throws -> v.validate id: 123
      assert.throws -> v.validate foo: "test@test.com"
      assert.throws -> v.validate foo: "email:me@test"
      assert.rejects -> v.validate foo: "email:me"
      .then ({info}) -> assert.eq info.errors, foo: "invalid"
      .then -> assert.rejects -> v.validateUpdate foo: "email:me"
      .then ({info, stack}) -> assert.eq info.errors, foo: "invalid"
      .then -> v.validateUpdate()

