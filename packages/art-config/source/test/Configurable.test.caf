import &StandardImport, &ArtMyLib

expectedPath = :Test :Art :Config

configPath = expectedPath.join "."
pathedConfig = [configPath]: foo: 1
expanededPathedConfig = Test: Art: Config: foo: 1
{defaultConfig} = TestConfigurable

describe
  ConfigurableApi: ->
    test "getDefaults", ->
      assert.eq TestConfigurable.getDefaults(), defaultConfig

    test "getPathedDefaultConfig", ->
      assert.eq TestConfigurable.getPathedDefaultConfig(), "#{configPath}": defaultConfig

  Configuring: ->
    test "TestConfigurable.getConfigurationPath", ->
      assert.eq TestConfigurable.getConfigurationPath(), expectedPath

    test "TestConfigurable.getConfigurationFromPath - not found", ->
      assert.eq undefined,
        TestConfigurable.getConfigurationFromPath
          Tests: foo: 1

    test "TestConfigurable.getConfigurationFromPath - found", ->
      assert.eq
        foo: 1
        TestConfigurable.getConfigurationFromPath expanededPathedConfig

    test "TestConfigurable.reset()", ->
      configBefore = TestConfigurable.config
      TestConfigurable.config.shouldBeDeleted = "bam!"
      TestConfigurable.reset()
      assert.eq TestConfigurable.config,
        name: "TestName"
        verbose: false

      # same object
      assert.equal configBefore, TestConfigurable.config

    test "configure", ->
      TestConfigurable.reset()

      configure artConfig: merge
        novelProp: "cool"
        pathedConfig

      assert.eq TestConfigurable.config,
        getArtConfig().Test.Art.Config

      assert.eq TestConfigurable.config,
        name: "TestName"
        foo: 1
        verbose: false

    test "event", ->
      # assert.isFunction TestConfigurable.on
      new Promise (resolve) ->
        TestConfigurable.on configured: ->
          resolve()

        TestConfigurable.reset()

        configure
          artConfigName: :test
          artConfig: merge
            novelProp: "cool"
            pathedConfig



    test "getConfigSave" ->
      TestConfigurable.reset()
      MyLibConfigurable.reset()

      configure artConfig: Test.Art.Config: foo: 1

      assert.eq
        TestConfigurable.getConfigSave()
        Test.Art.Config: foo: 1

    test "getArtConfigSave" ->
      TestConfigurable.reset()
      MyLibConfigurable.reset()

      configure artConfig: merge
        Test.Ignored:     whacha: :Harry
        Test.Art.Config:  foo: 1
        Test.Art.MyLib:
          name:     :MyLib  # same as default, won't be saved
          level:    2       # different, will be saved

      assert.eq
        getArtConfigSave()
        Test.Art.Config:  foo: 1
        Test.Art.MyLib:   level: 2
