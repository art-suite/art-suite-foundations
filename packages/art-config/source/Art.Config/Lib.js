// Generated by CoffeeScript 1.12.7
(function() {
  var Lib, Promise, clone, compactFlatten, deepMerge, defineModule, expandPathedProperties, formattedInspect, getEnv, inspect, isPlainObject, isString, jsonParsableRegexp, log, merge, mergeInto, parseQuery, pushIfNotPresent, ref, upperCamelCase;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, log = ref.log, Promise = ref.Promise, inspect = ref.inspect, formattedInspect = ref.formattedInspect, merge = ref.merge, deepMerge = ref.deepMerge, mergeInto = ref.mergeInto, parseQuery = ref.parseQuery, pushIfNotPresent = ref.pushIfNotPresent, isPlainObject = ref.isPlainObject, isString = ref.isString, upperCamelCase = ref.upperCamelCase, expandPathedProperties = ref.expandPathedProperties, clone = ref.clone, compactFlatten = ref.compactFlatten, getEnv = ref.getEnv;

  jsonParsableRegexp = /^(\[.*\]|\{.*\}|\".*\"|((-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|true|false|null))$/;

  defineModule(module, Lib = (function() {
    var smartJsonDecode;

    function Lib() {}

    Lib.smartJsonDecode = smartJsonDecode = function(value) {
      if (isString(value) && jsonParsableRegexp.test(value)) {
        return JSON.parse(value);
      } else {
        return value != null ? value : null;
      }
    };

    Lib.getExternalEnvironment = function(externalEnvironment) {
      var artConfig, artConfigName, e, k, m, v;
      if (externalEnvironment == null) {
        externalEnvironment = getEnv();
      }
      artConfig = externalEnvironment.artConfig, artConfigName = externalEnvironment.artConfigName;
      artConfig = (function() {
        if (isPlainObject(artConfig)) {
          return artConfig;
        } else if (isString(artConfig)) {
          try {
            return JSON.parse(artConfig);
          } catch (error) {
            e = error;
            log.error("\nInvalid 'artConfig' from externalEnvironment. Must be valid JSON.\n\n" + (formattedInspect({
              externalEnvironment: externalEnvironment
            })) + "\n\nartConfig: " + (formattedInspect(artConfig)) + "\n\nerror: " + e + "\n");
            return null;
          }
        } else {
          return {};
        }
      })();
      for (k in externalEnvironment) {
        v = externalEnvironment[k];
        if (m = k.match(/^artConfig([\._])(.+)$/)) {
          if (m[1] === "_") {
            artConfig[m[2].replace(/_/g, '.')] = smartJsonDecode(v);
          } else {
            artConfig[m[2]] = smartJsonDecode(v);
          }
        }
      }
      return {
        artConfig: artConfig,
        artConfigName: artConfigName
      };
    };


    /*
    normalized:
      map standard aliases (dev and prod)
      upperCamelCase
     */

    Lib.normalizeArtConfigName = function(artConfigName) {
      switch (artConfigName) {
        case "dev":
          return "Development";
        case "prod":
          return "Production";
        default:
          return artConfigName && upperCamelCase(artConfigName);
      }
    };

    return Lib;

  })());

}).call(this);
