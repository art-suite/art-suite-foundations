// Generated by CoffeeScript 1.12.7
(function() {
  var BaseObject, ConfigRegistry, Promise, clone, compactFlatten, deepMerge, defineModule, expandPathedProperties, formattedInspect, inspect, isPlainObject, isString, log, merge, mergeInto, parseQuery, pushIfNotPresent, ref, upperCamelCase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, log = ref.log, Promise = ref.Promise, inspect = ref.inspect, formattedInspect = ref.formattedInspect, merge = ref.merge, deepMerge = ref.deepMerge, mergeInto = ref.mergeInto, parseQuery = ref.parseQuery, pushIfNotPresent = ref.pushIfNotPresent, isPlainObject = ref.isPlainObject, isString = ref.isString, upperCamelCase = ref.upperCamelCase, expandPathedProperties = ref.expandPathedProperties, clone = ref.clone, compactFlatten = ref.compactFlatten;

  BaseObject = require('art-class-system').BaseObject;

  defineModule(module, ConfigRegistry = (function(superClass) {
    extend(ConfigRegistry, superClass);

    function ConfigRegistry() {
      return ConfigRegistry.__super__.constructor.apply(this, arguments);
    }

    ConfigRegistry.configurables = [];

    ConfigRegistry.configs = {};

    ConfigRegistry.registerConfig = function(name, config) {
      if (!isPlainObject(config)) {
        throw new Error("config must be a plain object");
      }
      return ConfigRegistry.configs[name] = config;
    };

    ConfigRegistry.registerConfigurable = function(configurable) {
      return pushIfNotPresent(ConfigRegistry.configurables, configurable);
    };

    ConfigRegistry.configure = function() {
      var args, ref1;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.error("DEPRICATED: use Art.Config.configure");
      return (ref1 = Neptune.Art.Config).configure.apply(ref1, args);
    };

    return ConfigRegistry;

  })(BaseObject));

}).call(this);
