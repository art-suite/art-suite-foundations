"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["StandardWebpackConfig", "compactFlatten", "objectWithout", "objectKeyCount", "merge", "isRegExp", "isFunction", "isPlainObject", "Error", "String", "Promise"], [global, require('../StandardImport'), require('../Data')], (StandardWebpackConfig, compactFlatten, objectWithout, objectKeyCount, merge, isRegExp, isFunction, isPlainObject, Error, String, Promise) => {let webpackMerge, nodeExternals, Configurator, ConfigureWebpack; webpackMerge = function(...args) {return require("webpack-merge").merge(...args);}; nodeExternals = null; Configurator = require('./namespace'); return ConfigureWebpack = Caf.defClass(class ConfigureWebpack extends require('./ConfigureBase') {}, function(ConfigureWebpack, classSuper, instanceSuper) {this.outFileName = "webpack.config.js"; this.get = (npmRoot, abcConfig, webpackConfigOptions) => {let env, devServer, argv, config, common, targets, targetNode, standard, baseConfig, entriesWithNoOverrides, temp, base; abcConfig != null ? abcConfig : abcConfig = {}; if (Caf.exists(webpackConfigOptions)) {env = webpackConfigOptions.env; if (Caf.exists(env)) {devServer = env.devServer;}; argv = webpackConfigOptions.argv;}; temp = config = abcConfig.webpack || (abcConfig.webpack = {}); common = temp.common; targets = temp.targets; targetNode = !devServer && !!(Caf.exists(base = abcConfig.target) && base.node); standard = StandardWebpackConfig.get(npmRoot, abcConfig, targetNode); baseConfig = webpackMerge(standard, common != null ? common : {}); targets || (targets = {index: {}}); entriesWithNoOverrides = null; return compactFlatten(Caf.array(this.normalizeTargets(targets), (targetConfig) => {let includeNpms, keys, webpackEntry; ({includeNpms} = targetConfig); if (includeNpms) {targetConfig = objectWithout(targetConfig, "includeNpms");}; return (!entriesWithNoOverrides || (keys = 1 < objectKeyCount(targetConfig))) ? (webpackEntry = webpackMerge(baseConfig, targetConfig), targetNode ? webpackEntry.target || (webpackEntry.target = "node") : undefined, config = this.normalizeTargetConfig(webpackEntry, includeNpms), !keys ? entriesWithNoOverrides = config : undefined, config) : (entriesWithNoOverrides.entry = merge(entriesWithNoOverrides.entry, targetConfig.entry), null);}));}; this.getTargets = function() {}; this.normalizeTargetConfig = function(targetConfig, includeNpms) {return (targetConfig.target === "node") ? webpackMerge({output: {libraryTarget: "commonjs2", pathinfo: true}, externals: [nodeExternals || (nodeExternals = (context, request, callback) => {let shouldInclude; return request.match(/^[^.]/) ? (shouldInclude = includeNpms ? (() => {switch (false) {case !isRegExp(includeNpms): return includeNpms.test(request); case !isFunction(includeNpms): return includeNpms(request);};})() : undefined, shouldInclude ? callback() : callback(null, `root require('${Caf.toString(request)}' /* ABC - not inlining fellow NPM */)`)) : callback();})]}, targetConfig) : webpackMerge({output: {pathinfo: true}}, targetConfig);}; this.normalizeTargets = function(targets = {}) {let from, into, temp; if (!isPlainObject(targets)) {throw new Error("targets must be an object");}; return (from = targets, into = {}, (from != null) ? (() => {for (let k in from) {let targetConfig, targetName, entry; targetConfig = from[k]; targetName = k; temp = targetConfig ? into[k] = ((Caf.is(entry = targetConfig.entry, String)) ? targetConfig = objectWithout(targetConfig, "entry") : undefined, webpackMerge({entry: {[targetName]: entry != null ? entry : `./${Caf.toString(targetName)}`}}, targetConfig)) : undefined;}; return temp;})() : undefined, into);}; this.getFileContents = function() {return Promise.then(() => StandardWebpackConfig.js);};});});});
//# sourceMappingURL=ConfigureWebpack.js.map
