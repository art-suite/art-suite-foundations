import &StandardImport, &Configurators

class Main

  @realRequire:             eval 'require'

  @configFilename:          :art.build.config.caf
  @configBasename:          :art.build.config
  @registerLoadersFilename: :register.js

  @log: (args...) =>
    log args... unless @quiet


  @go: (npmRoot, options) =>
    options extract pretend, configure, init, force, quiet

    @quiet ?= quiet

    @log "PRETEND".green if pretend

    Promise.then ->
      @init init, npmRoot, options if init

    .then -> unless pretend && init
      @runNeptuneNamespaces npmRoot

    .then -> unless pretend && init
      @loadAndWriteConfig npmRoot, options

    .catch (error) -> log.error error

  @registerLoaders: (npmRoot, vivify = false) =>
    file = path.join npmRoot, @registerLoadersFilename
    fs.exists file
    .then (exists) ->
      if exists
        Main.realRequire file
      else
        if vivify
          @init :core, npmRoot, verbose: true, select: /register.js/
          Main.realRequire file
        {}

  @loadConfig: (npmRoot, vivifyConfigFile = false)=>
    @registerLoaders npmRoot, vivifyConfigFile
    .then =>
      configFilepath = path.join process.cwd(), @configBasename
      &GlobPromise configFilepath + "*"
      .then (results) =>
        if results.length > 0
          Main.realRequire configFilepath
        else
          if vivifyConfigFile
            @init :core, npmRoot, verbose: true, select: /art.build.config/
          {}

      .then (config) =>
        config.npm ||= config.package
        p = if config.npm
          Promise.resolve config.npm
        else
          fs.exists packageFile = path.join npmRoot, ConfigurePackageJson.outFileName
          .then (exists) =>
            if exists
              Main.realRequire packageFile
            else
              {}
        p.then (finalNpm) =>
          merge config, npm: finalNpm

  @init: (recipeName, npmRoot, options) ->
    options extract pretend, verbose
    if pretend && !verbose
      options = merge options, verbose: true

    recipeName = null if recipeName == true
    recipeName = upperCamelCase recipeName ? :core

    if recipeName == :Help
      log
        """
          Please select a valid recipe name:

            #{&Recipes.getModuleNames().join '\n  '}

          Ex: abc -i node

      Promise.reject "exiting"

    else
      @log "\n#{if pretend then :PRETEND-}INIT-#{recipeName}: #{npmRoot}"
      unless recipe = &Recipes[recipeName]
        Promise.reject
          ""
            Please provide a valid recipe name.
            `#{recipeName}` not found in. Valid recipes: #{&Recipes.getModuleNames().join ', '}.

      else
        recipe.writeFiles npmRoot, options

        @log "#{if pretend then :PRETEND-}INIT-#{recipeName}: done"

  @pretendWriteConfig: (npmRoot, abcConfig) ->
    @log formattedInspect
      merge {}
        abcConfig
        npm:
          out: "package.json": ConfigurePackageJson.get npmRoot, abcConfig

        indexHtml: if abcConfig.indexHtml
          """
            <html>
            </html>

        webpack:
          configGeneratedOnDemand:  ConfigureWebpack.get npmRoot, abcConfig
          out: "webpack.config.js": ConfigureWebpack.standardWebpackConfigJs

      {} color: true

  @runNeptuneNamespaces: (npmRoot, options) ->
    [executable, firstArg] = process.argv
    isWebpackDevServer = !!(executable.match(/\/node$/) && firstArg?.match /webpack-dev-server/)
    @log "" \nNeptuneNamespaces: #{npmRoot}
    &RunNeptuneNamespaces npmRoot, isWebpackDevServer

  @loadAndWriteConfig: (npmRoot, options) ->
    {pretend, configure, init} = options
    @log "" \nCONFIGURE: #{npmRoot}

    @loadConfig npmRoot, configure
    .then (abcConfig) =>
      if pretend
        @pretendWriteConfig npmRoot, abcConfig
      else
        @writeConfig npmRoot, abcConfig

  @writeConfig: (npmRoot, abcConfig) ->
    ConfigurePackageJson.writeConfig npmRoot, abcConfig
    ConfigureWebpack.writeConfig npmRoot, abcConfig

  # called by webpack to get config
  @getWebpackConfig: (npmRoot, env, argv) =>

    @loadConfig npmRoot
    .then (abcConfig) =>
      @writeConfig npmRoot, abcConfig
      @runNeptuneNamespaces npmRoot
      .then ->
        ConfigureWebpack.get npmRoot, abcConfig, {} env, argv

  # DEPRICATED
  @updateFile: (fileName, contents) ->
    if fs.existsSync fileName
      oldContents = fs.readFileSync(fileName).toString()

    if oldContents != contents
      @log "writing: ".gray + fileName.green
      fs.writeFileSync fileName, contents
    else
      @log "same:    #{fileName}".gray

