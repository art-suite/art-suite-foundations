"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["lowerCamelCase", "test", "assert", "Promise"], [global, require('../StandardImport')], (lowerCamelCase, test, assert, Promise) => {let supportedStatuses; return Caf.each2(supportedStatuses = ["missing", "clientFailure", "clientFailureNotAuthorized"], (status) => {let assertName; assertName = lowerCamelCase(`is ${Caf.toString(status)}`); test(`${Caf.toString(assertName)} succeeds for: '${Caf.toString(status)}'`, function() {return assert[assertName](status);}); test(`${Caf.toString(assertName)} succeeds for: {status: '${Caf.toString(status)}'}`, function() {return assert[assertName]({status});}); test(`${Caf.toString(assertName)} succeeds for: Promise.reject {status: '${Caf.toString(status)}'}`, function() {return assert[assertName](Promise.reject({status}));}); test(`${Caf.toString(assertName)} fails for: Promise.reject '${Caf.toString(status)}'`, function() {return assert.rejects(() => assert[assertName](Promise.reject(status)));}); test(`${Caf.toString(assertName)} fails for: Promise.resolve {status: '${Caf.toString(status)}'}`, function() {return assert.rejects(() => assert[assertName](Promise.resolve({status})));}); test(`${Caf.toString(assertName)} fails for: -> {status: '${Caf.toString(status)}'}`, function() {return assert.rejects(() => assert[assertName](() => {return {status};}));}); return Caf.each2(supportedStatuses, (s2) => test(`${Caf.toString(assertName)} fails for: '${Caf.toString(s2)}'`, function() {return assert.rejects(() => assert[assertName](s2));}), (s2) => s2 !== status);});});});
//# sourceMappingURL=CommunicationStatusAsserts.test.js.map
