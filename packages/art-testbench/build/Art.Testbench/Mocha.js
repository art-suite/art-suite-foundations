"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["document", "mocha", "isFunction", "Error", "merge", "isNode", "configure", "log", "Promise", "NestedSuites"], [global, require('art-standard-lib'), require('art-config'), require('./NestedSuites')], (document, mocha, isFunction, Error, merge, isNode, configure, log, Promise, NestedSuites) => {let DomConsole, Mocha; if (global.document) {if (!document.getElementById("mocha")) {document.write('<div id=\"mocha\"></div>');}; require("mocha/mocha.css"); require("!script-loader!mocha/mocha.js"); DomConsole = require("@art-suite/art-foundation/dev_tools/dom_console"); mocha.setup({reporter: require("./MochaBrowserReporter")});}; return Mocha = Caf.defClass(class Mocha extends Object {}, function(Mocha, classSuper, instanceSuper) {this.setup = function(...args) {return global.setup(...args);}; this.initTesting = (options) => this.init(options); this.init = function(options) {let defineTests, synchronous, error, base; ({defineTests, synchronous} = options); if (!isFunction(defineTests)) {throw new Error("defineTests required");}; Caf.exists(base = global.mocha) && base.setup({timeout: 10000}); options = merge({artConfigName: "Test"}, options); this.defineGlobals(); Caf.exists(DomConsole) && DomConsole.enable(); return (synchronous || isNode) ? (() => {try {configure(options); return this._runSync(defineTests);} catch (error1) {error = error1; return log.error({"Art.Foundation.Mocha": {error}});};})() : Promise.resolve(configure(options)).then(() => this._run(options.defineTests));}; this.defineGlobals = function() {return global.testAssetRoot = "/test/assets";}; this._run = (defineAllTests) => (new NestedSuites).groupTestSuites(defineAllTests).then(() => Caf.exists(mocha) && mocha.run()); this._runSync = (defineAllTests) => {(new NestedSuites).groupTestSuitesSync(defineAllTests); return Caf.exists(mocha) && mocha.run();};});});});
//# sourceMappingURL=Mocha.js.map
