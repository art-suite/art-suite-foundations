// Generated by CoffeeScript 1.12.7
(function() {
  var DomConsole, Mocha, NestedSuites, Promise, configure, isArray, isFunction, isNode, isPlainObject, isPromise, log, merge, ref,
    slice = [].slice;

  ref = require('art-standard-lib'), isArray = ref.isArray, isNode = ref.isNode, log = ref.log, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, merge = ref.merge, Promise = ref.Promise, isPromise = ref.isPromise;

  configure = require('art-config').configure;

  NestedSuites = require("./NestedSuites");

  if (global.document) {
    if (!document.getElementById("mocha")) {
      document.write("<div id=\"mocha\"></div>");
    }
    require("mocha/mocha.css");
    require("!script-loader!mocha/mocha.js");
    DomConsole = require('@art-suite/art-foundation/dev_tools/dom_console');
    mocha.setup({
      reporter: require('./MochaBrowserReporter')
    });
  }

  module.exports = Mocha = (function() {
    function Mocha() {}

    Mocha.setup = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return global.setup.apply(global, args);
    };

    Mocha.initTesting = function(options) {
      return Mocha.init(options);
    };

    Mocha.init = function(options) {
      var defineTests, error, ref1, synchronous;
      defineTests = options.defineTests, synchronous = options.synchronous;
      if (!isFunction(defineTests)) {
        throw new Error("defineTests required");
      }
      if ((ref1 = global.mocha) != null) {
        ref1.setup({
          timeout: 10000
        });
      }
      options = merge({
        artConfigName: "Test"
      }, options);
      this.defineGlobals();
      if (DomConsole != null) {
        DomConsole.enable();
      }
      if (synchronous || isNode) {
        try {
          configure(options);
          return this._runSync(defineTests);
        } catch (error1) {
          error = error1;
          return log.error({
            "Art.Foundation.Mocha": {
              error: error
            }
          });
        }
      } else {
        return Promise.resolve(configure(options)).then((function(_this) {
          return function() {
            return _this._run(options.defineTests);
          };
        })(this));
      }
    };

    Mocha.defineGlobals = function() {
      return global.testAssetRoot = "/test/assets";
    };

    Mocha._run = function(defineAllTests) {
      return (new NestedSuites).groupTestSuites(defineAllTests).then(function() {
        return typeof mocha !== "undefined" && mocha !== null ? mocha.run() : void 0;
      });
    };

    Mocha._runSync = function(defineAllTests) {
      (new NestedSuites).groupTestSuitesSync(defineAllTests);
      return typeof mocha !== "undefined" && mocha !== null ? mocha.run() : void 0;
    };

    return Mocha;

  })();

}).call(this);

//# sourceMappingURL=Mocha.js.map
