// Generated by CoffeeScript 1.12.7
(function() {
  var Chai, Promise, StandardLib, Types, addTester, array, assert, compact, compactFlatten, compactFlattenJoin, each, eq, escapeRegExp, failWithExpectedMessage, failWithExpectedMessageBase, floatEq, format, formattedInspect, indent, inspect, inspectLean, inspectedObjectLiteral, isFunction, isPlainArray, isPlainObject, isString, log, lowerCamelCase, object, objectHasKeys, present, ref, ref1, w;

  assert = (Chai = require('chai')).assert;

  ref = StandardLib = require('art-standard-lib'), log = ref.log, eq = ref.eq, inspect = ref.inspect, formattedInspect = ref.formattedInspect, floatEq = ref.floatEq, compactFlatten = ref.compactFlatten, escapeRegExp = ref.escapeRegExp, isString = ref.isString, compact = ref.compact, Types = ref.Types, object = ref.object, inspectedObjectLiteral = ref.inspectedObjectLiteral, compactFlattenJoin = ref.compactFlattenJoin, isFunction = ref.isFunction, inspectLean = ref.inspectLean, isPlainArray = ref.isPlainArray, Promise = ref.Promise, present = ref.present, objectHasKeys = ref.objectHasKeys, isPlainObject = ref.isPlainObject, lowerCamelCase = ref.lowerCamelCase, array = ref.array, each = ref.each, w = ref.w;

  ref1 = require('./Presentation'), failWithExpectedMessage = ref1.failWithExpectedMessage, failWithExpectedMessageBase = ref1.failWithExpectedMessageBase, format = ref1.format, indent = ref1.indent;

  addTester = require('./ArtChaiLib').addTester;

  assert = (module.exports = Chai).assert;

  addTester("selectedPropsEq", {
    customFailure: function(name, expectedProps, testObject, context) {
      return failWithExpectedMessageBase(context, expectedProps, testObject, [
        indent(format(expectedProps)), "to equal selected props:", indent(format(object(expectedProps, function(v, k) {
          return testObject[k];
        }))), "test object:", indent(format(testObject))
      ]);
    }
  }, function(expectedProps, testObject) {
    var failures, k, v, v2;
    failures = null;
    for (k in expectedProps) {
      v = expectedProps[k];
      if (!eq(v, v2 = testObject[k])) {
        (failures || (failures = {}))[k] = {
          expected: v,
          actual: v2
        };
      }
    }
    if (failures) {
      log.warn({
        "assert.selectedPropsEq failureInfo": {
          failures: failures,
          expectedProps: expectedProps,
          actualProps: object(expectedProps, function(v, k) {
            return testObject[k];
          })
        }
      });
      return false;
    }
    return true;
  });

  assert.selectedEq = assert.selectedPropsEq;

}).call(this);

//# sourceMappingURL=ArtChai-old.js.map
