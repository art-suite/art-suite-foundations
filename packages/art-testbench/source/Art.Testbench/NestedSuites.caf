import &StandardImport

assertLib = &@art-suite/assert
global extract mocha, suite

defineSuitesByObjectStructure = (obj, namespacePath) ->
  each v, k from obj
    if isFunction v
      suite "#{namespacePath}.#{k}", v

    else if isPlainObject v
      defineSuitesByObjectStructure v, "#{namespacePath}.#{k}"

###
  IN: rootNamespace
  EFFECT:
    Traverses all of rootNamespace looking for modules with a 'suite' function.
    When found, creates a suite with the namespacePath of that module and evalutest
    the module's suite function in that suite.
defineSuitesByNamespaces = (namespace, rootNamespacePath) ->
  if isArray namespace
    each n in namespace
      defineSuitesByNamespaces n, rootNamespacePath

  else
    {namespacePath, namespaces, modules} = namespace
    rootNamespacePath ?= namespacePath + "."
    relativeNamespacePath = peek namespacePath.split rootNamespacePath

    each ns, nsName from namespaces
      defineSuitesByNamespaces ns, rootNamespacePath

    each mod, modName from modules when mod
      if isFunction mod.suite
        suite "#{relativeNamespacePath}.#{modName}", mod.suite

      else if isPlainObject mod.suite
        defineSuitesByObjectStructure mod.suite, "#{relativeNamespacePath}.#{modName}"

###
  Use mocha as normal, but if you added dots (.) in your suite names, this will
  break them out into nested test suites and group suites with the same path together.
  It also alphabetizes them.

  Ex:

    suite "Art.Foundation.Async", asyncTests
    suite "Art.Foundation.Binary", binaryTests
    suite "Art.Atomic", atomicTests

  Becomes:

    suite "Art", ->
      suite "Atomic", atomicTests
      suite "Foundation", ->
        suite "Async", asyncTests
        suite "Binary", binaryTests

class NestedSuites
  constructor: ->
    @suites = {}
    @suiteFunctions = {}

  addSuite: (name, f) ->
    (@suiteFunctions[name] ||= []).push f

    splitName = name.split '.'
    suiteMap = @suites
    each suitePart in splitName
      suiteMap = (suiteMap[suitePart] ||= {})

  _createMochaSuites: (suites = @suites, suitePath = null)->
    each suitePart in Object.keys suites
      subSuites = suites[suitePart]
      path = if suitePath then suitePath + "." + suitePart else suitePart

      self = @
      suite suitePart, ->
        self._createMochaSuites subSuites, path
        if functions = self.suiteFunctions[path]
          each f in functions
            f.call @

  groupTestSuites: (defineAllTests) ->
    oldSuite = global.suite
    global.suite = (name, f) ->
      @addSuite name, f

    Promise.resolve defineAllTests assertLib
    .then defineSuitesByNamespaces
    .then ->
      global.suite = oldSuite
      mocha?.setup :tdd

      @_createMochaSuites()

  groupTestSuitesSync: (defineAllTests) ->
    oldSuite = global.suite
    global.suite = (name, f) ->
      @addSuite name, f

    defineSuitesByNamespaces defineAllTests assertLib
    global.suite = oldSuite
    mocha?.setup :tdd

    @_createMochaSuites()

