// Generated by CoffeeScript 1.12.7
(function() {
  var BaseClass, Promise, TestSuite, defineModule, log, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), Promise = ref.Promise, defineModule = ref.defineModule, log = ref.log;

  BaseClass = require('art-class-system').BaseClass;

  module.exports = TestSuite = (function(superClass) {
    extend(TestSuite, superClass);

    function TestSuite() {
      return TestSuite.__super__.constructor.apply(this, arguments);
    }

    TestSuite.abstractClass();

    TestSuite.postCreate = function() {
      suite(this.getName(), (function(_this) {
        return function() {
          var i, key, len, ref1, results;
          ref1 = Object.keys(_this);
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            key = ref1[i];
            if (/^(test|setup)/.test(key)) {
              results.push((function(key) {
                var tester, wrappedTester;
                tester = _this[key];
                wrappedTester = _this[key] = function() {
                  var name;
                  return _this[name = "_" + key] || (_this[name] = true ? Promise.then(function() {
                    return tester();
                  }).tap(function() {
                    return log("pass: " + (_this.getName()) + "." + key);
                  })["catch"](function(e) {
                    log("fail: " + (_this.getName()) + "." + key);
                    throw e;
                  }) : void 0);
                };
                return test(key, function() {
                  return wrappedTester();
                });
              })(key));
            }
          }
          return results;
        };
      })(this));
      return "do not use";
    };

    return TestSuite;

  })(BaseClass);

}).call(this);
