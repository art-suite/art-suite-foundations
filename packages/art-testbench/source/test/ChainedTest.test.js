"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["chainedTest", "assert"], [global, require('./StandardImport')], (chainedTest, assert) => {let testsActuallyRan, ran; testsActuallyRan = []; ran = function(key) {return testsActuallyRan.push(key);}; chainedTest(function() {return 123;}).tapTest("tapTest", function() {return 3;}).thenTest("thenTest", function(val) {return assert.eq(val, 123);}); return chainedTest("start", function() {return "setupValue";}).thenTest("initial values passed to thenTest", function(...args) {assert.eq(args, ["setupValue", "setupValue"]); return "newValue";}).thenTest("newValue is passed to second thenTest; setupValue still in second arg", function(...args) {assert.eq(args, ["newValue", "setupValue"]); return 123;}).tapTest(["tapTest_passes_through_passed_in_value--part_one", function(val) {ran("tapTest-1"); assert.eq(val, 123); return 1;}], ["tapTest_passes_through_passed_in_value--part_two", function(val) {ran("tapTest-2"); assert.eq(val, 123); return 2;}]).softTapTest(["softTapTest_is_a_skippable_tapTest--part_one", function(val) {ran("softTapTest-1"); assert.eq(val, 123); return 1;}], ["softTapTest_is_a_skippable_tapTest--part_two", function(val) {ran("softTapTest-2"); assert.eq(val, 123); return 2;}]).thenTest(["thenTest_should_still_be_123", function(val) {assert.eq(val, 123); return 456;}], ["thenTest_should_now_be_456", function(val) {return assert.eq(val, 456);}], ["second_param_should_still_hold_setups_value", function(_, b) {return assert.eq(b, "setupValue");}]);});});
//# sourceMappingURL=ChainedTest.test.js.map
