"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "assert", "Promise"], [global, require('../StandardImport')], (test, assert, Promise) => {let Foo; Foo = Caf.defClass(class Foo extends Object {constructor() {super(...arguments); this.foo = 123;};}); test("assert.hasKeys", function() {assert.hasKeys({hi: 1}); assert.hasKeys({0: 0}); assert.hasKeys({"": ""}); return Promise.all([assert.rejects(() => assert.hasKeys({})), assert.rejects(() => assert.hasKeys(null)), assert.rejects(() => assert.hasKeys(undefined)), assert.rejects(() => assert.hasKeys(0)), assert.rejects(() => assert.hasKeys("")), assert.rejects(() => assert.hasKeys(["hi", 1])), assert.rejects(() => assert.hasKeys(new Foo))]);}); return test("assert.hasNoKeys", function() {assert.hasNoKeys({}); return Promise.all([assert.rejects(() => assert.hasNoKeys({hi: 1})), assert.rejects(() => assert.hasNoKeys({0: 0})), assert.rejects(() => assert.hasNoKeys({"": ""})), assert.rejects(() => assert.hasNoKeys(null)), assert.rejects(() => assert.hasNoKeys(undefined)), assert.rejects(() => assert.hasNoKeys(0)), assert.rejects(() => assert.hasNoKeys("")), assert.rejects(() => assert.hasNoKeys(["hi", 1])), assert.rejects(() => assert.hasNoKeys(new Foo))]);});});});
//# sourceMappingURL=assert.hasKeys.test.js.map
