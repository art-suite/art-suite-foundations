import &StandardImport

suite:
  fromObjects: ->
    test "no function, empty _object", ->
      b = _object a = {}
      assert.eq a, b
      assert.notSame a, b

    test "no function, non-empty _object", ->
      b = _object a = {a: 1, b: 2}
      assert.eq a, b
      assert.notSame a, b

    testComprehension {a:2 b:4 c:6 d:8} _object, {a:1 b:2 c:3 d:4}  x2
    testComprehension {a:2 b:4 c:6 d:8} _object, {a:1 b:2 c:3 d:4}  with: x2
    testComprehension {a:2 b:4 c:6 d:8} _object, {a:1 b:2 c:3 d:4}  map:  x2
    testComprehension {b:2 d:4}         _object, {a:1 b:2 c:3 d:4}  when: even
    testComprehension {a::a1 b::b2}     _object, {a:1 b:2}          (v, k) -> k + v

    test "when", ->
      assert.eq {b: 2, d: 4}, _object {a: 1, b: 2, c: 3, d: 4}, when: (v) -> v % 2 == 0

    test "key", ->
      assert.eq
        101: 1
        202: 2
        303: 3
        404: 4
        _object {a: 1, b: 2, c: 3, d: 4},
          key: (v) -> v * 101

  fromArrays: ->
    test "0-arg function: -> true", ->
      assert.eq {a: true, b: true}, _object ["a", "b"], -> true

    test "1-arg function: (v) -> v + v", ->
      assert.eq {a: "aa", b: "bb"}, _object ["a", "b"], (v) -> v+v

    test "2-arg function: (v, k) -> map[k+v] = v", ->
      assert.eq {a: "0a", b: "1b"}, _object ["a", "b"], (v, k) -> k+v
