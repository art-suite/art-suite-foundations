import &StandardImport

suite:
  basic: ->
    test "objects", ->
      values = 0
      keys = ""
      _each {a: 1, b: 2}, (v, k) -> values += v; keys += k
      assert.eq values, 3
      assert.eq keys, "ab"

    test "arrays", ->
      keys = values = 0
      _each [3, 4], (v, k) -> values += v; keys += k
      assert.eq values, 7
      assert.eq keys, 1

  empty: ->
    test "_array null", ->
      assert.eq [], _array null, (v, k) ->

    test "_each null", ->
      count = 0
      _each null, (v, k) -> count++
      assert.eq 0, count

  when: ->
    test "objects", ->
      values = 0
      _each {a: 1, b: 2, c: 3, d: 4},
        when: (v, k) -> v % 2 == 0
        with: (v) -> values += v
      assert.eq values, 6

    test "arrays", ->
      values = 0
      _each [1,2,3,4],
        when: (v, k) -> v % 2 == 0
        with: (v) -> values += v
      assert.eq values, 6

    test "when return value", ->
      out = []
      _each [{a:"foo"},{},{a:"bar"},{}],
        when: ({a}) -> a
        with: (v, k, o, whenResult) ->
          out.push whenResult

      assert.eq out, ["foo", "bar"]
