colors = require "colors"
glob = require "glob"
fsp = require "fs-promise"
{upperCamelCase, peek, pushIfUnique, indent, pad, log, withoutTrailingSlash} = require "./tools"
{max} = Math

[nodePath, neptineicPath, targetPath] = process.argv
log
  nodePath: nodePath
  neptineicPath: neptineicPath
  targetPath: targetPath

unless targetPath
  log "usage: #{neptineicPath} target_path"
  return

class Generator
  @generatedByString: "# generated by Neptune Instant Coffee"

  constructor: (@root) ->
    # map from directory paths to list of coffee files in that directory
    @directoriesWithCoffee = {}
    @generatedFileNames = ["index.coffee", "namespace.coffee"]

  addCoffeeFile: (fileWithPath) ->
    fileWithPathArray = fileWithPath.split "/"
    @addCoffeeFileBrokenOut(
      fileWithPathArray.slice 0, fileWithPathArray.length - 1
      peek fileWithPathArray
    )

  addCoffeeFileBrokenOut: (pathArray, file, subdir) ->

    path = pathArray.join '/'

    if pathArray.length > 1 && @root != path
      parentPathArray = pathArray.slice 0, pathArray.length - 1
      @addCoffeeFileBrokenOut parentPathArray, null, peek pathArray

    @directoriesWithCoffee[path] ||= files:[], subdirs:[]
    # pushIfUnique @directoriesWithCoffee[path].files, "index.coffee"
    pushIfUnique @directoriesWithCoffee[path].files, file if file
    pushIfUnique @directoriesWithCoffee[path].subdirs, subdir if subdir

  prettyPrint: (path = @root, indent = "") ->
    unless pathInfo = @directoriesWithCoffee[path]
      console.log "path not found: #{path}".red
      return
    log (indent + peek path.split '/').yellow
    indent += "  "
    for subdir in pathInfo.subdirs
      @prettyPrint path + "/" + subdir, indent
    for file in pathInfo.files
      log indent + file

  generateFiles: ->
    log "generateFiles"
    for path, pathInfo of @directoriesWithCoffee
      log "\ngenerate: #{path.yellow}/namespace.coffee"
      log indent @generateNamespace(path, pathInfo).green
      log "\ngenerate: #{path.yellow}/index.coffee"
      log indent @generateIndex(path, pathInfo).green

  getNameSpaceNamesFromPath: (path) ->
    [..., parentNameSpaceName, nameSpaceName] = path.split('/')
    nameSpaceName = upperCamelCase nameSpaceName
    parentNameSpaceName = null if path == @root
    if parentNameSpaceName
      parentNameSpaceName = upperCamelCase parentNameSpaceName
      requireParentNameSpace = "#{parentNameSpaceName} = require '../namespace.coffee'"
      parentNameSpaceName += "."

    parentNameSpaceName: (parentNameSpaceName && upperCamelCase parentNameSpaceName) || "self.Neptune."
    nameSpaceName: nameSpaceName && upperCamelCase nameSpaceName
    requireParentNameSpace: requireParentNameSpace || "(self.Neptune ||= {})"
    requireNameSpace: "#{nameSpaceName} = require './namespace.coffee'"


  generateIndex: (path, {files, subdirs}) ->
    upperCamelCaseNames = []
    {parentNameSpaceName, nameSpaceName, requireNameSpace} = @getNameSpaceNamesFromPath path

    requireFiles = {}
    requireFilesOrder = [nameSpaceName]
    requireFiles[nameSpaceName] = 'namespace.coffee'

    for file in files
      requireFiles[name = nameSpaceName + "." + upperCamelCase file.match(/^(.*)\.coffee$/)[1]] =  file
      requireFilesOrder.push name
    for subdir in subdirs
      requireFiles[name = nameSpaceName + "." + upperCamelCase subdir] = subdir
      requireFilesOrder.push name

    maxLength = 0
    maxLength = max maxLength, ucName.length for ucName in requireFilesOrder


    requires = for upperCamelCaseName in requireFilesOrder
      file = requireFiles[upperCamelCaseName]
      "#{pad upperCamelCaseName, maxLength} = require './#{file}'"

    """
    #{Generator.generatedByString}
    # this file: #{path}/index.js

    module.exports =
    #{requires.join "\n"}
    """
  generateNamespace: (path, {files, subdirs}) ->
    {parentNameSpaceName, nameSpaceName, requireParentNameSpace} = @getNameSpaceNamesFromPath path

    """
    #{Generator.generatedByString}
    # file: #{path}/namespace.js

    #{requireParentNameSpace}
    module.exports = class #{parentNameSpaceName}#{nameSpaceName}
    """

  generateFromFiles: (files) =>
    for file in files
      @addCoffeeFile file
    log directoriesWithCoffee:@directoriesWithCoffee
    @prettyPrint()
    @generateFiles()

  generate: ->
    glob "#{@root}/**/*.coffee", {}, (er, files) =>
      @generateFromFiles files

generator = new Generator(withoutTrailingSlash targetPath).generate()
