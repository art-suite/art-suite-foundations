// Generated by CoffeeScript 1.12.7
(function() {
  var Namespace, NamespaceDir, NamespaceSet, NamespaceStructure, arrayWithoutLast, basename, fileWithoutExtension, globalNamespaceName, isPathedNamespace, log, merge, normalizeNamespaceName, peek, pushIfUnique, ref, ref1, shouldIncludeInNamespace, shouldNotAutoload, shouldNotNamespace, toFilename, toModuleName, upperCamelCase,
    slice = [].slice;

  ref = require("./MiniFoundation"), upperCamelCase = ref.upperCamelCase, peek = ref.peek, pushIfUnique = ref.pushIfUnique, log = ref.log, merge = ref.merge, arrayWithoutLast = ref.arrayWithoutLast, fileWithoutExtension = ref.fileWithoutExtension;

  ref1 = require('./Helper'), globalNamespaceName = ref1.globalNamespaceName, shouldNotAutoload = ref1.shouldNotAutoload, shouldNotNamespace = ref1.shouldNotNamespace, shouldIncludeInNamespace = ref1.shouldIncludeInNamespace, toFilename = ref1.toFilename, toModuleName = ref1.toModuleName;

  basename = require('path').basename;

  isPathedNamespace = Neptune.isPathedNamespace;

  NamespaceSet = (function() {

    /*
    @length: number of non-ignored items
     */
    function NamespaceSet(items) {
      var i, item, len;
      this.ignored = [];
      this.notNamespaced = [];
      this.namespaced = {};
      this.length = 0;
      if (items) {
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          this.addItem(item);
        }
      }
    }

    NamespaceSet.prototype.containsNormalizedItemName = function(itemName) {
      return !!this.namespaced[toModuleName(itemName)];
    };

    NamespaceSet.prototype.addItem = function(item) {
      var itemName;
      itemName = peek(item.split('/'));
      if (shouldNotAutoload(itemName)) {
        return this.ignored.push("" + (basename(item)));
      }
      this.length++;
      if (shouldNotNamespace(itemName)) {
        return this.notNamespaced.push("" + (basename(item)));
      }
      return this.namespaced[toModuleName(itemName)] = item;
    };

    NamespaceSet.prototype.getInspectedObjects = function() {
      var out;
      out = {};
      if (Object.keys(this.namespaced).length > 0) {
        out.namespaced = this.namespaced;
      }
      if (this.notNamespaced.length > 0) {
        out.notNamespaced = this.notNamespaced;
      }
      if (this.ignored.length > 0) {
        out.ignored = this.ignored;
      }
      return out;
    };

    return NamespaceSet;

  })();

  Namespace = (function() {
    function Namespace(arg) {
      this.namespaceName = arg.namespaceName, this.path = arg.path, this.namespacePath = arg.namespacePath, this.files = arg.files, this.subdirs = arg.subdirs, this.parent = arg.parent, this.includeInNamespace = arg.includeInNamespace;
      this.fileSet = new NamespaceSet(this.files);
      this.subdirSet = new NamespaceSet(this.subdirs);
      this.isPathNamespace = this.fileSet.length === 0 && !this.includeInNamespace && this.subdirSet.length <= 1;
      this.isPackageNamespace = !this.isPathNamespace;
    }

    Namespace.prototype.getIsRootPackageNamespace = function() {
      return !this.parent || !this.parent.getIsInsidePackageNamespace();
    };

    Namespace.prototype.getIsInsidePackageNamespace = function() {
      var ref2;
      return this.isPackageNamespace || ((ref2 = this.parent) != null ? ref2.getIsInsidePackageNamespace() : void 0);
    };

    Namespace.prototype.getInspectedObjects = function() {
      var out, ref2, ref3;
      out = {
        namespaceName: this.namespaceName,
        namespacePath: this.namespacePath,
        path: this.path
      };
      if (this.includeInNamespace) {
        out.includeInNamespace = this.includeInNamespace;
      }
      if (this.parent) {
        out.parentNamespacePath = this.parent.namespacePath;
      }
      if (((ref2 = this.files) != null ? ref2.length : void 0) > 0) {
        out.files = this.fileSet.getInspectedObjects();
      }
      if (((ref3 = this.subdirs) != null ? ref3.length : void 0) > 0) {
        out.subdirs = this.subdirSet.getInspectedObjects();
      }
      return out;
    };

    Namespace.prototype.getModuleNames = function() {
      return Object.keys(this.fileSet.namespaced).sort();
    };

    Namespace.prototype.getAllNonNamespacedRequires = function() {
      var out, v;
      out = [];
      this.fileSet && ((function() {
        var i, len, ref2, results;
        ref2 = this.fileSet.notNamespaced;
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          v = ref2[i];
          results.push(out.push(v));
        }
        return results;
      }).call(this));
      this.subdirSet && ((function() {
        var i, len, ref2, results;
        ref2 = this.subdirSet.notNamespaced;
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          v = ref2[i];
          results.push(out.push(v));
        }
        return results;
      }).call(this));
      return out.sort();
    };

    Namespace.prototype.getAllNamespacedSubdirRequires = function() {
      var k, out, ref2, v;
      out = [];
      if (this.subdirSet) {
        ref2 = this.subdirSet.namespaced;
        for (k in ref2) {
          v = ref2[k];
          if (!this.fileSet.containsNormalizedItemName(k)) {
            out.push(v);
          }
        }
      }
      return out.sort();
    };

    return Namespace;

  })();

  normalizeNamespaceName = function(name) {
    var part, parts;
    if (isPathedNamespace(name)) {
      parts = (function() {
        var i, len, ref2, results;
        ref2 = name.split('.');
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          part = ref2[i];
          if (part.length > 0) {
            results.push(upperCamelCase(part));
          }
        }
        return results;
      })();
      return parts.join('.');
    } else {
      return upperCamelCase(name);
    }
  };

  NamespaceDir = (function() {
    function NamespaceDir(arg) {
      var namespaceName, ref2;
      namespaceName = arg.namespaceName, this.path = arg.path, this.parent = arg.parent;
      this.files = [];
      this.subdirs = [];
      this.namespaceName = normalizeNamespaceName(namespaceName);
      this.namespacePath = (((ref2 = this.parent) != null ? ref2.namespacePath : void 0) || globalNamespaceName) + "." + this.namespaceName;
    }

    NamespaceDir.prototype.addFile = function(file) {
      return file && (shouldIncludeInNamespace(file, this.namespaceName) ? this.includeInNamespace = file : pushIfUnique(this.files, file));
    };

    NamespaceDir.prototype.addSubdir = function(subdir) {
      return subdir && pushIfUnique(this.subdirs, subdir);
    };

    NamespaceDir.prototype.getInspectedObjects = function() {
      var obj, ref2;
      return (
        obj = {},
        obj["" + this.path] = {
          namespaceName: this.namespaceName,
          namespacePath: this.namespacePath,
          files: this.files,
          subdirs: this.subdirs,
          parent: (ref2 = this.parent) != null ? ref2.namespacePath : void 0
        },
        obj
      );
    };

    return NamespaceDir;

  })();

  module.exports = NamespaceStructure = (function() {
    var addNamespace;

    NamespaceStructure.shouldNotAutoload = shouldNotAutoload;

    NamespaceStructure.shouldNotNamespace = shouldNotNamespace;

    function NamespaceStructure(arg) {
      var file, i, len, ref2;
      this.root = arg.root, this.files = arg.files;
      this._dirs = {};
      ref2 = this.files;
      for (i = 0, len = ref2.length; i < len; i++) {
        file = ref2[i];
        this._addSourcePathArrayAndFile({
          file: file
        });
      }
      this.namespaces = this._generateNamespaces(this._dirs);
    }

    NamespaceStructure.prototype.getInspectedObjects = function() {
      var k, namespace, out, ref2;
      out = {};
      ref2 = this.namespaces;
      for (k in ref2) {
        namespace = ref2[k];
        out[k] = namespace.getInspectedObjects();
      }
      return out;
    };

    NamespaceStructure.prototype._addSourcePathArrayAndFile = function(arg) {
      var base, dir, file, i, j, namespaceName, namespacePath, path, pathArray, ref2, subdir;
      pathArray = arg.pathArray, file = arg.file, subdir = arg.subdir;
      if (!pathArray) {
        ref2 = file.split("/"), pathArray = 2 <= ref2.length ? slice.call(ref2, 0, i = ref2.length - 1) : (i = 0, []), file = ref2[i++];
      }
      path = pathArray.join('/');
      namespacePath = 2 <= pathArray.length ? slice.call(pathArray, 0, j = pathArray.length - 1) : (j = 0, []), namespaceName = pathArray[j++];
      dir = (base = this._dirs)[path] || (base[path] = new NamespaceDir({
        namespaceName: namespaceName,
        path: path,
        parent: this.root !== path ? this._addSourcePathArrayAndFile({
          pathArray: namespacePath,
          subdir: namespaceName
        }) : void 0
      }));
      dir.addFile(file);
      dir.addSubdir(subdir);
      return dir;
    };

    addNamespace = function(namespaces, dir) {
      var name1;
      if (dir) {
        return namespaces[name1 = dir.namespacePath] || (namespaces[name1] = new Namespace(merge(dir, {
          parent: addNamespace(namespaces, dir.parent)
        })));
      } else {
        return new Namespace({
          namespaceName: globalNamespaceName,
          namespacePath: globalNamespaceName,
          path: 'neptune-namespaces-runtime'
        });
      }
    };

    NamespaceStructure.prototype._generateNamespaces = function(dirs) {
      var dir, name, namespaces;
      namespaces = {};
      for (name in dirs) {
        dir = dirs[name];
        addNamespace(namespaces, dir);
      }
      return namespaces;
    };

    return NamespaceStructure;

  })();

}).call(this);

//# sourceMappingURL=NamespaceStructure.js.map
