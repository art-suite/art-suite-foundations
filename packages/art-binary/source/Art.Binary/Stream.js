// Generated by CoffeeScript 1.12.7
(function() {
  var BaseObject, Binary, ClassSystem, Stream, binary,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ClassSystem = require('art-class-system');

  Binary = require("./namespace");

  BaseObject = ClassSystem.BaseObject;

  binary = require("./BinaryString").binary;

  module.exports = Stream = (function(superClass) {
    extend(Stream, superClass);

    Stream.stream = function(arg) {
      if (arg instanceof Stream) {
        return arg;
      } else if (arg instanceof ArrayBuffer) {
        return Stream.fromArrayBuffer(arg);
      } else if (arg instanceof Uint8Array) {
        return new Stream(arg);
      } else {
        return new Stream(binary(arg).bytes);
      }
    };

    Stream.fromArrayBuffer = function(arrayBuffer) {
      return new Stream(new Uint8Array(arrayBuffer, 0, arrayBuffer.byteLength));
    };

    function Stream(byteView) {
      this.byteView = byteView;
      this.pos = 0;
    }

    Stream.prototype.readByte = function() {
      return this.byteView[this.pos++];
    };

    Stream.prototype.readAsi = function() {
      var ret, shift, val;
      ret = 0;
      shift = 0;
      val = 128;
      while (val >= 128) {
        val = this.readByte();
        ret += (val % 128) << shift;
        shift += 7;
      }
      return ret;
    };

    Stream.prototype.uint8Array = function() {
      return this.byteView;
    };

    Stream.prototype.read = function(length) {
      var begin, end;
      begin = this.pos;
      this.pos += length;
      end = this.pos;
      return new Stream(this.byteView.subarray(begin, end));
    };

    Stream.prototype.inspect = function() {
      return "{Stream pos=" + this.pos + " byteOffset=" + this.byteView.byteOffset + " length=" + this.byteView.length + "}";
    };

    Stream.prototype.readAsiString = function() {
      return this.read(this.readAsi());
    };

    Stream.prototype.done = function() {
      return this.pos >= this.byteView.length;
    };

    Stream.getter({
      buffer: function() {
        return this.binaryString.buffer;
      },
      isDone: function() {
        return this.pos >= this.byteView.length;
      },
      binaryString: function() {
        return this._binaryString != null ? this._binaryString : this._binaryString = binary(this.byteView);
      },
      inspectedString: function() {
        return this.binaryString.inspectedString;
      },
      inspectedObjects: function() {
        return this.binaryString.inspectedObjects;
      }
    });

    Stream.prototype.toString = function() {
      return this.binaryString.toString();
    };

    return Stream;

  })(BaseObject);

}).call(this);
