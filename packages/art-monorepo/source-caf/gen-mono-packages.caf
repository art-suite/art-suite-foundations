import &ArtStandardLib, &Lib

rootPackage = readJson :package.json
rootPackage.dependencies = {}
previousSubPackages = {}

addDep = (type, name, version, subPackage) ->
  intoPackageSet = rootPackage[type];

  existingDep = intoPackageSet[name]
  alreadyHaveDep = !!existingDep
  alreadyFileDep = alreadyHaveDep && /^file:/.test existingDep
  settingFileDep = /^file:/.test version
  conflict = alreadyHaveDep && existingDep != version && alreadyFileDep == settingFileDep

  if (conflict)
    previousSubPackage = previousSubPackages[type][name]
    previousVersion = intoPackageSet[name]

    log
      """
        CONFLICTING PACKAGE VERSIONS:
          #{subPackage}: {'#{name}': '#{version}'}
          #{previousSubPackage}: {'#{name}': '#{previousVersion}'}

    throw new Error
      ""
        could not add #{type}: {'#{name}': '#{version}'}
        from #{subPackage} because it's already '#{intoPackageSet[name]}'
        from #{previousSubPackages[type][name]}

  else if !alreadyFileDep
    intoPackageSet[name] = version;

  previousSubPackages[type] = previousSubPackages[type] || {}
  previousSubPackages[type][name] = subPackage;

loadAllPackages()
.then (packages) ->
  each _package, packageFolder from packages
    _package extract name, dependencies, devDependencies
    log "package: #{packageFolder}"

    each v, k in dependencies     with addDep :dependencies, k, v, _package
    each v, k in devDependencies  with addDep :dependencies, k, v, _package
    addDep :dependencies, name, "file:#{packageFolder}"

  writeJson :package.json rootPackage
