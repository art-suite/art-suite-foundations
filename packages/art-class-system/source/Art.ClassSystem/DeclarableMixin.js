// Generated by CoffeeScript 1.12.7
(function() {
  var defineModule, each, isPlainObject, log, lowerCamelCase, object, ref, upperCamelCase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, log = ref.log, object = ref.object, upperCamelCase = ref.upperCamelCase, lowerCamelCase = ref.lowerCamelCase, each = ref.each, isPlainObject = ref.isPlainObject;

  defineModule(module, function() {
    return function(superClass) {
      var DeclarableMixin;
      return DeclarableMixin = (function(superClass1) {
        extend(DeclarableMixin, superClass1);

        function DeclarableMixin() {
          return DeclarableMixin.__super__.constructor.apply(this, arguments);
        }


        /*
          define a declarable field
        
          IN:
            map:
              key: name: string
              value: true-ish OR
                options:
                  preprocess: (v) -> newV
                  validate:   (v) -> truthish
                  extendable: defaultValue
                    If present, this is an extendable property.
                    See: @extendableProperty
                    passed to: @extendableProperty "#{key}": options.extendable
                NOTE: validate is evaluated BEFORE preprocess
        
          EFFECT:
            creates:
        
               * class declarator function, with preprocessing
              @name: (...)->
        
               * class getter-function
              @getName: ->
        
               * instance-getter
              @getter name: ->
         */

        DeclarableMixin.declarable = function(map) {
          return each(map, (function(_this) {
            return function(options, name) {
              var extendable, getter, getterName, internalName, obj, preprocess, ucProp, validate;
              if (isPlainObject(options)) {
                preprocess = options.preprocess, validate = options.validate, extendable = options.extendable, getter = options.getter;
              }
              preprocess || (preprocess = function(v) {
                return v;
              });
              validate || (validate = function() {
                return true;
              });
              name = lowerCamelCase(name);
              ucProp = upperCamelCase(name);
              internalName = _this.propInternalName(name);
              getterName = "get" + ucProp;
              if (extendable) {
                return _this.extendableProperty((
                  obj = {},
                  obj["" + name] = extendable,
                  obj
                ));
              } else {
                _this[name] = function(value) {
                  if (!validate(value)) {
                    throw new Error("invalid value: " + (formattedInspect({
                      value: value,
                      name: name
                    })));
                  }
                  return this[internalName] = preprocess(value);
                };
                _this[getterName] = getter || function() {
                  return this[internalName];
                };
                return _this.addGetter(name, function() {
                  return this["class"][internalName];
                });
              }
            };
          })(this));
        };

        return DeclarableMixin;

      })(superClass);
    };
  });

}).call(this);

//# sourceMappingURL=DeclarableMixin.js.map
