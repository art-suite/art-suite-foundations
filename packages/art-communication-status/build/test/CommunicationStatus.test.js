"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "decodeHttpStatus", "success", "missing", "clientFailure", "clientFailureNotAuthorized", "serverFailure", "networkFailure", "communicationStatuses", "encodeHttpStatus", "failure", "aborted", "pending", "isFailure"], [global, require('art-standard-lib'), require('art-testbench'), require('../Art.CommunicationStatus')], (describe, test, assert, decodeHttpStatus, success, missing, clientFailure, clientFailureNotAuthorized, serverFailure, networkFailure, communicationStatuses, encodeHttpStatus, failure, aborted, pending, isFailure) => {return describe({decodeHttpStatus: function() {test("100", () => assert.rejects(() => decodeHttpStatus(100))); test("200", () => assert.selectedPropsEq({status: success, httpStatus: 200}, decodeHttpStatus(200))); test("300", () => assert.selectedPropsEq({status: missing, httpStatus: 300}, decodeHttpStatus(300))); test("400", () => assert.selectedPropsEq({status: clientFailure, httpStatus: 400}, decodeHttpStatus(400))); test("401", () => assert.selectedPropsEq({status: clientFailure, httpStatus: 401}, decodeHttpStatus(401))); test("402", () => assert.selectedPropsEq({status: clientFailure, httpStatus: 402}, decodeHttpStatus(402))); test("403", () => assert.selectedPropsEq({status: clientFailureNotAuthorized, httpStatus: 403}, decodeHttpStatus(403))); test("404", () => assert.selectedPropsEq({status: missing, httpStatus: 404}, decodeHttpStatus(404))); test("405", () => assert.selectedPropsEq({status: clientFailure, httpStatus: 405}, decodeHttpStatus(405))); test("500", () => assert.selectedPropsEq({status: serverFailure, httpStatus: 500}, decodeHttpStatus(500))); test("501", () => assert.selectedPropsEq({status: clientFailure, httpStatus: 501}, decodeHttpStatus(501))); test("502", () => assert.selectedPropsEq({status: networkFailure, httpStatus: 502}, decodeHttpStatus(502))); test("503", () => assert.selectedPropsEq({status: networkFailure, httpStatus: 503}, decodeHttpStatus(503))); test("504", () => assert.selectedPropsEq({status: networkFailure, httpStatus: 504}, decodeHttpStatus(504))); test("505", () => assert.selectedPropsEq({status: clientFailure, httpStatus: 505}, decodeHttpStatus(505))); return test("600", () => assert.rejects(() => decodeHttpStatus(600)));}, propsMapToStrings: function() {return Caf.each2(communicationStatuses, (props, status) => test(`${Caf.toString(status)}`, () => assert.eq(require('../Art.CommunicationStatus')[status], status)));}, encodeHttpStatus: function() {test("failure encodes to the same status as serverFailure", () => assert.eq(serverFailure, decodeHttpStatus(encodeHttpStatus(failure)).status)); return Caf.each2(communicationStatuses, (props, status) => status !== failure && props.httpStatus && test(`${Caf.toString(status)}`, () => assert.eq(status, decodeHttpStatus(encodeHttpStatus(status)).status)));}, isFailure: function() {Caf.each2([failure, networkFailure, serverFailure, clientFailure, clientFailureNotAuthorized, missing, aborted], (status) => test(status, () => assert.ok(isFailure(status)))); return Caf.each2([success, pending], (status) => test(`non-failure: ${Caf.toString(status)}`, () => assert.ok(!isFailure(status))));}});});});
//# sourceMappingURL=CommunicationStatus.test.js.map
