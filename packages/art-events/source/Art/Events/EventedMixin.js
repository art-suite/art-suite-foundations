// Generated by CoffeeScript 1.12.7
(function() {
  var EventManager, EventedBaseMixin, defineModule, isFunction, isPlainObject, log, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, isFunction = ref.isFunction, log = ref.log, isPlainObject = ref.isPlainObject;

  EventManager = require('./EventManager');

  EventedBaseMixin = require('./EventedBaseMixin');

  defineModule(module, function() {
    return function(superClass) {
      var EventedMixin;
      return EventedMixin = (function(superClass1) {
        extend(EventedMixin, superClass1);

        function EventedMixin() {
          EventedMixin.__super__.constructor.apply(this, arguments);
          this._eventManager = null;
        }

        EventedMixin.getter({
          eventManager: function() {
            return this._eventManager || (this._eventManager = new EventManager(this));
          }
        });

        EventedMixin.prototype.on = function(handlerMap) {
          return this.eventManager.on(this.preprocessEventHandlers(handlerMap));
        };

        EventedMixin.prototype.onNext = function(handlerMap) {
          return this.eventManager.onNext(handlerMap);
        };

        EventedMixin.prototype.clearEventHandlers = function() {
          return this._eventManager = null;
        };

        EventedMixin.prototype.removeListeners = function(handlerMap) {
          var ref1;
          return (ref1 = this._eventManager) != null ? ref1.removeListeners(handlerMap) : void 0;
        };

        EventedMixin.prototype.preprocessEventHandlers = function(handlerMap) {
          return handlerMap;
        };

        EventedMixin.prototype._sendToEventHandler = function(event) {
          var ref1;
          return (ref1 = this._eventManager) != null ? ref1.handleEvent(event) : void 0;
        };

        EventedMixin.prototype._hasEventHandler = function(eventType) {
          var ref1;
          return (ref1 = this._eventManager) != null ? ref1.hasHandler(eventType) : void 0;
        };

        return EventedMixin;

      })(EventedBaseMixin(superClass));
    };
  });

}).call(this);
