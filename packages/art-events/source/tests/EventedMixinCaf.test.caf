import &StandardImport

class MyEventedObject extends EventedMixinCaf BaseClass

test "event(), when no handler, returns false", ->
  eo = new MyEventedObject
  assert.eq false, eo.queueEvent "foo"

test "removeListeners", ->
  eo = new MyEventedObject
  eo.on listeners = foo: ->
  assert.eq 1, eo.eventManager.eventHandlers.foo.length
  eo.removeListeners listeners
  assert.eq 0, eo.eventManager.eventHandlers.foo.length
  assert.eq false, eo.queueEvent "foo"

test "event(), when there is a handler, returns the queued event object", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on foo: -> done()
  assert.eq true, eo.queueEvent "foo"

test "handled event happens on nextTick", -> new Promise (done) ->
  eo = new MyEventedObject
  count = 0
  eo.on foo: ->
    assert.eq count, 1
    done()
  assert.eq true, eo.queueEvent "foo"
  count++

test "event creator function", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on foo: (e)->
    assert.eq e.props.bar, 123
    done()
  assert.eq true, eo.queueEvent "foo", -> new Event "foo", bar:123

test "events handled in order they occured", -> new Promise (done) ->
  eo = new MyEventedObject
  count = 0
  eo.on bar: ->
    assert.eq count, 2
    done()
  eo.on foo: ->
    assert.eq count, 1
    count++
  eo.queueEvent "foo"
  eo.queueEvent "bar"
  count++

test "show warning when queueing events when handling events", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on foo: -> eo.queueEvent "bar"
  eo.on bar: -> done()
  eo.queueEvent "foo"

test "show warning when handling events outside of an epoch", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on foo: -> done()
  eo.handleEvent new Event "foo"

test "handleEvents", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on
    bar: ->
    foo: done
  eo.eventManager.handleEvents []
    new Event :bar
    new Event :foo

test "handle event that throws an error", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on
    foo: -> throw new Error :myError
    eventException: done
  eo.handleEvent new Event "foo"

test "handle unknown event returns false", ->
  eo = new MyEventedObject
  assert.eq false, eo.handleEvent new Event :foo

test "events queued at other times are OK", -> new Promise (done) ->
  eo = new MyEventedObject
  eo.on foo: -> nextTick -> eo.queueEvent "bar"
  eo.on bar: -> done()
  eo.queueEvent "foo"

test "sequence of oneTime handlers", -> new Promise (done) ->
  eo = new MyEventedObject

  eo.onNext
    birthday: ->
      eo.onNext birthday: -> done()
      eo.queueEvent "birthday"

  eo.queueEvent "birthday"

