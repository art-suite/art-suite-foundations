"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["EventedBaseMixinCaf", "EventManager"], [global, require('art-standard-lib'), {EventManager: require('./EventManager'), EventedBaseMixinCaf: require('./EventedBaseMixinCaf')}], (EventedBaseMixinCaf, EventManager) => {return function(superClass) {let EventedMixinCaf; return EventedMixinCaf = Caf.defClass(class EventedMixinCaf extends EventedBaseMixinCaf(superClass) {constructor() {super(...arguments); this._eventManager = null;};}, function(EventedMixinCaf, classSuper, instanceSuper) {this.getter({eventManager: function() {return this._eventManager || (this._eventManager = new EventManager(this));}}); this.prototype.on = function(handlerMap) {return this.eventManager.on(this.preprocessEventHandlers(handlerMap));}; this.prototype.onNext = function(handlerMap) {return this.eventManager.onNext(handlerMap);}; this.prototype.clearEventHandlers = function() {return this._eventManager = null;}; this.prototype.removeListeners = function(handlerMap) {let base; return Caf.exists(base = this._eventManager) && base.removeListeners(handlerMap);}; this.prototype.preprocessEventHandlers = function(handlerMap) {return handlerMap;}; this.prototype._sendToEventHandler = function(event) {let base; return Caf.exists(base = this._eventManager) && base.handleEvent(event);}; this.prototype._hasEventHandler = function(eventType) {let base; return Caf.exists(base = this._eventManager) && base.hasHandler(eventType);};});};});});
//# sourceMappingURL=EventedMixinCaf.js.map
