"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Event", "isString", "Error", "isFunction", "isPlainObject", "console", "inspect", "throwErrorOutOfStack"], [global, require('art-standard-lib'), {Event: require('./Event')}], (Event, isString, Error, isFunction, isPlainObject, console, inspect, throwErrorOutOfStack) => {let eventEpoch; eventEpoch = require('./EventEpoch').eventEpoch; return function(superClass) {let EventedBaseMixinCaf; return EventedBaseMixinCaf = Caf.defClass(class EventedBaseMixinCaf extends superClass {}, function(EventedBaseMixinCaf, classSuper, instanceSuper) {let typeFromEventOrType; this.typeFromEventOrType = typeFromEventOrType = function(eventOrType) {let temp; return eventOrType && (((temp = eventOrType.type) != null ? temp : eventOrType));}; this.prototype.queueEvent = function(eventOrType, eventPropertiesOrCreator) {let eventType; eventType = typeFromEventOrType(eventOrType); return (eventType && this._hasEventHandler(eventType)) ? (eventEpoch.queue(() => this.handleEvent(eventOrType, eventPropertiesOrCreator)), true) : false;}; this.prototype.handleEvent = function(eventOrType, eventPropertiesOrCreator) {let eventType, event, e; eventType = typeFromEventOrType(eventOrType); if (!(eventType && this._hasEventHandler(eventType) && (event = this.normalizeEvent(eventOrType, eventPropertiesOrCreator)))) {return false;}; event.target = this; try {this._sendToEventHandler(event);} catch (error) {e = error; this._handleErrorInHandler(event, "unknown", e);}; event.target = null; return true;}; this.prototype.normalizeEvent = function(eventOrType, eventPropertiesOrCreator) {let eventType, eventCreator, e; return (eventOrType instanceof Event) ? eventOrType : (!isString(eventType = eventOrType) ? (() => {throw new Error("expected event or event-type-string");})() : undefined, isFunction(eventCreator = eventPropertiesOrCreator) ? (e = eventCreator(), (() => {switch (false) {case !(e instanceof Event): return e; case !isPlainObject(e): return new Event(eventType, e); case !(e != null): return (() => {throw new Error("expecting event or plain-object");})(); default: return null;};})()) : new Event(eventType, eventPropertiesOrCreator));}; this.prototype._hasEventHandler = function(eventType) {return (() => {throw new Error("must implement");})();}; this.prototype._sendToEventHandler = function(event) {return (() => {throw new Error("must implement");})();}; this.prototype._handleErrorInHandler = function(event, handler, error) {console.log("EventedObjectBase: exception in handler. Error:", error); console.log(`Event: ${Caf.toString(inspect(event, 1))}`); console.log("Handler:", handler); console.log("Stack:", error.stack); return throwErrorOutOfStack(error);};});};});});
//# sourceMappingURL=EventedBaseMixinCaf.js.map
