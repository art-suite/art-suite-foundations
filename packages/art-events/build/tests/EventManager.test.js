"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "Promise", "EventManager", "Event", "assert", "Error"], [global, require('./StandardImport')], (test, Promise, EventManager, Event, assert, Error) => {test("add handler, fire event and handle event", function() {return new Promise((done) => {let em; em = new EventManager; em.on({birthday: (e) => {assert.equal(e.props.present, "legos"); return done();}}); return em.handleEvent(new Event("birthday", {present: "legos"}));});}); test("add exception handler", function() {return new Promise((done) => {let em, success, finalize; em = new EventManager; success = false; finalize = () => {assert.equal(success, true); return done();}; em.on({eventException: (e) => {success = true; return finalize();}, birthday: (e) => {throw new Error("fail"); return finalize();}}); return em.handleEvent(new Event("birthday"));});}); test("add oneTime handler", function() {return new Promise((resolve) => {let em, count; em = new EventManager; count = 0; em.onNext({birthday: (e) => count++, reallyDone: () => {assert.ok(!em.hasHandler("birthday")); assert.eq(count, 1); return resolve();}}); assert.ok(em.hasHandler("birthday")); em.handleEvent(new Event("birthday")); em.handleEvent(new Event("birthday")); return em.handleEvent(new Event("reallyDone"));});}); return test("add normal, everytime handler", function() {return new Promise((resolve) => {let em, count; em = new EventManager; count = 0; em.on({birthday: (e) => count++, reallyDone: () => {assert.ok(em.hasHandler("birthday")); assert.eq(count, 2); return resolve();}}); assert.ok(em.hasHandler("birthday")); em.handleEvent(new Event("birthday")); em.handleEvent(new Event("birthday")); return em.handleEvent(new Event("reallyDone"));});});});});
//# sourceMappingURL=EventManager.test.js.map
