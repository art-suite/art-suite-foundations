import &StandardImport

test "compactFlatten with only compacting needed", ->
  assert.eq (compactFlatten [1, null, undefined]), [1]

test "compactFlatten with only flattening needed", ->
  assert.eq (compactFlatten [1,2,3,[4,5]]), [1,2,3,4,5]

test "compactFlatten(a) and compact(flatten(a)) return same structure", ->
  structure = [0, [false], 1, 2, null, 3, [4, undefined, 5]]
  cF = compactFlatten structure
  c_f = compact flatten structure
  assert.eq cF, c_f

test "customCompactFlatten", ->
  structure = [0, [false], 1, 2, null, 3, [4, undefined, 5]]
  assert.eq (compactFlatten structure), [0, false, 1, 2, 3, 4, 5]
  assert.eq (customCompactFlatten structure, (a) -> !!a), [1, 2, 3, 4, 5]

test "compactFlatten null", -> assert.eq null, compactFlatten null
test "compactFlatten undefined", -> assert.eq undefined, compactFlatten undefined
test "compactFlatten false", -> assert.eq [false], compactFlatten false
test "compactFlatten 1", -> assert.eq [1], compactFlatten 1
test "compactFlatten ''", -> assert.eq [""], compactFlatten ""
test "compactFlatten {}", -> assert.eq [{}], compactFlatten {}
test "compactFlatten []", -> assert.eq [], compactFlatten []
test "compactFlatten 'a'", -> assert.eq ["a"], compactFlatten "a"
