// Generated by CoffeeScript 1.12.7
(function() {
  var alignTabs, colorNames, colorizeFunctions, failsafeInspect, formattedInspectArray, formattedInspectObject, formattedInspectRecursive, formattedInspectString, identity, isFunction, isInspectableArray, isNumber, isObject, isPlainArray, isPlainObject, isString, isTypedArray, object, objectName, passThroughColorizeFunctions, postWhitespaceFormatting, ref, ref1, ref2, toInspectedObjects, w;

  ref = require('../TypesExtended'), isObject = ref.isObject, isString = ref.isString, objectName = ref.objectName, isPlainObject = ref.isPlainObject, isPlainArray = ref.isPlainArray, isTypedArray = ref.isTypedArray, isFunction = ref.isFunction, isNumber = ref.isNumber;

  toInspectedObjects = require('./InspectedObjects').toInspectedObjects;

  w = require('../ArrayExtensions').w;

  object = require('../Iteration').object;

  formattedInspectObject = require('./FormattedInspectObject').formattedInspectObject;

  formattedInspectString = require('./FormattedInspectString').formattedInspectString;

  ref1 = require('./FormattedInspectArray'), isInspectableArray = ref1.isInspectableArray, formattedInspectArray = ref1.formattedInspectArray;

  ref2 = require('./AlignTabs'), alignTabs = ref2.alignTabs, postWhitespaceFormatting = ref2.postWhitespaceFormatting;

  formattedInspectRecursive = function(m, maxLineLength, options) {
    if (isInspectableArray(m)) {
      return formattedInspectArray(m, maxLineLength, options, formattedInspectRecursive);
    } else if (isString(m)) {
      return formattedInspectString(m, options);
    } else if (isObject(m)) {
      if (isFunction(m.inspect)) {
        return options.colorize.yellow(m.inspect());
      } else {
        return formattedInspectObject(m, maxLineLength, options, formattedInspectRecursive);
      }
    } else {
      return options.colorize.yellow("" + m);
    }
  };

  colorNames = w("red yellow green blue grey");

  colorizeFunctions = object(colorNames, function(c) {
    return function(str) {
      var ref3;
      return (ref3 = str[c]) != null ? ref3 : str;
    };
  });

  identity = function(s) {
    return s;
  };

  passThroughColorizeFunctions = object(colorNames, function() {
    return identity;
  });

  module.exports = {
    alignTabs: alignTabs,
    formattedInspectString: formattedInspectString,
    failsafeInspect: failsafeInspect = function(toInspect) {
      var ref3;
      return ("typeof: " + (typeof toInspect) + "\n") + ("constructor: " + ((toInspect != null ? toInspect.constructor : void 0) && (toInspect != null ? (ref3 = toInspect.constructor) != null ? ref3.name : void 0 : void 0)) + "\n") + (function() {
        switch (false) {
          case !isInspectableArray(toInspect):
            return "length: " + toInspect.length + "\njoined: [" + (toInspect.join(', ')) + "]";
          case !((toInspect != null) && typeof toInspect === 'object'):
            return "keys: " + (Object.keys(toInspect).join(', '));
          default:
            return "toString: " + toInspect;
        }
      })();
    },
    formattedInspect: function(toInspect, options) {
      var colorizeEnabled, error, indent, maxArrayLength, maxLineLength, out, ref3, ref4, unquoted;
      if (options == null) {
        options = {};
      }
      try {
        if (isNumber(options)) {
          maxLineLength = options;
        } else if (isPlainObject(options)) {
          indent = options.indent, unquoted = options.unquoted, colorizeEnabled = options.color, maxLineLength = options.maxLineLength, maxArrayLength = options.maxArrayLength;
        } else {
          console.error({
            invalid: {
              options: options
            }
          });
          throw new Error("invalid options object type: " + (typeof options));
        }
        if (maxLineLength == null) {
          maxLineLength = ((ref3 = global.process) != null ? (ref4 = ref3.stdout) != null ? ref4.columns : void 0 : void 0) || 80;
        }
        if (maxArrayLength == null) {
          maxArrayLength = 100;
        }
        if (indent == null) {
          indent = "  ";
        }
        return out = postWhitespaceFormatting(maxLineLength, formattedInspectRecursive(toInspectedObjects(toInspect), maxLineLength, {
          unquoted: unquoted,
          indent: indent,
          maxLineLength: maxLineLength,
          maxArrayLength: maxArrayLength,
          newLineWithIndent: "\n" + indent,
          colorize: colorizeEnabled ? colorizeFunctions : passThroughColorizeFunctions
        })).replace(/\n\n$/, "\n");
      } catch (error1) {
        error = error1;
        out = "Error in formattedInspect: " + error + "\n" + (failsafeInspect(toInspect));
        console.error(out, {
          error: error,
          toInspect: toInspect,
          options: options
        });
        return out;
      }
    }
  };

}).call(this);
