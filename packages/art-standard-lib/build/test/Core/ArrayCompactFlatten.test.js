"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "assert", "compactFlatten", "compact", "flatten", "customCompactFlatten"], [global, require('../StandardImport')], (test, assert, compactFlatten, compact, flatten, customCompactFlatten) => {test("compactFlatten with only compacting needed", function() {return assert.eq(compactFlatten([1, null, undefined]), [1]);}); test("compactFlatten with only flattening needed", function() {return assert.eq(compactFlatten([1, 2, 3, [4, 5]]), [1, 2, 3, 4, 5]);}); test("compactFlatten(a) and compact(flatten(a)) return same structure", function() {let structure, cF, c_f; structure = [0, [false], 1, 2, null, 3, [4, undefined, 5]]; cF = compactFlatten(structure); c_f = compact(flatten(structure)); return assert.eq(cF, c_f);}); test("customCompactFlatten", function() {let structure; structure = [0, [false], 1, 2, null, 3, [4, undefined, 5]]; assert.eq(compactFlatten(structure), [0, false, 1, 2, 3, 4, 5]); return assert.eq(customCompactFlatten(structure, (a) => !!a), [1, 2, 3, 4, 5]);}); test("compactFlatten null", function() {return assert.eq(null, compactFlatten(null));}); test("compactFlatten undefined", function() {return assert.eq(undefined, compactFlatten(undefined));}); test("compactFlatten false", function() {return assert.eq([false], compactFlatten(false));}); test("compactFlatten 1", function() {return assert.eq([1], compactFlatten(1));}); test("compactFlatten ''", function() {return assert.eq([""], compactFlatten(""));}); test("compactFlatten {}", function() {return assert.eq([{}], compactFlatten({}));}); test("compactFlatten []", function() {return assert.eq([], compactFlatten([]));}); return test("compactFlatten 'a'", function() {return assert.eq(["a"], compactFlatten("a"));});});});
//# sourceMappingURL=ArrayCompactFlatten.test.js.map
