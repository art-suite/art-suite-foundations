"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "durationString", "currentSecond", "stackTime", "log"], [global, require('./StandardImport')], (describe, test, assert, durationString, currentSecond, stackTime, log) => {return describe({durationString: function() {test("small durations", () => {assert.eq("0", durationString(0)); assert.eq("100ms", durationString(.1)); assert.eq("100Î¼s", durationString(.0001)); assert.eq("100ns", durationString(.0000001)); return assert.eq("0", durationString(.0000000001));}); test("basic", () => {assert.eq("1s", durationString(1)); assert.eq("10s", durationString(10)); assert.eq("1m", durationString(60)); assert.eq("1m", durationString(89)); return assert.eq("2m", durationString(90));}); return test("multiple levels", () => {assert.eq("1m 30s", durationString(90, 2)); assert.eq("1m 30s", durationString(90, 4)); assert.eq("1m 30s", durationString(90, 400000)); return assert.eq("47mo 18d 21h 33m 9s", durationString(123456789, 400000));});}, misc: function() {return test("stackTime", () => {let insideTime, startTime, outsideTime, endTime, totalTime; insideTime = 0; startTime = currentSecond(); outsideTime = stackTime(() => insideTime = stackTime(() => {let j, i; j = 0; return (i = 0, (() => {while (i < 100000) {let v; v = i; j++; i++;};})(), 100000);})); endTime = currentSecond(); totalTime = endTime - startTime; outsideTime = outsideTime.remainder; insideTime = insideTime.remainder; log({insideTime, outsideTime, totalTime}); assert.lte(outsideTime, insideTime, "outsideTime"); return assert.lte(outsideTime + insideTime, totalTime, "outsideTime + insideTime");});}});});});
//# sourceMappingURL=Time.test.js.map
