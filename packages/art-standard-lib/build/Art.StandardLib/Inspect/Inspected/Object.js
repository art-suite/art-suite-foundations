// Generated by CoffeeScript 1.12.7
(function() {
  var MinimalBaseObject, Object,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MinimalBaseObject = require("../../MinimalBaseObject");

  module.exports = Object = (function(superClass) {
    extend(Object, superClass);

    function Object(properties, instanceOf, originalObject) {
      this.properties = properties;
      this.instanceOf = instanceOf;
      this.originalObject = originalObject;
      Object.__super__.constructor.apply(this, arguments);
      this.length = this.properties ? self.Object.keys(this.properties).length : 0;
    }

    Object.getter({
      arrayOfStrings: function() {
        var k, ref, results, v;
        ref = this.properties;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k + ": " + v);
        }
        return results;
      },
      children: function() {
        var k, ref, ret, v;
        ret = {};
        ref = this.properties;
        for (k in ref) {
          v = ref[k];
          ret[k] = v;
        }
        return ret;
      }
    });

    Object.prototype.delimitedString = function(delimiter) {
      if (delimiter == null) {
        delimiter = ", ";
      }
      return this.arrayOfStrings.join(", ");
    };

    Object.prototype.toString = function() {
      if (this.inspected) {
        return this.inspected;
      } else if (this.instanceOf) {
        return "{" + this.instanceOf + " " + (this.delimitedString()) + "}";
      } else {
        return "{" + (this.delimitedString()) + "}";
      }
    };

    return Object;

  })(MinimalBaseObject);

}).call(this);

//# sourceMappingURL=Object.js.map
