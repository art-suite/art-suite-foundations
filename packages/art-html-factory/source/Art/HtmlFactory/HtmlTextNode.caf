import &ArtStandardLib

class HtmlTextNode extends &ArtClassSystem.BaseClass
  constructor: (@name, @props, @children) ->
    super
    @name = @name.toLocaleLowerCase()
    if hasProperties @props
      if @props.style
        @style = @props.style
        @props.style =
          array value, name from @style
            "#{name}: #{value}"
          .join '; '
    else
      @props = null

  @escapeHtmlString: escapeHtmlString = (string) ->
    string.replace /["<>&]/, (match) ->
      switch match
      when :" then "" &quot;
      when :& then "" &amp;
      when :< then "" &lt;
      when :> then "" &gt;

  @getter
    propsString: ->
      if @props
        ' ' +
          array propValue, propName from @props
            "" #{propName}="#{escapeHtmlString propValue}"
          .join ' '

    childrenString: ->
      array child from @children
        if isString child
          escapeHtmlString child
        else
          child
      .join ' '

  compile: (indent) ->
    compactFlatten @_compile indent

  toString: ->
    @compile ''
    .join "\n"

  ##################
  # PRIVATE
  ##################
  _compile: (indent) ->

    if compiledChildren = @_getCompiledChildren indent
      []
        "" #{indent}<#{@name}#{@propsString}>
        compiledChildren
        "" #{indent}</#{@name}>
    else
      [] "" #{indent}<#{@name}#{@propsString}></#{@name}>


  _getCompiledChildren: (indent) ->
    if @children?.length > 0
      indent = indent + '  ' if indent?
      array child from @children
        if isString child
          "#{indent}#{child.replace /\n/, "\n#{indent}"}"
        else
          child._compile indent
