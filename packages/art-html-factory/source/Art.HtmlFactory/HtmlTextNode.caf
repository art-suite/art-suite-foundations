import &ArtStandardLib, &HtmlLib, &HtmlFactoryLib, {} &wrapAnsi

endsInWhitespace = (string) ->
  /(\s|\n)$/.test string

class HtmlTextNode extends &ArtClassSystem.BaseClass
  constructor: (@_name, @_props, @_children) ->
    @_name = @_name.toLocaleLowerCase()

  ##
    IN: options
      props:    with replaced props (optional)
        can be props object or nested arrays of props objects
        nulls and undefineds are ignored

      children: with replaced children (optional)
        can be nested arrays of children
        children are either strings or HtmlTextNodes
        nulls and undefineds are ignored

  clone: (options) ->
    options extract? props, children

    new @class
      @_name
      if props != undefined     then mergeProps props else @_props
      if children != undefined  then concatChildren children else @_children

  with:                 (fields)      -> @clone fields
  withProps:            (props...)    -> @clone props: props
  withMergedProps:      (props...)    -> @clone props: @props, props
  withChildren:         (children...) -> @clone children: children
  withAppendedChildren: (children...) -> @clone children: @children, children

  emptyString = ''
  @getter
    :props
    :name
    :children
    inspectedObjects: -> [@name]: merge
      props:    @props
      children: if @children then array child in @children with child.inspectedObjects ? child

    style:            -> @_props?.style
    escapeHtml:       -> @_name != :rawhtml # TODO: we should honor this for all tags other than rawhtml
    isRawHtml:        -> @_name == :rawhtml

    length: -> @_length ?=
      5 + @_name.length * 2 # <name></name>
      + @propsString.length
      + reduce total, v from @_children inject 0 with total + v.length

    styleString: ->
      @_styleString ?= if @ extract style
        array name from-array Object.keys(style).sort()
          "#{dashCase name}: #{style[name]}"
        .join '; '

    propsString: ->
      @_propsString ?=
        if @_props
          ' ' +
            array propValue, propName from @_props when propValue? && propValue != false
              propValue = @styleString if propName == :style
              if propValue == true then propName
              else "" #{propName}="#{escapeHtmlString propValue}"

            .join ' '
        ? emptyString

    startTag: -> "<#{@_name}#{@propsString}>"
    endTag:   -> "</#{@_name}>"
    hasChildren: -> @_children?.length > 0
    compiledChildrenArray: ->
      if @hasChildren
        array child from @_children
          if isFunction child._compile then child._compile()
          else child
      else []

  # OUT: String
  compile: -> compactFlattenJoin '' @_compile()
  toString: -> @compile()
  toCompactString: -> @compile()

  ##################
  # PRIVATE
  ##################

  ## OUT: Array of Strings, possibly nested; assumption is the output can be joined with a newline
  _compile: ->
    if @isRawHtml && @_children # not an actual tag, so just compile children, don't include open and close tags
      @compiledChildrenArray

    else
      switch
      when @hasChildren then @startTag, @compiledChildrenArray, @endTag
      when noCloseTags[@_name] then @startTag
      else @startTag, @endTag
