import &ArtStandardLib, &ArtObjectTreeFactory

{}
  mergePropsInto = (dest, source) ->
    object v, k from source into dest
      if v == null then v
      else
        switch k
        when :style
          unless v is Object
            throw new Error "HtmlTextNode 'style' property must be an object: style: #{formattedInspect v}"

          object val, key from v into dest.style ? {}

        when :class then w("#{dest.class} #{v}").join ' '
        else v

  concatChildren = (children...) ->
    children = compactFlatten children
    if children.length > 0
      children

  mergeProps = (props...) ->
    props = compactFlatten props
    props = if props.length == 1 then props[0]
    else
      each propSet in props into out = {}
        mergePropsInto out, propSet

    if objectHasKeys props
      props

  ## Html, Body, Div, etc... Factories
    IN:  any combination plain objects, arrays, strings or HtmlTextNodes generated by sub-factories.
    OUT: HtmlTextNode instance. "toString" returns the HTML string.
  createHtmlFactories = (elementNames...) ->
    createObjectTreeFactories
      {} mergePropsInto
      compactFlatten elementNames
      &HtmlTextNode
