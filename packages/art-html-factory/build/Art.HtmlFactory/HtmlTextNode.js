"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["mergeProps", "concatChildren", "merge", "Object", "dashCase", "escapeHtmlString", "isFunction", "compactFlattenJoin", "noCloseTags"], [global, require('art-standard-lib'), require('./HtmlLib'), require('./HtmlFactoryLib'), {wrapAnsi: require('wrap-ansi')}], (mergeProps, concatChildren, merge, Object, dashCase, escapeHtmlString, isFunction, compactFlattenJoin, noCloseTags) => {let endsInWhitespace, HtmlTextNode; endsInWhitespace = function(string) {return /(\s|\n)$/.test(string);}; return HtmlTextNode = Caf.defClass(class HtmlTextNode extends require('art-class-system').BaseClass {constructor(_name, _props, _children) {super(...arguments); this._name = _name; this._props = _props; this._children = _children; this._name = this._name.toLocaleLowerCase();};}, function(HtmlTextNode, classSuper, instanceSuper) {let emptyString; this.prototype.clone = function(options) {let props, children; if (Caf.exists(options)) {props = options.props; children = options.children;}; return new this.class(this._name, (props !== undefined) ? mergeProps(props) : this._props, (children !== undefined) ? concatChildren(children) : this._children);}; this.prototype.with = function(fields) {return this.clone(fields);}; this.prototype.withProps = function(...props) {return this.clone({props});}; this.prototype.withMergedProps = function(...props) {return this.clone({props: [this.props, props]});}; this.prototype.withChildren = function(...children) {return this.clone({children});}; this.prototype.withAppendedChildren = function(...children) {return this.clone({children: [this.children, children]});}; emptyString = ""; this.getter("props", "name", "children", {inspectedObjects: function() {return {[this.name]: merge({props: this.props, children: this.children ? Caf.array(this.children, (child) => {let temp; return ((temp = child.inspectedObjects) != null ? temp : child);}) : undefined})};}, style: function() {let base; return Caf.exists(base = this._props) && base.style;}, escapeHtml: function() {return this._name !== "rawhtml";}, isRawHtml: function() {return this._name === "rawhtml";}, length: function() {let temp; return ((temp = this._length) != null ? temp : this._length = 5 + this._name.length * 2 + this.propsString.length + Caf.reduce(this._children, (total, v) => total + v.length, null, 0));}, styleString: function() {let style, temp, from, into, to, i, temp1; return ((temp = this._styleString) != null ? temp : this._styleString = (style = this.style) ? (from = Object.keys(style).sort(), into = [], (from != null) ? (to = from.length, i = 0, (() => {while (i < to) {let name; name = from[i]; into.push(`${Caf.toString(dashCase(name))}: ${Caf.toString(style[name])}`); temp1 = i++;}; return temp1;})()) : undefined, into).join("; ") : undefined);}, propsString: function() {let temp, temp1; return ((temp = this._propsString) != null ? temp : this._propsString = ((temp1 = this._props ? " " + Caf.array(this._props, (propValue, propName) => {if (propName === "style") {propValue = this.styleString;}; return (propValue === true) ? propName : `${Caf.toString(propName)}="${Caf.toString(escapeHtmlString(propValue))}"`;}, (propValue, propName) => propValue != null && propValue !== false).join(" ") : undefined) != null ? temp1 : emptyString));}, startTag: function() {return `<${Caf.toString(this._name)}${Caf.toString(this.propsString)}>`;}, endTag: function() {return `</${Caf.toString(this._name)}>`;}, hasChildren: function() {let base; return (Caf.exists(base = this._children) && base.length) > 0;}, compiledChildrenArray: function() {return this.hasChildren ? Caf.array(this._children, (child) => isFunction(child._compile) ? child._compile() : child) : [];}}); this.prototype.compile = function() {return compactFlattenJoin("", this._compile());}; this.prototype.toString = function() {return this.compile();}; this.prototype.toCompactString = function() {return this.compile();}; this.prototype._compile = function() {return (this.isRawHtml && this._children) ? this.compiledChildrenArray : (() => {switch (false) {case !this.hasChildren: return [this.startTag, this.compiledChildrenArray, this.endTag]; case !noCloseTags[this._name]: return this.startTag; default: return [this.startTag, this.endTag];};})();};});});});
//# sourceMappingURL=HtmlTextNode.js.map
