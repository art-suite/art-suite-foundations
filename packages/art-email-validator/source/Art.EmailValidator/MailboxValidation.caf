import &StandardImport, &Smtp

hardInvalidSmtpRejectionCodes =
  550: reason: "mailboxDoesNotExist"  message: "mailbox does not exist"
  452: reason: "mailboxFull"          message: "mailbox is full"

###
  IN:
    options:
      email:        (required) the email address to check
      emailServer:  (required) the email server to check with
      smtpFrom:     (required OR smtpHost) the smtpFrom-address to tell the email server [default: email]
      smtpHost:     (required OR smtpFrom) the smtpHost to tell the email server [default: the domain of part of: smtpFrom]
      timeout:      (default: 1000) number in miliseconds to wait before timing out when checking mailbox
      fallbackValidator: (options, result) ->
        IN:
          options: options object passed into validateMailbox
          result: validateMailbox's inconclusive result
        OUT:
          same signature as validateMailbox's OUTPUT

        Called if validateMailbox can't conclusively determine if it is valid
        We use this to call Mailgun's email validation service.

    socket:
      an already-open socket, OR, can be used for testing w/o a real SMTP connection
      (Note: Comcast blocks outgoing port-25 connections in the US - as-of 2018)

  OUT:
    valid: true == true-success
      if valid is true, a mailbox exists for sure

    invalid: true == true-failure
      if invalid is false, there is definitly no mailbox
      HOWEVER, if invalid is not true and valid is false, this may be a FALSE NEGATIVE
      (some smtp servers are known to deny this question based on your IP range - in particular, AWS EC2 instances are sometimes blocked)

    message: reason for failure if valid is false

    didYouMean: [optional] an valid-ish email that the user may have meant

validateMailbox: validateMailbox = (options = {}, socket) ->
  {smtpFrom, smtpHost, emailServer, email, verbose, fallbackValidator} = options
  throw new Error "email, emailServer and smtpHost or smtpFrom required" unless email && (smtpHost ? smtpFrom)
  {timeout = 1000} = options
  smtpHost ?= smtpFrom.split('@')[1]
  throw new Error "Please provide smtpHost or a complete smtpFrom email address" unless present smtpHost

  currentCommandIndex = 0
  smtpCommands =
    "helo #{smtpHost}"
    "mail from:<#{smtpFrom}>"
    "rcpt to:<#{email}>"

  new Promise (resolve, reject)->
    socket ?= &net.createConnection 25, emailServer
    socket.setTimeout timeout, ->
      resolve {}
        valid:    false
        invalid:  false
        reason:   "smtpTimeout"
        message:  "#{emailServer} failed to respond within specified timeout, (#{timeout}ms)"
        emailServer

    socket.on 'error', (socketError) ->
      if socketError.code == 'ECONNRESET'
        resolve
          valid:    false
          reason:   "smtpConnectionReset"
          message:  '#{emailServer} refused #{email} (connection reset).'
          emailServer
      else
        resolve {}
          valid:    false
          reason:   "smtpSocketError"
          message:  "socket socketError #{#err.code} communicating with #{emailServer}"
          emailServer


    socket.on 'data', (data) ->
      data = data.toString()
      log smtpResponse: data if verbose >= 2
      {status, subject, reason, message, statusCode, enhancedStatusCode, normalizedResponse} =
        processResponse data

      if status != success
        hardInvalid = if status == clientFailure
          switch subject
          when :mailbox     then true
          when :mailSystem  then true
          when :addressing  then true
          when :security    then false
          when :network     then false
          when :protocol    then false
          when :content     then false
          else false
        else if status == networkFailure && subject == :mailbox then !!reason

        ## DUE to a caffeine-script bug, the trail-comments don't work. So here they are, until we fix it:
          hardInvalid = if status == clientFailure
            switch subject
            when :mailbox     then true   # the mailbox is unavailable
            when :mailSystem  then true   # the mail system is unvailable
            when :addressing  then true   # the address is bad (i.e. there is no mailbox)
            when :security    then false  # could just be that the server doesn't like our IP
            when :network     then false  # by definition, temporary failure, probably should never be a clientFailure
            when :protocol    then false  # means the server thinks WE broke protocol
            when :content     then false  # means the server doesn't like our content - since we weren't really sending any, something weird happend
            else false                    # something weird happened

        result = {}
          valid:    false
          invalid:  !!hardInvalid
          reason:   reason ? "smtpError#{enhancedStatusCode ? statusCode}"
          status
          subject
          statusCode
          enhancedStatusCode
          emailServer
          refusedWith:  normalizedResponse
          message:      message ? "#{emailServer} refused #{email}. (#{formattedInspect merge {statusCode, enhancedStatusCode}})"

        resolve object v in result when v?

      if currentCommandIndex < smtpCommands.length
        log smtpCommand: smtpCommands[currentCommandIndex] if verbose >= 2
        socket.write smtpCommands[currentCommandIndex] + "\r\n", -> currentCommandIndex++

      else
        resolve {}
          valid:    true
          reason:   "mailboxExists"
          message:  "mailbox exists"
          emailServer

  .finally ->
    socket.destroy()

  .then (result) ->
    if !result.valid && !result.invalid
      if fallbackValidator
        verbose && logResult email, result, :useFallback
        Promise.then -> fallbackValidator options, result
        .tap ({valid, invalid, code, reason, message}) ->

        .then (result) -> merge
          usedFallbackValidator: true
          reason: "fallbackValidator"
          result
      else
        verbose && logResult email, result, :noFallback
        result

    else
      result
