import &StandardImport, &DomainValidation, &MailboxValidation

##
  https://tools.ietf.org/html/rfc3696
  define terms: local@domain
  lengths:
    total:  320 max
    local:  64 max
    domain: 255 max
maxEmailLength = 320

###
  IN:
    options:
      email:        (required) email address to check (string)
      smtpFrom:     (required OR smtpHost, default: feedback@smtpHost)    for validateMailbox: smtpFrom-address to tell the email server
      smtpHost:     (required OR smtpFrom, default: parsed from smtpFrom) for validateMailbox: smtpHost to tell the email server
      timeout:      (default: 1000) number in miliseconds to wait before timing out when checking mailbox
      fallbackValidator: (options, ambiguousResult) ->
        IN:
          options: options object passed into validateMailbox
          result: validateMailbox's inconclusive result
        OUT:
          same signature as validateMailbox's OUTPUT

        Called if validateMailbox can't conclusively determine if it is valid.
        Example: use this to call Mailgun's email validation service.

    socket: (optional) open socket or compatible object for testing
      Primarily used for testing.

  OUT: Promise.then ({valid, invalid, message, didYouMean}) ->
    valid:    true - means the email is definitly valid
    invalid:  true - means email is definitly invalid
    didYouMean: (optional) suggest a possibly-correct email
    message:  developer-consumable description of what happened

    NOTE: valid and invalid could both be false, in which case the result is ambiguous.

validateEmail: validateEmail = (options = {}, socket) ->
  {email, verbose} = options

  Promise.then ->
    if email.length > maxEmailLength
      valid:   false
      invalid: true
      message: "Email address too long. (#{email.length} > #{maxEmailLength})"
    else unless domain = getDomain email
      valid:   false
      invalid: true
      message: "Email's domain is invalid. (domain: #{formattedInspect email.split('@')?[1]})"
    else
      findEmailDomain
        domain
        verbose

      .then
        (emailServer) ->
          validateMailbox
            merge options, {domain, emailServer}
            socket

        (error) ->
          valid:    false
          invalid:  true
          message:  "Could not find email server for #{domain}. (DNS MX-record not found)"

  .then (result) ->
    if result.valid || result.didYouMean
      result
    else
      merge result, didYouMean:
        &mailcheck.run {} email
        ?.full

validateEmails: (options) ->
  Promise.deepAll object email in options.emails with-key email
    validateEmail merge options, {email}
