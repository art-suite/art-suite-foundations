import &StandardImport

# https://tools.ietf.org/html/rfc3696
# terms: local@domain
# lengths:
#   total:  320 max
#   local:  64 max
#   domain: 255 max
maxEmailLength = 320

# OUT: the lowest priority mail server
findEmailDomain: findEmailDomain = (domain) ->
  Promise.withCallback (callback) -> &dns.resolveMx domain, callback
  .then (dnsAddresses)->
    result = null
    lowestPriority = 0

    each {priority, exchange} in dnsAddresses
      if !result? || priority < lowestPriority
        lowestPriority = priority
        result = exchange

    result

###
  IN:
    options:
      email:        the email address to check
      emailServer:  the email server to check with
      smtpFrom:         the smtpFrom-address to tell the email server [default: email]
      smtpHost:         the smtpHost to tell the email server [default: the domain of part of: smtpFrom]
      timeout:      number in miliseconds to wait before timing out when checking mailbox [default: 5000]
      domain:       server-name used in error messages to make them friendly [default: emailServer]

    socket:
      an already-open socket, OR, can be used for testing w/o a real SMTP connection
      (Note: Comcast blocks outgoing port-25 connections in the US - as-of 2018)

  OUT: valid: t/f, message: reason for failure if valid is false
validateMailbox: validateMailbox = (options = {}, socket) ->
  {smtpFrom, smtpHost, emailServer, email} = options
  throw new Error "email, emailServer and smtpHost or smtpFrom required" unless email && (smtpHost ? smtpFrom)
  {domain = emailServer, timeout = 5000} = options
  smtpHost ?= smtpFrom.split('@')[1]

  currentCommandIndex = 0
  smtpCommands =
    "helo #{smtpHost}"
    "mail from:<#{smtpFrom}>"
    "rcpt to:<#{email}>"

  new Promise (resolve, reject)->
    socket ?= &net.createConnection 25, emailServer
    socket.setTimeout timeout, ->
      socket.destroy()
      resolve {}
        valid: false
        status: networkFailure
        message: "#{emailServer} failed to respond within #{timeout}ms"
        emailServer

    socket.on 'error', (socketError) ->
      socket.destroy()
      if socketError.code == 'ECONNRESET'
        resolve
          valid: false
          status: success
          message: '#{emailServer} refused #{email}.'
          emailServer
      else
        resolve {}
          valid: false
          status: serverFailure
          message: "socket socketError #{#err.code} communicating with #{emailServer}"
          emailServer

    socket.on 'data', (data) ->
      if data.toString()[0] != '2'
        socket.destroy()

        resolve {}
          valid: false
          status: success
          message: '#{emailServer} refused #{email}.'
          emailServer

      if currentCommandIndex < smtpCommands.length
        socket.write smtpCommands[currentCommandIndex] + "\n", -> currentCommandIndex++

      else
        socket.destroy()
        resolve {}
          valid: true
          status: success
          message: "mailbox exists"
          emailServer

###
  IN:
    options:
      email: email address to check (string)
      see validateMailbox or other options
      smtpFrom: "test@art.suite.com"

    socket: null or open socket or compatible object for testing

  OUT: Promise.then ({valid, message}) ->
validateEmail: validateEmail = (options = {}, socket) ->
  {email, verbose} = options

  if email.length < maxEmailLength && found = emailRegexp.exec email
    findEmailDomain domain = found[2]
    .catch (error) ->
      valid: false, message: "Could not find email server for #{domain}."

    .then (emailServer) ->
      log validateMailbox: {email, domain, emailServer} if verbose
      validateMailbox
        merge options, {domain, emailServer}
        socket

  else
    Promise.resolve valid: false, message: "Not a valid email address."

validateEmails: (options) ->
  Promise.deepAll object email in options.emails with-key email
    validateEmail merge options, {email}
