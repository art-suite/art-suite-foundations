"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Promise", "getDomain", "formattedInspect", "findEmailDomain", "validateMailbox", "merge", "logResult"], [global, require('./StandardImport'), require('./DomainValidation'), require('./MailboxValidation')], (Promise, getDomain, formattedInspect, findEmailDomain, validateMailbox, merge, logResult) => {let maxEmailLength, validateEmail; maxEmailLength = 320; return {validateEmail: validateEmail = function(options = {}, socket) {let email, verbose; ({email, verbose} = options); return Promise.then(() => {let domain, base; return (email.length > maxEmailLength) ? {valid: false, invalid: true, reason: "tooLong", message: `Email address too long. (${Caf.toString(email.length)} > ${Caf.toString(maxEmailLength)})`} : !(domain = getDomain(email)) ? {valid: false, invalid: true, reason: "malformedDomain", message: `Email's domain is invalid. (domain: ${Caf.toString(formattedInspect(Caf.exists(base = email.split("@")) && base[1]))})`} : findEmailDomain(domain, verbose).then((emailServer) => validateMailbox(merge(options, {domain, emailServer}), socket), (error) => {return {valid: false, invalid: true, reason: "noDnsMx", message: `Could not find email server for ${Caf.toString(domain)}. (DNS MX-record not found)`};});}).then((result) => {let base; return (result.valid || result.didYouMean) ? result : merge(result, {didYouMean: Caf.exists(base = require('mailcheck').run({email})) && base.full});}).tap((result) => verbose && logResult(email, result, "done"));}, validateEmails: function(options) {return Promise.deepAll(Caf.object(options.emails, (email) => validateEmail(merge(options, {email})), null, null, (email) => email));}};});});
//# sourceMappingURL=EmailValidator.js.map
