"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "Function", "Error", "compactFlatten", "Promise", "isString", "formattedInspect", "isFunction", "String"], [global, require('art-standard-lib'), require('art-class-system')], (BaseClass, Function, Error, compactFlatten, Promise, isString, formattedInspect, isFunction, String) => {let cleanErrorStack, chainedTest, ChainedTest; cleanErrorStack = function(error, stackTraceIgnoreLineRegExp) {let base; error.stack = Caf.array(Caf.exists(base = error.stack) && base.split("\n"), null, (line) => !stackTraceIgnoreLineRegExp.test(line)).join("\n"); return error;}; return ({chainedTest} = ChainedTest = Caf.defClass(class ChainedTest extends BaseClass {constructor(name, test, _runSetupOnce, runDependencyChainOnce, options) {super(...arguments); this.name = name; this.test = test; this._runSetupOnce = _runSetupOnce; this.runDependencyChainOnce = runDependencyChainOnce; this.options = options; if (!(Caf.is(this.test, Function))) {throw new Error("test required");}; if (!(Caf.is(this.name, String))) {throw new Error("name required");}; global.test(this.name, this.runThisTestOnce);};}, function(ChainedTest, classSuper, instanceSuper) {this.chainedTest = function(a, b) {let setupFunction, setupName; setupFunction = b != null ? b : a; if (b != null) {setupName = a;}; if (!(Caf.is(setupFunction, Function))) {throw new Error("expected test/setup function");}; return new ChainedTest(setupName != null ? setupName : "ChainedTest setup", setupFunction);}; this.prototype.thenTest = function(...args) {return this._applySequence("_thenTest", compactFlatten(args));}; this.prototype.tapTest = function(...args) {return this._applySequence("_tapTest", compactFlatten(args));}; this.prototype.softTapTest = function(...args) {return this._applySequence("_softTapTest", compactFlatten(args));}; this.getter({runSetupOnce: function() {let temp; return ((temp = this._runSetupOnce) != null ? temp : this.runDependencyChainOnce);}, runThisTestOnce: function() {let temp; return ((temp = this._runThisTestOnce) != null ? temp : this._runThisTestOnce = () => {let temp1, temp2, temp3; return ((temp1 = this._setupAndTestOncePromise) != null ? temp1 : this._setupAndTestOncePromise = Promise.all([Promise.then(((temp2 = this.runDependencyChainOnce) != null ? temp2 : (() => {}))), Promise.then(((temp3 = this.runSetupOnce) != null ? temp3 : (() => {})))]).then(([previousTestResult, setupResult]) => Promise.then(() => this.test(previousTestResult, setupResult)).then((out) => {let base; return (Caf.exists(base = this.options) && base.tap) ? previousTestResult : out;})).catch((error) => (() => {throw cleanErrorStack(error, /ArtSuite.Test|caffeine-script-runtime|processImmediate|art-testbench|caffeine-script-runtime|bluebird|jest-jasmine2/);})()));});}, runDependencyChainPlusThisOnce: function() {return () => {let base; return ((Caf.exists(base = this.options) && base.soft) ? Promise.then(this.runDependencyChainOnce) : this.runThisTestOnce()).catch((error) => !/failed in/.test(error.message) ? (() => {throw error;})() : undefined);};}}); this.prototype._thenTest = function(nextName, nextTest) {return new ChainedTest(nextName, nextTest, this.runSetupOnce, this.runDependencyChainPlusThisOnce);}; this.prototype._tapTest = function(nextName, nextTest) {return new ChainedTest(nextName, nextTest, this.runSetupOnce, this.runDependencyChainPlusThisOnce, {tap: true});}; this.prototype._softTapTest = function(nextName, nextTest) {return new ChainedTest(nextName, nextTest, this.runSetupOnce, this.runDependencyChainPlusThisOnce, {tap: true, soft: true});}; this.prototype._applySequence = function(applyMemberName, sequence) {let lastChainedTest, from, into, to, i1; lastChainedTest = this; from = sequence; into = from; if (from != null) {to = from.length; i1 = 0; while (i1 < to) {let name, i, f; name = from[i1]; i = i1; if (!isString(name)) {throw new Error(`ChainedTestError: expecting <String> got: ${Caf.toString(formattedInspect(name))}`);}; if (!isFunction(f = sequence[i + 1])) {throw new Error(`ChainedTestError: expecting <Function> after <String>(${Caf.toString(formattedInspect(name))}) got: ${Caf.toString(formattedInspect(f))}`);}; lastChainedTest = lastChainedTest[applyMemberName](name, f); i1 += 2;};}; into; return lastChainedTest;};}), {chainedTest});});});
//# sourceMappingURL=ChainedTest.js.map
