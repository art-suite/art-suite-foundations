import &ArtStandardLib, &ArtClassSystem

cleanErrorStack = (error, stackTraceIgnoreLineRegExp) ->
  error.stack =
    array line in error.stack.split :\n when !stackTraceIgnoreLineRegExp.test line
    .join :\n
  error

isMergeable = (v) ->
  !v?
  || isPlainObject v

useIfMergeable = (v) -> if isPlainObject v then v

uniqueErrorsReported = {}

{chainedTest, firstIt} = class ChainedTest extends BaseClass
  ### SBD NOTES TO SELF
    I want to simplify the API. I think we just need:

    - .thenTest (which is .thenTestMerged; drop the old thenTest and tapTest)
    - .thenOptionallyTest (which is the old "soft" - skippable if the test-runner doesn't run it)
    - .finally (just drop "always" - we are simplifying!

   Drop all the "it" methods. I'm making this for me, and no one else has requested them.
  ### chainedTest
    IN: up to 3 args, a string, a function, or an object, in any order, all optional
      string: test name

      function: setup test function
        Result: any arbitrary function.
        Result is resolved if it's a promise before passing to tests.
        The result is passed to every test as the test's 2nd argument.
        The result is ALSO passed to the very first test as the test's 1st argument.

      object: options:
        test: the test function (instead of using global.test or global.it) - necessary for Vitest
        skip: function used to skip the current test (if the test framework supports it)

    OUT: ChainedTest instance

    IN:
      PATTERN 1:
        (setupFunction) ->

      PATTERN 2:
        (setupTestName, setupFunction) ->

  @chainedTest: (a, b, c) ->
    startTestName = switch
      when isString a then a
      when isString b then b
      when isString c then c
      else "" ChainedTest setup

    startTestFunction = switch
      when isFunction a then a
      when isFunction b then b
      when isFunction c then c
      else () ->

    options = {test, skip} = switch # only keep the test and skip function option
      when isPlainObject a then a
      when isPlainObject b then b
      when isPlainObject c then c
      else {}

    options.test ?=
      if global.it? then global.it.bind global
      else if global.test? then global.test.bind global

    unless options.test?
      throw new Error "chainedTest: No global.it or global.test function is present. Please pass in a test function."

    new ChainedTest
      startTestName
      startTestFunction
      null
      null
      options

  thenTest:       (args...)-> @_applySequence :_thenTest        compactFlatten args
  thenTestMerged: (args...)-> @_applySequence :_thenTestMerged  compactFlatten args
  tapTest:        (args...)-> @_applySequence :_tapTest         compactFlatten args
  softTapTest:    (args...)-> @_applySequence :_softTapTest     compactFlatten args
  alwaysTest:     (args...)-> @_applySequence :_alwaysTest      compactFlatten args

  # ALIASES
  @firstIt:       @chainedTest
  thenIt:         (args...)-> @_applySequence :_thenTest          compactFlatten args
  tapIt:          (args...)-> @_applySequence :_tapTest           compactFlatten args
  softTapIt:      (args...)-> @_applySequence :_softTapTest       compactFlatten args
  alwaysIt:       (args...)-> @_applySequence :_alwaysTest        compactFlatten args
  finally:        (args...)-> @_applySequence :_alwaysTest        compactFlatten args

  ##########################
    PRIVATE
  ##########################
  ### constructor()
    IN:
      name: [optional] string
        if present, a mocha test is created

      test: [optional] (runSetupOnceResult) ->
        IN: resolved result from @setupResultPromise
        OUT: result will be resolved and passed to any thenTest tests

      _runSetupOnce: [optional] ->
        IN: (nothing)
        OUT: Promise.then -> setup result

      _runDependencyChainOnce: [optional] ->
        IN: (nothing)
        OUT: Promise.then -> dependency chain result

      options:
        filter: (testResult, previousTestResult) -> filtered test result for the next test
        soft: <boolean> don't run this test if not explicitly run by the test framework (Jest/Mocha)
          NOTE: Normally, a failure in a test will cause the rest of the chain to fail.
          However, a failure in a soft-test will not cause the rest of the chain to fail.
        always: <boolean> always run this test, even if previous tests fail. Because of this guarantee,
          "always" tests (including "finally") will only receive the setup result as both the 1st and 2nd argument;
          they won't receive the previous test result (which might have failed)
        test: [optional] pass in the test function directly, instead of a setup function. Necessary for Vitest.

  constructor: (@name, @test, @_runSetupOnce, @_runDependencyChainOnce, @options) ->
    @options ?= {}
    throw new Error "chainedTest: Test name-string is required.\n\n#{formattedInspect received: @name}" unless isString @name
    throw new Error "chainedTest: Test function is required.\n\n#{formattedInspect received: @test}" unless isFunction @test
    self = @
    @options.test @name, (args...)~>
      [context] = args # we do it this way so JEST and MOCHA don't detect that we are accepting arguments
      self.runThisTestOnce()
      .catch (error) ->
        if uniqueErrorsReported[error.message]
          try
            @options.skip?()

          try
            this.skip?() # MOCHA, vitest, and possibly future JEST
          # JEST 'skip' request pending as-of 2020/11/13: https://github.com/facebook/jest/issues/8604
        else
          uniqueErrorsReported[error.message] = true # "" (ChainedTest failed in: #{if @name then @name else :setup})
          throw error

  @getter
    previousTestResultPromise: -> Promise.then @_runDependencyChainOnce ? ->
    setupResultPromise: -> Promise.then @_runSetupOnce ? @_runDependencyChainOnce ? ->
    runThisTestOnce: ->
      @_runThisTestOnce ?= ->
        @_setupAndTestOncePromise ?=
          Promise.all []
            if @options.always then @setupResultPromise else @previousTestResultPromise
            @setupResultPromise

          .then ([previousTestResult, setupResult]) ->
            Promise.then ->
              chainedTest.current = @
              @test previousTestResult, setupResult
            .then (out) ->
              if @options extract filter
                filter out, previousTestResult
              else out

          .catch (error) ->
            throw cleanErrorStack
              error
              /ArtSuite.Test|caffeine-script-runtime|processImmediate|art-testbench|caffeine-script-runtime|bluebird|jest-jasmine2/

    runSetupForNextLink: -> @_runSetupOnce ? @runThisTestOnce
    runChainForNextLink: ->
      ->
        if @options.soft then @previousTestResultPromise
        else                  @runThisTestOnce()

  _chainNextTest: (nextName, nextTest, options) -> new ChainedTest
    nextName
    nextTest
    @runSetupForNextLink
    @runChainForNextLink
    merge options, {test, skip} = @options

  _thenTest: (nextName, nextTest) -> @_chainNextTest nextName, nextTest

  _thenTestMerged: (nextName, nextTest) -> @_chainNextTest nextName, nextTest,
    filter: (testResult, testInput) ->
      Promise.deepResolve testResult
      .then (testResult) ->
        merge
          useIfMergeable testInput
          useIfMergeable testResult

  _alwaysTest:  (nextName, nextTest) -> @_chainNextTest nextName, nextTest, always: true
  _tapTest:     (nextName, nextTest) -> @_chainNextTest nextName, nextTest, filter: (res, prevRes) -> prevRes
  _softTapTest: (nextName, nextTest) -> @_chainNextTest nextName, nextTest, soft: true, filter: (res, prevRes) -> prevRes

  _applySequence: (applyMemberName, sequence) ->
    lastChainedTest = @
    each name, i in sequence by 2
      lastChainedTest = lastChainedTest[applyMemberName] name, sequence[i + 1]

    lastChainedTest
