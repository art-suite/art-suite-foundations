import &StandardImport

now = toSeconds "2024-07-01 12:35"
humanDurationStringTester = (options, testMap) ->
  log {} options, testMap
  object expected, seconds in testMap
    test  "#{seconds}s => #{expected}" -> assert.eq humanDurationString(seconds | 0, options), expected

describe
  dateAgeString: ->
    options = {now}
    test "1 second from now" -> assert.eq dateAgeString(now + 1, options), "" 1s
    test "a second ago" -> assert.eq dateAgeString(now - 1, options), "" just now
    test "10 seconds ago" -> assert.eq dateAgeString(now - 10, options), "" just now
    test "a minute ago" -> assert.eq dateAgeString(now - secondsPer.minute, options), "" 1 min
    test "an hour ago" -> assert.eq dateAgeString(now - secondsPer.hour, options), :11:35am
    test "a day ago" -> assert.eq dateAgeString(now - secondsPer.day, options), "" yesterday afternoon

  "dateAgeString precise": ->
    options = {now, precise: true}
    test "1 second from now" -> assert.eq dateAgeString(now + 1, options), "" 1s
    test "a second ago" -> assert.eq dateAgeString(now - 1, options), "" 1 second
    test "10 seconds ago" -> assert.eq dateAgeString(now - 10, options), "" 10 seconds
    test "a minute ago" -> assert.eq dateAgeString(now - secondsPer.minute, options), "" 1 min
    test "an hour ago" -> assert.eq dateAgeString(now - secondsPer.hour, options), :11:35am
    test "a day ago" -> assert.eq dateAgeString(now - secondsPer.day, options), "" yesterday afternoon

  # "dateAgeString long": ->
  #   options = {now, long: true}
  #   test "1 second from now" -> assert.eq dateAgeString(now + 1, options), "" in 1 second
  #   test "a second ago" -> assert.eq dateAgeString(now - 1, options), "" just now
  #   test "10 seconds ago" -> assert.eq dateAgeString(now - 10, options), "" just now
  #   test "a minute ago" -> assert.eq dateAgeString(now - secondsPer.minute, options), "" 1 minute ago
  #   test "an hour ago" -> assert.eq dateAgeString(now - secondsPer.hour, options), :11:35am
  #   test "a day ago" -> assert.eq dateAgeString(now - secondsPer.day, options), "" yesterday afternoon

  humanDurationString: ->
    test  "a second" -> assert.eq humanDurationString(1), :1s
    test  "a minute" -> assert.eq humanDurationString(secondsPer.minute), :1m
    test  "an hour" -> assert.eq humanDurationString(secondsPer.hour), :60m
    test  "2 hours" -> assert.eq humanDurationString(secondsPer.hour*2), :120m
    test  "3 hours" -> assert.eq humanDurationString(secondsPer.hour*3), :3h
    test  "a day" -> assert.eq humanDurationString(secondsPer.day), :24h
    test  "2 days" -> assert.eq humanDurationString(secondsPer.day * 2), :48h
    test  "3 days" -> assert.eq humanDurationString(secondsPer.day * 3), :3d
    test  "a month" -> assert.eq humanDurationString(secondsPer.month), :30d
    test  "2 months" -> assert.eq humanDurationString(secondsPer.month * 2), :61d
    test  "3 months" -> assert.eq humanDurationString(secondsPer.month * 3), :3mo
    test  "a year" -> assert.eq humanDurationString(secondsPer.year), :12mo
    test  "2 years" -> assert.eq humanDurationString(secondsPer.year * 2), :2y

  "humanDurationString precision: 2": ->
    humanDurationStringTester
      {} precision: 2
      1:      :1s
      59:     :59s
      60:     "" 1m 0s
      [secondsPer.hour]: "" 1h 0m
      [secondsPer.hour + 29]: "" 1h 0m
      [secondsPer.hour + 30]: "" 1h 1m
      [secondsPer.hour + secondsPer.minute * 59]: "" 1h 59m
      [2 * secondsPer.hour]: "" 2h 0m
      [2 * secondsPer.hour + secondsPer.minute]: "" 2h 1m
      [24 * secondsPer.hour]: "" 1d 0h

  "humanDurationString words: true": ->
    humanDurationStringTester
      {} words: true
      1:      "" 1 second
      59:     "" 59 seconds
      60:     "" 1 minute

    # test  "a second" -> assert.eq humanDurationString(1, options), :1s
    # test  "59 seconds" -> assert.eq humanDurationString(59, options), :59s
    # test  "a minute" -> assert.eq humanDurationString(secondsPer.minute, options), "" 1m 0s
    # test  "a minute 30" -> assert.eq humanDurationString(secondsPer.minute * 1.5, options), "" 1m 30s
    # test  "2 minutes" -> assert.eq humanDurationString(secondsPer.minute * 2, options), "" 2m 0s
    # test  "2 minute 30" -> assert.eq humanDurationString(secondsPer.minute * 2.5, options), "" 2m 30s
    # test  "3 minutes" -> assert.eq humanDurationString(secondsPer.minute * 3, options), "" 3m 0s
    # test  "3 minutes 30" -> assert.eq humanDurationString(secondsPer.minute * 3.5, options), "" 3m 30s
    # test  "4 minutes" -> assert.eq humanDurationString(secondsPer.minute * 4, options), "" 4m 0s
    # test  "an hour" -> assert.eq humanDurationString(secondsPer.hour, options), :60m
    # test  "2 hours" -> assert.eq humanDurationString(secondsPer.hour*2, options), :120m
    # test  "3 hours" -> assert.eq humanDurationString(secondsPer.hour*3, options), :3h
    # test  "a day" -> assert.eq humanDurationString(secondsPer.day), :24h
    # test  "2 days" -> assert.eq humanDurationString(secondsPer.day * 2), :48h
    # test  "3 days" -> assert.eq humanDurationString(secondsPer.day * 3), :3d
    # test  "a month" -> assert.eq humanDurationString(secondsPer.month), :30d
    # test  "2 months" -> assert.eq humanDurationString(secondsPer.month * 2), :61d
    # test  "3 months" -> assert.eq humanDurationString(secondsPer.month * 3), :3mo
    # test  "a year" -> assert.eq humanDurationString(secondsPer.year), :12mo
    # test  "2 years" -> assert.eq humanDurationString(secondsPer.year * 2), :2y


  # "dateAgeString precise": ->
  #   test "a second ago" ->
  #     assert.eq
  #       dateAgeString now - 1, false, true, now
  #       "" 1 second ago

  #   test "a minute ago" ->
  #     assert.eq
  #       dateAgeString now - secondsPer.minute, false, true, now
  #       "" 1 min

  #   test "an hour ago" ->
  #     assert.eq
  #       dateAgeString now - secondsPer.hour, false, true, now
  #       :11:35am

  #   test "a day ago" ->
  #     assert.eq
  #       dateAgeString now - secondsPer.day, false, true, now
  #       "" yesterday afternoon
