"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["toSeconds", "describe", "test", "assert", "humanDurationString", "timeAgo", "secondsPer", "niceDateString", "niceFullDateString", "niceTimeDetailsString", "niceMonthYear"], [global, require('./StandardImport')], (toSeconds, describe, test, assert, humanDurationString, timeAgo, secondsPer, niceDateString, niceFullDateString, niceTimeDetailsString, niceMonthYear) => {let now, humanDurationStringTester, timeAgoTester; now = toSeconds("2024-07-01 12:35"); humanDurationStringTester = function(options, testMap) {return Caf.object(testMap, (expected, seconds) => test(`${Caf.toString(seconds)}s => ${Caf.toString(expected)}`, () => assert.eq(humanDurationString(seconds | 0, options), expected)));}; timeAgoTester = function(options, testMap) {return Caf.object(testMap, (expected, seconds) => test(`${Caf.toString(seconds)}s => ${Caf.toString(expected)}`, () => assert.eq(timeAgo(now - seconds, options), expected)));}; return describe({timeAgo: function() {let options; options = {now}; test("1 second from now", () => assert.eq(timeAgo(now + 1, options), "-1s")); test("a second ago", () => assert.eq(timeAgo(now - 1, options), "just now")); test("10 seconds ago", () => assert.eq(timeAgo(now - 10, options), "just now")); test("a minute ago", () => assert.eq(timeAgo(now - secondsPer.minute, options), "1m")); test("an hour ago", () => assert.eq(timeAgo(now - secondsPer.hour, options), "60m")); return test("a day ago", () => assert.eq(timeAgo(now - secondsPer.day, options), "24h"));}, "timeAgo precision: 2": function() {return timeAgoTester({now, precision: 2}, {"-1": "-1s", 1: "1s", 10: "10s", 59: "59s", 60: "1m 0s", 61: "1m 1s", 3600: "1h 0m", [secondsPer.day]: "1d 0h"});}, "timeAgo verbose": function() {return timeAgoTester({now, verbose: true}, {"-1": "in 1 second", 1: "just now", 10: "just now", 60: "1 minute ago", 3600: "60 minutes ago", [secondsPer.day]: "24 hours ago"});}, humanDurationString: function() {test("a second", () => assert.eq(humanDurationString(1), "1s")); test("10 seconds", () => assert.eq(humanDurationString(10), "10s")); test("a minute", () => assert.eq(humanDurationString(secondsPer.minute), "1m")); test("an hour", () => assert.eq(humanDurationString(secondsPer.hour), "60m")); test("2 hours", () => assert.eq(humanDurationString(secondsPer.hour * 2), "120m")); test("3 hours", () => assert.eq(humanDurationString(secondsPer.hour * 3), "3h")); test("a day", () => assert.eq(humanDurationString(secondsPer.day), "24h")); test("2 days", () => assert.eq(humanDurationString(secondsPer.day * 2), "48h")); test("3 days", () => assert.eq(humanDurationString(secondsPer.day * 3), "3d")); test("a month", () => assert.eq(humanDurationString(secondsPer.month), "30d")); test("2 months", () => assert.eq(humanDurationString(secondsPer.month * 2), "61d")); test("3 months", () => assert.eq(humanDurationString(secondsPer.month * 3), "3mo")); test("a year", () => assert.eq(humanDurationString(secondsPer.year), "12mo")); return test("2 years", () => assert.eq(humanDurationString(secondsPer.year * 2), "2y"));}, "humanDurationString precision: 2": function() {return humanDurationStringTester({precision: 2}, {1: "1s", 59: "59s", 60: "1m 0s", [secondsPer.hour]: "1h 0m", [secondsPer.hour + 29]: "1h 0m", [secondsPer.hour + 30]: "1h 1m", [secondsPer.hour + secondsPer.minute * 59]: "1h 59m", [2 * secondsPer.hour]: "2h 0m", [2 * secondsPer.hour + secondsPer.minute]: "2h 1m", [24 * secondsPer.hour]: "1d 0h", [2 * secondsPer.day]: "2d 0h", [2 * secondsPer.month]: "2mo 0d", [2 * secondsPer.year]: "2y 0mo"});}, "humanDurationString verbose: true": function() {return humanDurationStringTester({verbose: true}, {1: "1 second", 59: "59 seconds", 60: "1 minute"});}, niceDateString: function() {test("today", () => assert.eq(niceDateString(now, now), "today")); test("yesterday", () => assert.eq(niceDateString(now - secondsPer.day, now), "yesterday")); test("tomorrow", () => assert.eq(niceDateString(now + secondsPer.day, now), "tomorrow")); test("last month", () => assert.eq(niceDateString(now - secondsPer.month, now), "June 1")); test("next month", () => assert.eq(niceDateString(now + 31 * secondsPer.day, now), "August 1")); return test("last year", () => assert.eq(niceDateString(now - secondsPer.year, now), "July 2, 2023"));}, niceFullDateString: function() {return test("today", () => assert.eq(niceFullDateString(now), "12:35pm July 1, 2024"));}, niceTimeDetailsString: function() {return test("today", () => assert.eq(niceTimeDetailsString(now, now + secondsPer.month), "12:35pm July 1"));}, niceMonthYear: function() {return test("today", () => assert.eq(niceMonthYear(now), "July 2024"));}});});});
//# sourceMappingURL=TimePresenters.test.js.map
