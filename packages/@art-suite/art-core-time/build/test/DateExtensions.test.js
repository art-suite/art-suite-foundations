"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Date", "assert", "Math", "toMilliseconds", "toDate", "formatDate"], [global, require('./StandardImport')], (describe, test, Date, assert, Math, toMilliseconds, toDate, formatDate) => {let toSeconds; ({toSeconds} = require('../../build')); return describe({toSeconds: function() {test("should convert Date to seconds", () => {let date; date = new Date(); return assert.eq(toSeconds(date), date.getTime() / 1000);}); return test("with no argument", () => assert.lt(Math.abs(toSeconds() - Date.now() / 1000), .001));}, toMilliseconds: function() {test("should convert Date to milliseconds", () => {let date; date = new Date(); return assert.eq(toMilliseconds(date), date.getTime());}); test("with no argument", () => assert.lt(Math.abs(toMilliseconds() - Date.now()), 1000)); test("with milliseconds number", () => assert.eq(toMilliseconds(1234567890000), 1234567890000)); test("with seconds number", () => assert.eq(toMilliseconds(1234567), 1234567000)); test("with string", () => assert.eq(toMilliseconds("2025-01-02"), 1735772400000)); return test("with date", () => assert.eq(toMilliseconds(new Date("2025-01-02")), 1735776000000));}, toDate: function() {test("should convert seconds to Date", () => {let seconds; seconds = Date.now() / 1000; return assert.eq(toDate(seconds), new Date(seconds * 1000));}); return test("with no argument", () => assert.eq(toDate(), new Date()));}, formatDate: function() {test("should format Date", () => {let date; date = new Date("2025-01-02"); return assert.eq(formatDate(date, "yyyy-mm-dd"), "2025-01-02");}); test("with no argument", () => assert.match(formatDate(), /^\w{3} \w{3} \d{2} \d{4} \d{2}:\d{2}:\d{2}$/)); test("with just format", () => assert.match(formatDate("yyyy-mm-dd"), /^\d{4}-\d{2}-\d{2}$/)); return test("with format and date", () => assert.eq(formatDate("2025-01-02", "yyyy-mm-dd"), "2025-01-02"));}});});});
//# sourceMappingURL=DateExtensions.test.js.map
