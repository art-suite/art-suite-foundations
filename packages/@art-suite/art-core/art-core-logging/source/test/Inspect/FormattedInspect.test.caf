import &StandardImport, &ArtClassSystem

oneLine = (str) ->
  str.replace /\n/g, "\\n"

testFI = (input, out, altOut) ->
  test "formattedInspect #{inspectForTestString input}", ->
    o = formattedInspect input

    if isString out
      if altOut != o
        assert.eq o, out
    else
      assert.match o, out

testFIMultiLine = (input, out, maxLineLength = 0) ->
  test "formattedInspect #{inspectForTestString input}", ->
    o = stripTrailingWhitespace formattedInspect input, maxLineLength
    assert.eq o, out

testFormattedInspectString = (map) ->
  object v, k from map
    test oneLine("#{k} > #{v}"), ->
      assert.eq
        formattedInspect k
        v


testAlignTabs = (str, testStr, maxLineLength = 10000) ->
  test "#{inspectForTestString(str)}", ->
    assert.eq alignTabs(str, maxLineLength), testStr

describe
  unquoted: ->
    test "simple unquoted" ->
      out = formattedInspect
        foo: "bar"
        {} unquoted: true
      assert.eq
        out
        "" foo: bar

  failsafeInspect: ->
    test "failsafeInspect" ->
      assert.eq
        failsafeInspect a: 123
        """
          typeof: object
          constructor: Object
          keys: a

    test "trigger failsafeInspect" ->
      class Foo
        getInspectedObjects: -> throw new Error "failed to inspect"

      assert.eq
        formattedInspect new Foo
        """
          Error in formattedInspect: Error: failed to inspect
          typeof: object
          constructor: Foo
          keys: (no keys)

  singleLine: ->
    class Foo extends BaseClass
      @namespacePath: :MyNamespace.Foo

    testFI '"hi there"', "" '\"hi there\"'
    testFI "'hi there'", "" "\'hi there\'"

    testFI "\\", "" '\\'
    testFI "\0", "" "\\u0000"
    testFI "\b", "" "\\b"
    testFI "\f", "" "\\f"
    testFI "\r", "" "\\r"
    testFI "\t", "" "\\t"
    testFI
      """
        a
        \\ a
        \0 a
        \b a
        \f a
        \r a
        \v a
        \t a
        \u2028 a
        \u2029 a
        \u001b a
        a

      """
        """
          a
          \\\\ a
          \\0 a
          \\b a
          \\f a
          \\r a
          \\v a
          \\t a
          \\u2028 a
          \\u2029 a
          \\u001b a
          a

    testFI '"hi"', "" '\"hi\"'
    testFI "'hi'", "" "\'hi\'"
    testFI "hi", ":hi"
    testFI ((a)->123), 'a => 123', 'function(a) { return 123; }'
    testFI (a: 1), "a: 1"
    testFI /hi/, "/hi/"
    testFI
      inspect: -> :myInspectOutput
      ///
        inspect.*
        myInspectOutput

    testFI [], "[]"
    testFI ['string', foo: 'bar'], '[] :string, foo: :bar'
    testFI
      []
        foo: 'bar'
        :string

      """
        []
          foo: :bar
          :string

    testFI [1],   "" [] 1
    testFI [1,2], "" [] 1, 2
    testFI [(a: 1), 2],
      """
        []
          a: 1
          2

    testFI a:1, b:2, "a: 1, b: 2"
    testFI a:[1, 2], b:3,
      """
        a: [] 1, 2
        b: 3

    testFI [[1, 2], [3,4]],
      """
        []
          [] 1, 2
          [] 3, 4

    testFI
      a: a1: 1 a2: 2
      b: b1: 1 b2: 2
      """
        a: a1: 1, a2: 2
        b: b1: 1, b2: 2

    testFI
      a: a1: 1 a2: 2
      b: b1Long: 1 b2: 2
      """
        a: a1:     1, a2: 2
        b: b1Long: 1, b2: 2

    testFI [{a:1}, {b:2}],
      """
        []
          {} a: 1
          {} b: 2

    testFI
      "has:": 1
      "" "has:": 1

    testFI Foo, "class #{Foo.namespacePath}"
    testFI (new Foo), "<#{Foo.namespacePath}>"

  unsupportedObjects: ->

    test 'my Foo class - one property', ->
      class Foo
        constructor: ->
          @bar = 123

        ignoreMe: ->
      assert.eq
        formattedInspect bar: 123
        "bar: 123"

      assert.eq
        formattedInspect new Foo
        "Foo {} bar: 123"

    test 'my Foo class - multiple property', ->
      class Foo
        constructor: ->
          @bar =
          @baz =
          @bom = "" This is just fine, right? Just a little longer.

        ignoreMe: ->

      assert.eq
        formattedInspect {bar: 123}, maxLineLength: 80
        "bar: 123"

      assert.eq
        formattedInspect (new Foo), maxLineLength: 80
        """
          Foo {}
            bom: "This is just fine, right? Just a little longer."
            baz: "This is just fine, right? Just a little longer."
            bar: "This is just fine, right? Just a little longer."

    test 'my Foo class - with nesting 1', ->
      class Foo
        constructor: ->
          @bom = boo: :bar

      assert.eq
        formattedInspect (new Foo), maxLineLength: 80
        """ Foo {} bom: boo: :bar

    test 'my Foo class - with nesting 2', ->
      class Foo
        constructor: ->
          @bom = boo: :bar
          @bat = bow: :bay

      assert.eq
        formattedInspect (new Foo), maxLineLength: 80
        """
          Foo {}
            bom: boo: :bar
            bat: bow: :bay

    test 'my Foo class - with nesting 3', ->
      class Foo
        constructor: ->
          @justOne =
            boo: :bar
            bow: :bay

      assert.eq
        formattedInspect (new Foo), maxLineLength: 20
        """
          Foo {} justOne:
            boo: :bar
            bow: :bay\n

    test 'my Foo class - with nesting 4', ->
      class Foo
        constructor: ->
          @bom =
            boo: :bar
            bow: :bay
          @bom2 =
            boo: :bar
            bow: :bay

      assert.eq
        formattedInspect (new Foo), maxLineLength: 20
        """
          Foo {}
            bom:
              boo: :bar
              bow: :bay

            bom2:
              boo: :bar
              bow: :bay\n

  stackedSinglePropObjects: ->
    test 'simple' ->
      assert.eq
        formattedInspect
          a: b: c: (c1: 1 c2: 2), d: 3
        """
          a: b:
            c: c1: 1, c2: 2
            d: 3\n

    test 'withArray' ->
      assert.eq
        formattedInspect
          a: b: c: [] 1 2 3 4
          {} maxLineLength: 10
        """
          a: b: c: []
            1
            2
            3
            4\n

    test 'more' ->
      assert.eq
        formattedInspect
          a:
            b:
              b1: b11: 11 b12: b121: 121 b122: 122
              b2: b21: 21 b22: 22

        """
          a: b:
            b1: b11: 11, b12: b121: 121, b122: 122
            b2: b21: 21, b22: 22\n

    test 'too many' ->
      assert.eq
        formattedInspect
          a: b: c: d: e: f: g: h: i: j: k: l: m: n: o: 0
          {} maxLineLength: 10
        """
          a: b: c: d: e: f: g: h: i: j: k: l: m: n: o:
            0\n

        """
          Really, this should look more like this:
          a: b: c: d: e:
            f: g: h: i:
              j: k: l:
                m: n: o:
                  0

          (due to maxLineLength: 10)
          But that would require a larger refactor

  recursion: ->

    test :self-reference ->
      selfR = {}
      selfR.self = selfR
      assert.eq formattedInspect(selfR), "self: <<< self reference"

    test :parent-reference ->
      backR = child: {}
      backR.child.parent = backR
      assert.eq formattedInspect(backR), "child: parent: <<< parent reference"

    test :grandparent-reference ->
      backR = child: grandchild: {}
      backR.child.grandchild.grandparent = backR
      assert.eq formattedInspect(backR, maxLineLength: 1000), "child: grandchild: grandparent: <<< grandparent reference"

    test :grandparent-reference ->
      backR = child: grandchild: greatgrandchild: {}
      backR.child.grandchild.greatgrandchild.greatgrandparent = backR
      assert.eq formattedInspect(backR, maxLineLength: 1000), "child: grandchild: greatgrandchild: greatgrandparent: <<< great grandparent reference"

    test :grandparent-reference ->
      backR = child: grandchild: greatgrandchild: greatgreatgrandchild: {}
      backR.child.grandchild.greatgrandchild.greatgreatgrandchild.greatgreatgrandparent = backR
      assert.eq formattedInspect(backR, maxLineLength: 1000), "child: grandchild: greatgrandchild: greatgreatgrandchild: greatgreatgrandparent: <<< 4 generations back reference"

  strings:
    multiLine: ->
      testFormattedInspectString
        "\n":     "" "\\n"
        "\na":    "" "\\na"
        "a\n":    "" "a\\n"
        "\na\n":  "" "\\na\\n"

        "a\nb":
          """
            """
              a
              b

    multiLineStartingWhitespace: ->
      testFormattedInspectString
        "\na\nb":
          """
            """
              \\na
              b

        " a\nb":
          """
            """
              \\sa
              b

    multiLineTrailingWhitespace: ->
      testFormattedInspectString
        "a\nb\n":
          """
            """
              a
              b\\n

        "a\nb ":
          """
            """
              a
              b\\s

        "a \nb":
          """
            """
              a\\s
              b

  alignTabs: ->

    testAlignTabs
      """
        alice\t1
        bill\t2
      """
        alice 1
        bill  2

    testAlignTabs
      """
        Neptune:
          version:"1.10.2"
          Neptune.CaffeineMc:
            Neptune.CaffeineMc.Compilers:modules:\t"JavaScript"
            modules:\t"CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"
      """
        Neptune:
          version:"1.10.2"
          Neptune.CaffeineMc:
            Neptune.CaffeineMc.Compilers:modules: "JavaScript"
            modules:                              "CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"

    testAlignTabs
      """
        Neptune:
          version:"1.10.2"
          Neptune.CaffeineMc:
            Neptune.CaffeineMc.Compilers:modules:\t"JavaScript"
            modules:\t"CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"

          Neptune.Art:
            Neptune.Art.ClassSystem:modules:\t"BaseClass, BaseObject, WebpackHotLoader"
            Neptune.Art.StandardLib:
              Neptune.Art.StandardLib.Core:modules:\t"ArrayCompactFlatten, Merge, StringCase, Types"
              Neptune.Art.StandardLib.Inspect:
                Neptune.Art.StandardLib.Inspect.Inspected:modules:\t"Array, Core, Object, String"
                modules:\t"FormattedInspect, InspectedObjectLiteral, InspectedObjects, Inspector, Inspector2, PlainObjects"

              modules:\t"ArrayExtensions, AsyncExtensions, CallStack, Clone, CommonJs, Eq, ErrorWithInfo, Function, Iteration, Log, Map, MathExtensions, MinimalBaseObject, ObjectDiff, ObjectExtensions, ParseUrl, Promise, PromisedFileReader, Regexp, Ruby, ShallowClone, StringExtensions, Time, TypesExtended, Unique"

            Neptune.Art.ObjectTreeFactory:{}

          Neptune.BabelBridge:
      """
        Neptune:
          version:"1.10.2"
          Neptune.CaffeineMc:
            Neptune.CaffeineMc.Compilers:modules:                  "JavaScript"
            modules:                                               "CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"

          Neptune.Art:
            Neptune.Art.ClassSystem:modules:                       "BaseClass, BaseObject, WebpackHotLoader"
            Neptune.Art.StandardLib:
              Neptune.Art.StandardLib.Core:modules:                "ArrayCompactFlatten, Merge, StringCase, Types"
              Neptune.Art.StandardLib.Inspect:
                Neptune.Art.StandardLib.Inspect.Inspected:modules: "Array, Core, Object, String"
                modules: "FormattedInspect, InspectedObjectLiteral, InspectedObjects, Inspector, Inspector2, PlainObjects"

              modules: "ArrayExtensions, AsyncExtensions, CallStack, Clone, CommonJs, Eq, ErrorWithInfo, Function, Iteration, Log, Map, MathExtensions, MinimalBaseObject, ObjectDiff, ObjectExtensions, ParseUrl, Promise, PromisedFileReader, Regexp, Ruby, ShallowClone, StringExtensions, Time, TypesExtended, Unique"

            Neptune.Art.ObjectTreeFactory:{}

          Neptune.BabelBridge:
      150

  alignTabsColor: ->
    # baseline
    testAlignTabs
      "" a:\t1,\tb:\t2
      "" a: 1, b: 2

    # with color escape codes, still does it right
    testAlignTabs
      "" \u001b[34ma:\u001b[39m\t\u001b[33m1\u001b[39m,\t\u001b[34mb:\u001b[39m\t\u001b[33m2\u001b[39m
      "" \u001b[34ma:\u001b[39m \u001b[33m1\u001b[39m, \u001b[34mb:\u001b[39m \u001b[33m2\u001b[39m

  maxLineLength:
    simpleArray: ->
      testFIMultiLine [1, 2],
        """
          []
            1
            2
        "[] 1, 2".length - 1

      testFIMultiLine [1, 2], "[] 1, 2", "[] 1, 2".length

    objectArray: ->
      testFIMultiLine
        a: [1, 2]
        "a: [] 1, 2"
        "a: [] 1, 2".length

      testFIMultiLine
        a: [1, 2]
        """
          a:
            [] 1, 2

        "a: [] 1, 2".length-1

      testFIMultiLine
        a: [1, 2]
        """
          a: []
            1
            2

        5

    arrayObject: ->
      testFIMultiLine [ab: 1],
        "[] ab: 1"
        "[] ab: 1".length

      testFIMultiLine [ab: 1],
        """
          []
            ab: 1

        "[] ab: 1".length-1

      testFIMultiLine [ab: 1],
        """
          []
            ab:
              1

        4

    tabs: ->
      testFIMultiLine
        userA:
          name: "John Groovy Handcock"
          address: "home"
        userB:
          name: "Amy Mae"
          address: "home on the range"

        """
          userA: name: "John Groovy Handcock", address: :home
          userB: name: "Amy Mae",              address: "home on the range"

        65

      testFIMultiLine
        userA:
          name: "John Groovy Handcock"
          address: "home"
        userB:
          name: "Amy Mae"
          address: "home on the range"

        """
          userA: name: "John Groovy Handcock", address: :home
          userB: name: "Amy Mae", address: "home on the range"

        64

      testFIMultiLine
        a: 1, what: 4
        """
          a:    1
          what: 4
        10

      testFIMultiLine
        a:    b:    1
        what: abc:  4
        """
          a:    b:   1
          what: abc: 4

        100

  multiLine:
    array: ->

      testFIMultiLine [1, 2],
        """
          []
            1
            2


      testFIMultiLine [[1, 2], [3,4]],
        """
          []
            [] 1, 2
            [] 3, 4

        1000

    object: ->
      testFIMultiLine a:1, b:2,
        """
          a:
            1

          b:
            2

      testFIMultiLine a:{a1:1, a2:2}, b:{b1:1, b2:2},
        """
          a:
            a1: 1
            a2: 2

          b:
            b1: 1
            b2: 2

        10

    objectArrays: ->
      testFIMultiLine a:[1, 2], b:[3, 4],
        """
          a: []
            1
            2

          b: []
            3
            4

    objectArraysObjects: ->
      testFIMultiLine a:[{a1:1}, a2:2], b:[{b3:3}, b4:4],
        """
          a: []
            {} a1: 1
            {} a2: 2

          b: []
            {} b3: 3
            {} b4: 4

        10

    arrayObjects: ->
      testFIMultiLine [{a1:1, a2:2}, {b1:1, b2:2}],
        """
          []
            {}
              a1: 1
              a2: 2

            {}
              b1: 1
              b2: 2

        10

    arrayObjectsArrays: ->
      testFIMultiLine [{a1:[1,1], a2:[1,2]}, {b1:[2,1], b2:[2,2]}],
        """
          []
            {}
              a1: []
                1
                1

              a2: []
                1
                2

            {}
              b1: []
                2
                1

              b2: []
                2
                2


      testFIMultiLine [{a1:[1,1], a2:[1,2]}, {b1:[2,1], b2:[2,2]}],
        """
          []
            {}
              a1: [] 1, 1
              a2: [] 1, 2

            {}
              b1: [] 2, 1
              b2: [] 2, 2

        1000

    mixed: ->
      testFIMultiLine
        []
          :string
          foo: :bar
        """
          []
            :string
            foo: :bar

        12

      testFIMultiLine
        []
          inspectedObjectLiteral :myInspectedObjectLiteral
          foo: :bar

        """
          []
            myInspectedObjectLiteral
            foo: :bar

        12

      testFIMultiLine
        a: [1, 2], b: 2
        """
          a: []
            1
            2

          b: 2

        5

      testFIMultiLine
        getInspectedObjects:-> []
          :A
          foo: :B
          bar: :C

        """
          []
            :A
            foo: :B
            bar: :C

        11

      testFIMultiLine
        []
          foo: :A
          bar: :B
          :C
          fad: :D
          baz: :E
        """
          []
            foo: :A
            bar: :B

            :C
            fad: :D
            baz: :E
        11

  wordStrings: ->
    testFIMultiLine
      [] :abc
      """
        []
          :abc

  regressions: ->
    testFIMultiLine
      a: [1, 2]
      b: 3
      """
        a: []
          1
          2

        b:
          3

    testFIMultiLine
      [] {}, {}
      """
        []
          {}
          {}

    testFIMultiLine
      Neptune:
        version: :1.10.2
        Neptune.CaffeineMc:
          Neptune.CaffeineMc.Compilers: modules: :JavaScript
          modules:                      "CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"

        Neptune.Art:
          Neptune.Art.ClassSystem: modules: "BaseClass, BaseObject, WebpackHotLoader"
          Neptune.Art.StandardLib:
            Neptune.Art.StandardLib.Core: modules: "ArrayCompactFlatten, Merge, StringCase, Types"
            Neptune.Art.StandardLib.Inspect:
              Neptune.Art.StandardLib.Inspect.Inspected: modules: "Array, Core, Object, String"
              modules:                                   "FormattedInspect, InspectedObjectLiteral, InspectedObjects, Inspector, Inspector2, PlainObjects"

            modules:
              "ArrayExtensions, AsyncExtensions, CallStack, Clone, CommonJs, Eq, ErrorWithInfo, Function, Iteration, Log, Map, MathExtensions, MinimalBaseObject, ObjectDiff, ObjectExtensions, ParseUrl, Promise, PromisedFileReader, Regexp, Ruby, ShallowClone, StringExtensions, Time, TypesExtended, Unique"

          Neptune.Art.ObjectTreeFactory: {}

      # This is actually correct, even though it seems like nothing aligns nice. We need a better algorithm :).
      ## TODO: Nicer output might look like this:
        Neptune:
          version: :1.10.2
          Neptune.CaffeineMc:
            Neptune.CaffeineMc.Compilers:                  modules: :JavaScript
            modules:                                       "CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"

          Neptune.Art:
            Neptune.Art.ClassSystem:                       modules: "BaseClass, BaseObject, WebpackHotLoader"
            Neptune.Art.StandardLib:
              Neptune.Art.StandardLib.Core:                modules: "ArrayCompactFlatten, Merge, StringCase, Types"
              Neptune.Art.StandardLib.Inspect:
                Neptune.Art.StandardLib.Inspect.Inspected: modules: "Array, Core, Object, String"
                modules:                                   "FormattedInspect, InspectedObjectLiteral, InspectedObjects, Inspector, Inspector2, PlainObjects"

              modules:                                     "ArrayExtensions, AsyncExtensions, CallStack, Clone, CommonJs, Eq, ErrorWithInfo, Function, Iteration, Log, Map, MathExtensions, MinimalBaseObject, ObjectDiff, ObjectExtensions, ParseUrl, Promise, PromisedFileReader, Regexp, Ruby, ShallowClone, StringExtensions, Time, TypesExtended, Unique"

            Neptune.Art.ObjectTreeFactory:                 {}
      """
        Neptune:
          version: :1.10.2
          Neptune.CaffeineMc:
            Neptune.CaffeineMc.Compilers: modules: :JavaScript
            modules:                      "CafRepl, CaffeineMcParser, FileCompiler, Metacompiler, ModuleResolver, SourceRoots"

          Neptune.Art:
            Neptune.Art.ClassSystem: modules: "BaseClass, BaseObject, WebpackHotLoader"
            Neptune.Art.StandardLib:
              Neptune.Art.StandardLib.Core: modules: "ArrayCompactFlatten, Merge, StringCase, Types"
              Neptune.Art.StandardLib.Inspect:
                Neptune.Art.StandardLib.Inspect.Inspected: modules: "Array, Core, Object, String"
                modules:                                   "FormattedInspect, InspectedObjectLiteral, InspectedObjects, Inspector, Inspector2, PlainObjects"

              modules:
                "ArrayExtensions, AsyncExtensions, CallStack, Clone, CommonJs, Eq, ErrorWithInfo, Function, Iteration, Log, Map, MathExtensions, MinimalBaseObject, ObjectDiff, ObjectExtensions, ParseUrl, Promise, PromisedFileReader, Regexp, Ruby, ShallowClone, StringExtensions, Time, TypesExtended, Unique"

            Neptune.Art.ObjectTreeFactory: {}
      150


  regressionsInfiniteLoop: ->
    test 'infinite loop', ->
      out = formattedInspect data: '{"mappings":{"post_search":{"_parent":{"type":"topic"},"properties":{"topicId":{"type":"keyword"},"userId":{"type":"keyword"},"postOrder":{"type":"long"},"createdAt":{"type":"long"},"updatedAt":{"type":"long"},"isChapterStart":{"type":"boolean"},"caption":{"type":"text","analyzer":"english"},"tags":{"type":"text"},"mentions":{"type":"text"},"mediaMimeType":{"type":"keyword"},"mediaAspectRatio":{"type":"short"},"mediaUrl":{"type":"keyword","index":false},"mediaFocus":{"type":"object","index":false},"mediaDimensions":{"type":"object","index":false},"mediaColorInfo":{"type":"object","index":false},"templateUrl":{"type":"keyword","index":false},"templateType":{"type":"keyword"},"templateDropInCount":{"type":"byte"},"templateText":{"type":"text","analyzer":"english"},"templateDropInLocations":{"type":"nested","index":false},"templateUses":{"type":"integer"},"activityCount":{"type":"integer"},"lastActivityAt":{"type":"long"},"messageCount":{"type":"integer","index":false},"participantCount":{"type":"integer","index":false},"lastActiveUserId":{"type":"keyword","index":false},"lastMessageId":{"type":"keyword","index":false}}},"topic_search":{"_parent":{"type":"user"},"properties":{"title":{"type":"text","analyzer":"english"},"createdAt":{"type":"long"},"updatedAt":{"type":"long"},"lastPostCreatedAt":{"type":"long"},"lastPostId":{"type":"keyword"},"lastChapterPostId":{"type":"keyword"},"postCount":{"type":"integer"},"followerCount":{"type":"integer"},"activityCount":{"type":"long"},"messageCount":{"type":"long"},"isProfileTopic":{"type":"boolean"}}},"user_search":{"properties":{"displayName":{"type":"text","analyzer":"english"},"postCount":{"type":"integer"},"topicCount":{"type":"short"},"followerCount":{"type":"integer"},"messageCount":{"type":"integer"},"lastTopicCreatedAt":{"type":"long"},"lastPostCreatedAt":{"type":"long"},"profileTopicId":{"type":"keyword","index":false}}}},"settings":{}}'
      assert.eq
        out
        """
          data:
            '{\"mappings\":{\"post_search\":{\"_parent\":{\"type\":\"topic\"},\"properties\":{\"topicId\":{\"type\":\"keyword\"},\"userId\":{\"type\":\"keyword\"},\"postOrder\":{\"type\":\"long\"},\"createdAt\":{\"type\":\"long\"},\"updatedAt\":{\"type\":\"long\"},\"isChapterStart\":{\"type\":\"boolean\"},\"caption\":{\"type\":\"text\",\"analyzer\":\"english\"},\"tags\":{\"type\":\"text\"},\"mentions\":{\"type\":\"text\"},\"mediaMimeType\":{\"type\":\"keyword\"},\"mediaAspectRatio\":{\"type\":\"short\"},\"mediaUrl\":{\"type\":\"keyword\",\"index\":false},\"mediaFocus\":{\"type\":\"object\",\"index\":false},\"mediaDimensions\":{\"type\":\"object\",\"index\":false},\"mediaColorInfo\":{\"type\":\"object\",\"index\":false},\"templateUrl\":{\"type\":\"keyword\",\"index\":false},\"templateType\":{\"type\":\"keyword\"},\"templateDropInCount\":{\"type\":\"byte\"},\"templateText\":{\"type\":\"text\",\"analyzer\":\"english\"},\"templateDropInLocations\":{\"type\":\"nested\",\"index\":false},\"templateUses\":{\"type\":\"integer\"},\"activityCount\":{\"type\":\"integer\"},\"lastActivityAt\":{\"type\":\"long\"},\"messageCount\":{\"type\":\"integer\",\"index\":false},\"participantCount\":{\"type\":\"integer\",\"index\":false},\"lastActiveUserId\":{\"type\":\"keyword\",\"index\":false},\"lastMessageId\":{\"type\":\"keyword\",\"index\":false}}},\"topic_search\":{\"_parent\":{\"type\":\"user\"},\"properties\":{\"title\":{\"type\":\"text\",\"analyzer\":\"english\"},\"createdAt\":{\"type\":\"long\"},\"updatedAt\":{\"type\":\"long\"},\"lastPostCreatedAt\":{\"type\":\"long\"},\"lastPostId\":{\"type\":\"keyword\"},\"lastChapterPostId\":{\"type\":\"keyword\"},\"postCount\":{\"type\":\"integer\"},\"followerCount\":{\"type\":\"integer\"},\"activityCount\":{\"type\":\"long\"},\"messageCount\":{\"type\":\"long\"},\"isProfileTopic\":{\"type\":\"boolean\"}}},\"user_search\":{\"properties\":{\"displayName\":{\"type\":\"text\",\"analyzer\":\"english\"},\"postCount\":{\"type\":\"integer\"},\"topicCount\":{\"type\":\"short\"},\"followerCount\":{\"type\":\"integer\"},\"messageCount\":{\"type\":\"integer\"},\"lastTopicCreatedAt\":{\"type\":\"long\"},\"lastPostCreatedAt\":{\"type\":\"long\"},\"profileTopicId\":{\"type\":\"keyword\",\"index\":false}}}},\"settings\":{}}'\n
