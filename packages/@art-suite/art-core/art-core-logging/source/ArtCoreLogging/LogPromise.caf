import &StandardImport, &Log

logPromise: (context, p) ->
  unless p?
    p = context
    context = "(context not specified)"
  log logPromise_start: context
  startTime = currentSecond()
  Promise.then ->
    if isFunction p
      p()
    else
      p
  .tap (result)     -> log logPromise_success: {context, result, seconds: currentSecond() - startTime }
  .tapCatch (error) -> log.error logPromise_error: {context, error, seconds: currentSecond() - startTime}

logRejectedPromises:  (context, p) ->
  {log, currentSecond} = namespace
  startTime = currentSecond()
  Promise.then ->
    if isFunction p
      p()
    else
      p
  .tapCatch (error) -> log.error logRejectedPromises: {context, error, seconds: currentSecond() - startTime}

