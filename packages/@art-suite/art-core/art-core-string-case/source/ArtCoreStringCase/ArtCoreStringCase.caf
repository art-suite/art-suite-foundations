import &@ArtSuite/ArtCoreTypes

findWordsRegExp = /[a-zA-Z][a-zA-Z0-9]*|[0-9]+/g
findCapStartWordsRegExp = /(?:[A-Z]{2,}(?![a-z]))|[A-Z][a-z0-9]*|[a-z0-9]+/g

{}
  ### getCodeWords
    INv1: <String>
    INv2: <Array* <String>>
    OUT: <Array <String>>
  getCodeWords = (str) -> compactFlatten
    switch
    when isArray str then str
    when isString(str) && findWordsRegExp.test str
      array word in str.match findWordsRegExp with word.match findCapStartWordsRegExp
    else []

  codeWords = getCodeWords

  lowerCase = (str) -> str?.toLocaleLowerCase()
  upperCase = (str) -> str?.toLocaleUpperCase()

  capitalize =   (str) => upperCase(str.charAt 0) + str.slice 1
  decapitalize = (str) => lowerCase(str.charAt 0) + str.slice 1

  getLowerCaseCodeWords   = (str) => array word in getCodeWords str with lowerCase word
  getUpperCaseCodeWords   = (str) => array word in getCodeWords str with upperCase word
  getCapitalizedCodeWords = (str) => array word in getCodeWords str with capitalize lowerCase word

  upperCamelCase          = (str, joiner = '')  => (array word in getLowerCaseCodeWords str with capitalize word).join joiner
  lowerCamelCase          = (str, joiner = '')  => decapitalize upperCamelCase str, joiner

  snakeCase:               (str, joiner = "_") => getLowerCaseCodeWords(str).join joiner
  upperSnakeCase:          (str, joiner = "_") => getUpperCaseCodeWords(str).join joiner
  dashCase:                (str, joiner = "-") => getLowerCaseCodeWords(str).join joiner
  capitalizedDashCase:     (str, joiner = "-") => getCapitalizedCodeWords(str).join joiner
