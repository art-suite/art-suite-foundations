"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {let Math = global.Math, objectKeyCount = global.objectKeyCount, isString = global.isString, isNumber = global.isNumber, isDate = global.isDate, floatTrue0 = global.floatTrue0, Array = global.Array, Object = global.Object, Function = global.Function, remove = global.remove, _compareArray, _compareObject, _compare; return {_compareArray: _compareArray = (a, b, recursionBlockArray, compareFunctionsAsStrings) => {let aLength, bLength, to, i1, by; aLength = a.length; bLength = b.length; to = Math.min(aLength, bLength); i1 = 0; by = (i1 < to) ? 1 : -1; while (by > 0 && i1 <= to || by < 0 && i1 >= to) {let i, av, bv, val; i = i1; av = a[i]; bv = b[i]; if (0 !== (val = _compare(av, bv, recursionBlockArray, compareFunctionsAsStrings))) {return val;}; i1 += by;}; to; return aLength - bLength;}, _compareObject: _compareObject = (a, b, recursionBlockArray, compareFunctionsAsStrings) => {let aLength, compared, found; aLength = 0; compared = 0; found = Caf.find(a, (k, av) => {let bv, val; aLength++; av = a[k]; bv = b[k]; return (bv !== undefined || b.hasOwnProperty(k)) ? (compared++, (0 !== (val = _compare(av, bv, recursionBlockArray, compareFunctionsAsStrings))) ? val : undefined) : undefined;}); if (found != null) {return found;}; return (aLength === compared && compared === objectKeyCount(b)) ? 0 : NaN;}, _compare: _compare = (a, b, recursionBlockArray, compareFunctionsAsStrings) => {let _constructor; if (a === b) {return 0;}; if (a != null && b != null && a.constructor === (_constructor = b.constructor)) {if (isString(a)) {return a.localeCompare(b);}; if (isNumber(a) || isDate(a)) {return floatTrue0(a - b);}; if (recursionBlockArray) {if (Caf.in(a, recursionBlockArray) || Caf.in(b, recursionBlockArray)) {return 0;}; recursionBlockArray.push(a); recursionBlockArray.push(b);}; if (a.compare) {return a.compare(b, recursionBlockArray);}; if (_constructor === Array) {return _compareArray(a, b, recursionBlockArray, compareFunctionsAsStrings);}; if (_constructor === Object) {return _compareObject(a, b, recursionBlockArray, compareFunctionsAsStrings);}; if (compareFunctionsAsStrings && _constructor === Function) {return `${Caf.toString(a)}`.localeCompare(`${Caf.toString(b)}`);}; if (a.eq && a.eq(b, recursionBlockArray)) {return 0;}; if (recursionBlockArray) {remove(recursionBlockArray, recursionBlockArray.length - 2, 2);};}; return NaN;}};});
//# sourceMappingURL=CompareCore.js.map
