"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Error", "typesComparable"], [global, require('./helper'), require('./CompareCore')], (Error, typesComparable) => {let throwInequalityError; throwInequalityError = function(a, b) {return (() => {throw new Error(`Value types are not compatible for inequality tests. a: ${Caf.toString(Caf.exists(a) && a.constructor.name)}, b: ${Caf.toString(Caf.exists(b) && b.constructor.name)}`);})();}; return [{gt: function(a, b) {let s; return (a != null && b != null) ? (s = typesComparable(a, b), s && a > b || ((s && a <= b) ? false : a.gt(b))) : throwInequalityError(a, b);}, lt: function(a, b) {let s; return (a != null && b != null) ? (s = typesComparable(a, b), s && a < b || ((s && a >= b) ? false : a.lt(b))) : throwInequalityError(a, b);}, gte: function(a, b) {let s; return (a != null && b != null) ? (s = typesComparable(a, b), s && a >= b || ((s && a < b) ? false : a.gte(b))) : throwInequalityError(a, b);}, lte: function(a, b) {let s; return (a != null && b != null) ? (s = typesComparable(a, b), s && a <= b || ((s && a > b) ? false : a.lte(b))) : throwInequalityError(a, b);}}, require('./Eq')];});});
//# sourceMappingURL=ArtCoreEquality.js.map
