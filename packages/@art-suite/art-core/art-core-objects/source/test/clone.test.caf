import &StandardImport

describe
  clone: ->

    test "clone null", ->
      assert.equal null, clone(null)

    test "clone undefined", ->
      assert.equal undefined, clone(undefined)

    test "clone 123", ->
      assert.equal 123, clone(123)

    test "clone 'hi'", ->
      assert.equal 'hi', clone('hi')

    test "clone f()", ->
      f = (x)-> x*x
      assert.equal f, clone(f)

    test "clone [1, 2, 3] is the same contents", ->
      c = clone(a=[1, 2, 3])
      assert.eq [1, 2, 3], c

    test "clone [1, 2, 3] is not the same object", ->
      a = [1, 2, 3]
      b = clone a
      a[3] = 4
      assert.notDeepEqual a, b

    test "clone {a:1, b:2} is the same contents", ->
      assert.deepEqual {a:1, b:2}, clone({a:1, b:2})

    test "clone {a:1, b:2} is not the same object", ->
      a = {a:1, b:2}
      b = clone a
      a.c = 3
      assert.notDeepEqual a, b

    test "clone recursive", ->
      foo = a:1, b:2
      bar = c:3, d:4
      foo.bar = bar
      bar.foo = foo

      assert.equal inspect(foo), inspect(clone(foo))

    test "clone recursive arrays", ->
      foo = [1, 2]
      foo[2] = foo
      bar = clone foo
      assert.equal foo[2], foo
      assert.equal bar[2], bar

    test "clone same object twice", ->
      foo = a:1, b:2
      bar = c:3, d:4
      foo.bar = bar
      foo.baz = bar

      cloned = clone foo
      assert.equal inspect(foo), inspect(cloned)

      assert.equal foo.bar, foo.baz
      foo.bar.c = 100
      assert.equal 100, foo.baz.c
