"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "clone", "inspect"], [global, require('./StandardImport')], (describe, test, assert, clone, inspect) => {return describe({clone: function() {test("clone null", () => assert.equal(null, clone(null))); test("clone undefined", () => assert.equal(undefined, clone(undefined))); test("clone 123", () => assert.equal(123, clone(123))); test("clone 'hi'", () => assert.equal("hi", clone("hi"))); test("clone f()", () => {let f; f = (x) => x * x; return assert.equal(f, clone(f));}); test("clone [1, 2, 3] is the same contents", () => {let c, a; c = clone(a = [1, 2, 3]); return assert.eq([1, 2, 3], c);}); test("clone [1, 2, 3] is not the same object", () => {let a, b; a = [1, 2, 3]; b = clone(a); a[3] = 4; return assert.notDeepEqual(a, b);}); test("clone {a:1, b:2} is the same contents", () => assert.deepEqual({a: 1, b: 2}, clone({a: 1, b: 2}))); test("clone {a:1, b:2} is not the same object", () => {let a, b; a = {a: 1, b: 2}; b = clone(a); a.c = 3; return assert.notDeepEqual(a, b);}); test("clone recursive", () => {let foo, bar; foo = {a: 1, b: 2}; bar = {c: 3, d: 4}; foo.bar = bar; bar.foo = foo; return assert.equal(inspect(foo), inspect(clone(foo)));}); test("clone recursive arrays", () => {let foo, bar; foo = [1, 2]; foo[2] = foo; bar = clone(foo); assert.equal(foo[2], foo); return assert.equal(bar[2], bar);}); return test("clone same object twice", () => {let foo, bar, cloned; foo = {a: 1, b: 2}; bar = {c: 3, d: 4}; foo.bar = bar; foo.baz = bar; cloned = clone(foo); assert.equal(inspect(foo), inspect(cloned)); assert.equal(foo.bar, foo.baz); foo.bar.c = 100; return assert.equal(100, foo.baz.c);});}});});});
//# sourceMappingURL=clone.test.js.map
