"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "objectKeyCount", "objectDiff", "assert", "describe", "inspect", "plainObjectsDeepEq", "objectDiffReport"], [global, require('./StandardImport')], (test, objectKeyCount, objectDiff, assert, describe, inspect, plainObjectsDeepEq, objectDiffReport) => {let added, removed, changed, unchanged, add, remove, change, noChange, diffTest, diffTestSuite; added = removed = changed = unchanged = 0; add = function() {return added++;}; remove = function() {return removed++;}; change = function() {return changed++;}; noChange = function() {return unchanged++;}; diffTest = function(name, newObj, oldObj, expectedAdded, expectedRemoved, expectedChanged, expectedUnchanged, options = {}) {let useOldObjLengthHint, eqF; ({useOldObjLengthHint, eqF} = options); return test(name, () => {let o2LengthHint; o2LengthHint = useOldObjLengthHint ? objectKeyCount(oldObj) : null; added = removed = changed = unchanged = 0; objectDiff(newObj, oldObj, add, remove, change, noChange, eqF, o2LengthHint); assert.eq(expectedAdded, added, "added"); assert.eq(expectedRemoved, removed, "removed"); assert.eq(expectedChanged, changed, "changed"); return assert.eq(expectedUnchanged, unchanged, "unchanged");});}; diffTestSuite = function(name, newObj, oldObj, expectedAdded, expectedRemoved, expectedChanged, expectedUnchanged) {return describe({[`${Caf.toString(name)}: newObj: ${Caf.toString(inspect(newObj))}, oldObj: ${Caf.toString(inspect(oldObj))}`]: () => {diffTest("basic", newObj, oldObj, expectedAdded, expectedRemoved, expectedChanged, expectedUnchanged); diffTest("oldObj-length-hint", newObj, oldObj, expectedAdded, expectedRemoved, expectedChanged, expectedUnchanged, {useOldObjLengthHint: true}); return diffTest("compare values with plainObjectsDeepEq", newObj, oldObj, expectedAdded, expectedRemoved, expectedChanged, expectedUnchanged, {eqF: plainObjectsDeepEq});}});}; diffTestSuite("null oldObj", {a: 1, b: 2}, null, 2, 0, 0, 0); diffTestSuite("same", {a: 1, b: 2}, {a: 1, b: 2}, 0, 0, 0, 2); diffTestSuite("added", {a: 1, b: 2, c: 3}, {a: 1, b: 2}, 1, 0, 0, 2); diffTestSuite("removed", {a: 1, b: 2}, {a: 1, b: 2, c: 3}, 0, 1, 0, 2); diffTestSuite("changed", {a: 1, b: 2}, {a: 1, b: 3}, 0, 0, 1, 1); diffTestSuite("added, removed and changed", {a: 1, b: 2, c: 3}, {a: 1, b: 3, d: 4}, 1, 1, 1, 1); return test("objectDiffReport", function() {return assert.deepEqual(objectDiffReport({a: 1, b: 2}, {a: 1, b: 3, c: 3}), {added: {}, changed: {b: {newItem: 2, oldItem: 3}}, removed: {c: 3}});});});});
//# sourceMappingURL=objectDiff.test.js.map
