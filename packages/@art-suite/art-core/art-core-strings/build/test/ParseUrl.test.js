"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "parseQuery", "generateQuery", "urlJoin", "urlResolve", "parseUrl", "sameOrigin"], [global, require('./StandardImport')], (describe, test, assert, parseQuery, generateQuery, urlJoin, urlResolve, parseUrl, sameOrigin) => {return describe({parseQuery: function() {let testParseQuery; testParseQuery = (input, expected) => test(input, () => assert.eq(parseQuery(input), expected)); testParseQuery("?foo", {foo: true}); testParseQuery("?foo=hi", {foo: "hi"}); testParseQuery("foo=hi", {foo: "hi"}); testParseQuery("?foo=hi&bar=bye", {foo: "hi", bar: "bye"}); return testParseQuery("?foo=hi%20there", {foo: "hi there"});}, generateQuery: function() {return test("generateQuery", () => assert.eq(generateQuery({isNull: null, isUndefined: undefined, isFalse: false, isTrue: true, isEmpty: "", isNotEmpty: "abc"}), "isFalse=false&isTrue=true&isEmpty=&isNotEmpty=abc"));}, "urlJoin and urlResolve are the same": function() {let tests; tests = [["http://foo.com/bob", "http://foo.com/", "bob"], ["http://foo.com/bob", "http://foo.com/", "/bob"], ["http://foo.com/bob", "http://foo.com", "/bob"], ["http://foo.com/bob", "http://foo.com", "bob"], ["http://foo.com/bob/", "http://foo.com", "bob/"], ["http://foo.com/bob/foo", "http://foo.com", "bob/foo"], ["http://foo.com/foo/bob", "http://foo.com/foo", "bob"]]; return Caf.each2(tests, ([out, uri, path]) => test(`${Caf.toString(uri)} + ${Caf.toString(path)} = ${Caf.toString(out)}`, () => {assert.eq(out, urlJoin(uri, path)); return assert.eq(out, urlResolve(uri, path));}));}, "urlJoin differs": function() {let tests; tests = [["http://foo.com/foo/bob", "http://foo.com/foo", "/bob"], ["http://foo.com/foo/bob", "http://foo.com/foo/", "/bob"]]; return Caf.each2(tests, ([out, uri, path]) => test(`${Caf.toString(uri)} + ${Caf.toString(path)} = ${Caf.toString(out)}`, () => assert.eq(out, urlJoin(uri, path))));}, "urlResolve differs": function() {let tests; tests = [["http://foo.com/bob", "http://foo.com/foo", "/bob"], ["http://foo.com/bob", "http://foo.com/foo/", "/bob"]]; return Caf.each2(tests, ([out, uri, path]) => test(`${Caf.toString(uri)} + ${Caf.toString(path)} = ${Caf.toString(out)}`, () => assert.eq(out, urlResolve(uri, path))));}, parseUrl: function() {test("just domain", () => {let a; a = parseUrl("myDomain.com"); return assert.eq(a, {protocol: undefined, username: undefined, password: undefined, hostWithPort: "mydomain.com", host: "mydomain.com", port: undefined, pathName: undefined, path: undefined, fileName: undefined, query: undefined, anchor: undefined});}); return test("with everything", () => {let a; a = parseUrl("ftp://myName:myPassword@mySubDomain.myDomain.com:8080/myPath/myFile.html?param1=foo,bar&param2=baz#myAnchor"); return assert.eq(a, {protocol: "ftp", username: "myName", password: "myPassword", hostWithPort: "mysubdomain.mydomain.com:8080", host: "mysubdomain.mydomain.com", port: "8080", pathName: "/myPath/myFile.html", path: "/myPath", fileName: "myFile.html", query: {param1: "foo,bar", param2: "baz"}, anchor: "myAnchor"});});}, sameOrigin: function() {let tests; tests = [[true, "/", "http://foo.com"], [true, "/foo", "http://foo.com"], [true, "/", "http://foo.com:8080"], [true, "http://foo.com/anything", "http://foo.com"], [true, "https://foo.com/anything", "https://foo.com"], [true, "http://foo.com/anything", "http://foo.com/anythingelse"], [false, "http://foo.com/anything", "https://foo.com"], [false, "http://foo.com/anything", "http://bar.com"], [false, "http://foo.com/anything", "http://foo.com:8080"], [false, "http://foo.com/anything", "http://bar.com"]]; return Caf.each2(tests, ([result, url, origin]) => test(`${Caf.toString(result)}: sameOrigin '${Caf.toString(url)}', '${Caf.toString(origin)}'`, () => assert.eq(result, sameOrigin(url, origin))));}});});});
//# sourceMappingURL=ParseUrl.test.js.map
