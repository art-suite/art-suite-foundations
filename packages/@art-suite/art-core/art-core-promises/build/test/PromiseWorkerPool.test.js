"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "PromiseWorkerPool", "assert", "timeout", "currentSecond", "Error"], [global, require('./StandardImport')], (describe, test, PromiseWorkerPool, assert, timeout, currentSecond, Error) => {return describe({basics: function() {test("create", () => new PromiseWorkerPool); return test("queue 1", () => {let workCount, pwp; workCount = 0; return (pwp = new PromiseWorkerPool).queue(() => workCount++).then((results) => {assert.eq(workCount, 1); return assert.eq(results, [0]);});});}, async: function() {test("queue 1", () => {let workCount, pwp; workCount = 0; return (pwp = new PromiseWorkerPool).queue(() => timeout(50, () => workCount++)).then((results) => {assert.eq(workCount, 1); return assert.eq(results, [0]);});}); test("queue 9", () => {let workCount, pwp, i1; workCount = 0; pwp = new PromiseWorkerPool; i1 = 0; while (i1 < 9) {let i; i = i1; pwp.queue(() => timeout(50, () => workCount++)); i1++;}; 9; return pwp.start().then((results) => {assert.eq(results, [0, 1, 2, 3, 4, 5, 6, 7, 8]); return assert.eq(workCount, 9);});}); test("queue 11", () => {let workCount, pwp, i1; workCount = 0; pwp = new PromiseWorkerPool; i1 = 0; while (i1 < 11) {let i; i = i1; pwp.queue(() => timeout(10, () => workCount++)); i1++;}; 11; return pwp.start().then((results) => {let into, i2; assert.eq(results, (into = [], i2 = 0, (() => {while (i2 < 11) {let i; i = i2; into.push(i); i2++;};})(), into)); return assert.eq(workCount, 11);});}); test("queue 20, 5 workers", () => {let workCount, pwp, start, i1; workCount = 0; pwp = new PromiseWorkerPool(5); start = currentSecond(); i1 = 0; while (i1 < 20) {let i; i = i1; pwp.queue(() => timeout(50, () => workCount++)); i1++;}; 20; return pwp.then((results) => {let end, delta, info, into, i2; assert.eq(results, (into = [], i2 = 0, (() => {while (i2 < 20) {let i; i = i2; into.push(i); i2++;};})(), into)); assert.eq(workCount, 20); end = currentSecond(); delta = (end - start) * 1000 | 0; assert.gte(delta, 199, info = "20 jobs * 50ms each / 5 workers >> should be between 200 and 300 ms + rounding error"); return assert.lte(delta, 301, info);});}); return test("queue 20, 10 workers", () => {let workCount, pwp, start, i1; workCount = 0; pwp = new PromiseWorkerPool; start = currentSecond(); i1 = 0; while (i1 < 20) {let i; i = i1; pwp.queue(() => timeout(50, () => workCount++)); i1++;}; 20; return pwp.then((results) => {let end, delta, info, into, i2; assert.eq(results, (into = [], i2 = 0, (() => {while (i2 < 20) {let i; i = i2; into.push(i); i2++;};})(), into)); assert.eq(workCount, 20); end = currentSecond(); delta = (end - start) * 1000 | 0; assert.gte(delta, 99, info = "20 jobs * 50ms each / 10 workers >> should be between 100 and 200 ms + rounding error"); return assert.lte(delta, 201, info);});});}, errors: function() {test("catch: queue 11, fail on 5", () => {let workCount, pwp, i1; workCount = 0; pwp = new PromiseWorkerPool; i1 = 0; while (i1 < 11) {let i; i = i1; pwp.queue(() => timeout(10, () => (5 === workCount++) ? (() => {throw new Error("fake-fail because we hate 5s!");})() : undefined)); i1++;}; 11; return pwp.catch((rejectedWith) => assert.match(rejectedWith.message, /fake-fail/));}); return test("then-catch: 11, fail on 5", () => {let workCount, pwp, i1; workCount = 0; pwp = new PromiseWorkerPool; i1 = 0; while (i1 < 11) {let i; i = i1; pwp.queue(() => timeout(10, () => (5 === workCount++) ? (() => {throw new Error("fake-fail because we hate 5s!");})() : undefined)); i1++;}; 11; return pwp.then(() => (() => {throw new Error("should not succeed");})(), (rejectedWith) => assert.match(rejectedWith.message, /fake-fail/));});}});});});
//# sourceMappingURL=PromiseWorkerPool.test.js.map
