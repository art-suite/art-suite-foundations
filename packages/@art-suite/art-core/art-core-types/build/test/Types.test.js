"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "exists", "hasProperties", "hasOwnProperties", "isPromise", "Promise", "isArrayIterable", "Int8Array", "isNull", "isNotNull", "isNullish", "isNotNullish", "isString", "isPlainArray", "isArray", "isFunction", "isDate", "Date", "isPlainObject", "isClass", "isObject", "objectName", "present", "gt", "lt", "gte", "lte", "Object", "BaseClass", "getSuperclass", "getSuper", "Function"], [global, require('./StandardImport'), require('art-class-system')], (describe, test, assert, exists, hasProperties, hasOwnProperties, isPromise, Promise, isArrayIterable, Int8Array, isNull, isNotNull, isNullish, isNotNullish, isString, isPlainArray, isArray, isFunction, isDate, Date, isPlainObject, isClass, isObject, objectName, present, gt, lt, gte, lte, Object, BaseClass, getSuperclass, getSuper, Function) => {return describe({exists: function() {test("exists null", () => assert.eq(false, exists(null))); test("exists undefined", () => assert.eq(false, exists(undefined))); test("exists false", () => assert.eq(true, exists(false))); test("exists 0", () => assert.eq(true, exists(0))); return test("exists ''", () => assert.eq(true, exists("")));}, hasProperties: function() {let foo, Foo, bar; foo = new (Foo = Caf.defClass(class Foo extends Object {}, function(Foo, classSuper, instanceSuper) {this.prototype.baz = 123;})); bar = new Foo; bar.bud = 444; test("hasProperties null", () => assert.eq(false, hasProperties(null))); test("hasProperties {}", () => assert.eq(false, hasProperties({}))); test("hasProperties []", () => assert.eq(false, hasProperties([]))); test("hasProperties class instance with no properties", () => assert.eq(true, hasProperties(foo))); test("hasProperties class instance with properties", () => assert.eq(true, hasProperties(bar))); test("hasOwnProperties null", () => assert.eq(false, hasOwnProperties(null))); test("hasOwnProperties {}", () => assert.eq(false, hasOwnProperties({}))); test("hasOwnProperties []", () => assert.eq(false, hasOwnProperties([]))); test("hasOwnProperties class instance with no properties", () => assert.eq(false, hasOwnProperties(foo))); return test("hasOwnProperties class instance with properties", () => assert.eq(true, hasOwnProperties(bar)));}, isPromise: function() {test("isPromise Promise.resolve()", () => assert.eq(true, isPromise(Promise.resolve()))); test("isPromise Promise.reject()", () => {let p; assert.eq(true, isPromise(p = Promise.reject())); return p.catch(() => {});}); test("isPromise 1 is false", () => assert.eq(false, isPromise(1))); test("isPromise '' is false", () => assert.eq(false, isPromise(""))); test("isPromise {} is false", () => assert.eq(false, isPromise({}))); return test("isPromise Promise is false", () => assert.eq(false, isPromise(Promise)));}, isArrayIterable: function() {test("isArrayIterable [] is true", () => assert.eq(true, isArrayIterable([]))); test("isArrayIterable Int8Array is true", () => assert.eq(true, isArrayIterable(new Int8Array(4)))); test("isArrayIterable string is true", () => {assert.eq(true, isArrayIterable("hi")); return assert.eq(true, isArrayIterable(""));}); test("isArrayIterable {length: 10} is true", () => assert.eq(true, isArrayIterable({length: 10}))); return test("isArrayIterable - non arrays are false", () => {assert.eq(false, isArrayIterable()); assert.eq(false, isArrayIterable(null)); assert.eq(false, isArrayIterable(undefined)); assert.eq(false, isArrayIterable({})); return assert.eq(false, isArrayIterable(123));});}, isNull: function() {test("isNull null is true", () => assert.eq(true, isNull(null))); test("isNull undefined is false", () => assert.eq(false, isNull(undefined))); test("isNull 0 is false", () => assert.eq(false, isNull(0))); test("isNull '' is false", () => assert.eq(false, isNull(""))); return test("isNull 'hi' is false", () => assert.eq(false, isNull("hi")));}, isNotNull: function() {test("isNotNull null is false", () => assert.eq(false, isNotNull(null))); test("isNotNull undefined is false", () => assert.eq(true, isNotNull(undefined))); test("isNotNull 0 is true", () => assert.eq(true, isNotNull(0))); test("isNotNull '' is true", () => assert.eq(true, isNotNull(""))); return test("isNotNull 'hi' is true", () => assert.eq(true, isNotNull("hi")));}, isNullish: function() {test("isNullish null is true", () => assert.eq(true, isNullish(null))); test("isNullish undefined is true", () => assert.eq(true, isNullish(undefined))); test("isNullish 0 is false", () => assert.eq(false, isNullish(0))); test("isNullish '' is false", () => assert.eq(false, isNullish(""))); return test("isNullish 'hi' is false", () => assert.eq(false, isNullish("hi")));}, isNotNullish: function() {test("isNotNullish null is false", () => assert.eq(false, isNotNullish(null))); test("isNotNullish undefined is false", () => assert.eq(false, isNotNullish(undefined))); test("isNotNullish 0 is true", () => assert.eq(true, isNotNullish(0))); test("isNotNullish '' is true", () => assert.eq(true, isNotNullish(""))); return test("isNotNullish 'hi' is true", () => assert.eq(true, isNotNullish("hi")));}, isString: function() {test("isString 'foo' is true", () => {assert.eq(true, isString("foo")); return assert.eq(true, isString(""));}); return test("isString - non strings are false", () => {assert.eq(false, isString()); assert.eq(false, isString(null)); assert.eq(false, isString(undefined)); assert.eq(false, isString(123)); assert.eq(false, isString({})); assert.eq(false, isString([])); return assert.eq(false, isString(() => {}));});}, isPlainArray: function() {test("isPlainArray is isArray", () => assert.eq(isPlainArray, isArray)); test("isPlainArray []", () => assert.eq(true, isPlainArray([]))); return test("isPlainArray - false values", () => {assert.eq(false, isPlainArray({})); assert.eq(false, isPlainArray(123)); assert.eq(false, isPlainArray("")); assert.eq(false, isPlainArray("abc")); assert.eq(false, isPlainArray(new Int8Array(4))); assert.eq(false, isPlainArray(false)); assert.eq(false, isPlainArray(null)); return assert.eq(false, isPlainArray(undefined));});}, isFunction: function() {test("isFunction(->) is true", () => assert.eq(true, isFunction(() => {}))); test("isFunction(class Foo) is true", () => {let Foo; return assert.eq(true, isFunction(Foo = Caf.defClass(class Foo extends Object {})));}); return test("isFunction - non functions are false", () => {assert.eq(false, isFunction()); assert.eq(false, isFunction(null)); assert.eq(false, isFunction("")); assert.eq(false, isFunction(undefined)); assert.eq(false, isFunction(123)); assert.eq(false, isFunction({})); assert.eq(false, isFunction([])); return assert.eq(false, isFunction("foo"));});}, isDate: function() {test("isDate new Date is true", () => assert.eq(true, isDate(new Date))); test("isDate '' is false", () => assert.eq(false, isDate(""))); return test("isDate '07-04-2018' is false", () => assert.eq(false, isDate("07-04-2018")));}, isPlainObject: function() {test("isPlainObject {} is true", () => assert.eq(true, isPlainObject({}))); test("isPlainObject(new class Foo) is false", () => {let Foo; return assert.eq(false, isPlainObject(new (Foo = Caf.defClass(class Foo extends Object {}))));}); return test("isPlainObject - non plain objects are false", () => {assert.eq(false, isPlainObject()); assert.eq(false, isPlainObject(null)); assert.eq(false, isPlainObject(undefined)); assert.eq(false, isPlainObject(123)); assert.eq(false, isPlainObject("foo")); assert.eq(false, isPlainObject("")); assert.eq(false, isPlainObject([])); return assert.eq(false, isPlainObject(() => {}));});}, isClass: function() {test("isClass empty-class is false - only class we can't detect correctly", () => {let Foo; return assert.eq(true, isClass(Foo = Caf.defClass(class Foo extends Object {})));}); test("isClass function is false", () => {assert.eq(false, isClass(() => {})); assert.eq(false, isClass((a) => {})); return assert.eq(false, isClass((a, b) => {}));}); test("isClass class-contains-class-property is true", () => {let Foo; return assert.eq(true, isClass(Foo = Caf.defClass(class Foo extends Object {}, function(Foo, classSuper, instanceSuper) {this.bar = 0;})));}); test("isClass class-contains-prototype-property is true", () => {let Foo; return assert.eq(true, isClass(Foo = Caf.defClass(class Foo extends Object {}, function(Foo, classSuper, instanceSuper) {this.prototype.bar = 0;})));}); test("isClass empty-class derived class is true", () => {let Foo, Bar; Foo = Caf.defClass(class Foo extends Object {}); return assert.eq(true, isClass(Bar = Caf.defClass(class Bar extends Foo {})));}); test("isClass non-empty-class derived class is true", () => {let Foo, Bar; Foo = Caf.defClass(class Foo extends Object {}, function(Foo, classSuper, instanceSuper) {this.prototype.baz = 0;}); return assert.eq(true, isClass(Bar = Caf.defClass(class Bar extends Foo {})));}); return test("isClass - non class objects are false", () => {assert.eq(false, isClass()); assert.eq(false, isClass(null)); assert.eq(false, isClass(undefined)); assert.eq(false, isClass(123)); assert.eq(false, isClass("foo")); assert.eq(false, isClass([])); assert.eq(false, isClass({})); return assert.eq(false, isClass(() => {}));});}, isObject: function() {test("isObject {} is true", () => assert.eq(true, isObject({}))); test("isObject new class Foo is true", () => {let Foo; return assert.eq(true, isObject(new (Foo = Caf.defClass(class Foo extends Object {}))));}); test("isObject class Foo is false", () => {let Foo; return assert.eq(false, isObject(Foo = Caf.defClass(class Foo extends Object {})));}); test("isObject [] is false", () => assert.eq(false, isObject([]))); test("isObject null is false", () => assert.eq(false, isObject(null))); test("isObject -> is false", () => assert.eq(false, isObject(() => {}))); return test("isObject - non objects are false", () => {assert.eq(false, isObject()); assert.eq(false, isObject(undefined)); assert.eq(false, isObject(123)); assert.eq(false, isObject("")); return assert.eq(false, isObject("foo"));});}, objectName: function() {test("objectName new Class Foo == 'Foo'", () => {let Foo; Foo = Caf.defClass(class Foo extends Object {}); return assert.eq("Foo", objectName(new Foo));}); test("objectName Class Foo = 'Foo'", () => {let Foo; Foo = Caf.defClass(class Foo extends Object {}); return assert.eq("Foo", objectName(Foo));}); test("objectName -> == 'function'", () => assert.eq("function", objectName(() => {}))); test("objectName {} == 'Object'", () => assert.eq("Object", objectName({}))); test("objectName 123 == 'Number'", () => assert.eq("Number", objectName(123))); test("objectName 'foo' == '123'", () => assert.eq("String", objectName("foo"))); test("objectName null == 'null'", () => assert.eq("null", objectName(null))); return test("objectName undefined == 'undefined'", () => assert.eq("undefined", objectName(undefined)));}, present: function() {test("present strings", () => {assert.eq(false, present("")); assert.eq(false, present("   \t    \n   \n")); assert.eq(" j", present(" j")); assert.eq("j\n", present("j\n")); return assert.eq("jh", present("jh"));}); test("present null, undefined", () => {assert.eq(true, present(true)); assert.eq(false, present(null)); return assert.eq(false, present(undefined));}); test("present 0 is true", () => assert.eq(true, present(0))); test("present false is false", () => assert.eq(false, present(false))); test("present numbers", () => {assert.eq(0.5, present(0.5)); assert.eq(1, present(1)); return assert.eq(-1, present(-1));}); test("present custom", () => {let o1, o2; o1 = {present: () => true}; o2 = {present: () => false}; assert.eq(o1, present(o1)); return assert.eq(false, present(o2));}); return test("returnIfNotPresent value", () => {assert.eq("hi", present(undefined, "hi")); assert.eq("hi", present(null, "hi")); assert.eq(true, present(0, "hi")); assert.eq("hi", present(false, "hi")); return assert.eq("hi", present("", "hi"));});}, inequality: function() {let testInequality; testInequality = (a, b) => test(`${Caf.toString(a)}.gt/lt/gte/lte ${Caf.toString(b)}`, () => {assert.eq(gt(a, b), a > b, "gt"); assert.eq(lt(a, b), a < b, "lt"); assert.eq(gte(a, b), a >= b, "gte"); return assert.eq(lte(a, b), a <= b, "lte");}); testInequality(1, 0); testInequality(0, 1); testInequality(0, 0); testInequality(1, 1); testInequality(1, 2); testInequality(2, 1); testInequality("hi", "hi"); testInequality("hi1", "hi2"); return testInequality("hi2", "hi1");}, getSuperclass: function() {let MyEs6NotExtendedClass, MyEs6ExtendedClass, MySubEs6ExtendedClass, MyBaseClassEs6ExtendedClass; MyEs6NotExtendedClass = Caf.defClass(class MyEs6NotExtendedClass extends Object {}); MyEs6ExtendedClass = Caf.defClass(class MyEs6ExtendedClass extends Object {}); MySubEs6ExtendedClass = Caf.defClass(class MySubEs6ExtendedClass extends MyEs6ExtendedClass {}); MyBaseClassEs6ExtendedClass = Caf.defClass(class MyBaseClassEs6ExtendedClass extends BaseClass {}); test("Es6 extended Object", () => assert.equal(Object, getSuperclass(MyEs6ExtendedClass))); test("Es6 extend Foo extend Object", () => assert.equal(MyEs6ExtendedClass, getSuperclass(MySubEs6ExtendedClass))); test("Es6 extend BaseClass", () => assert.equal(BaseClass, getSuperclass(MyBaseClassEs6ExtendedClass))); test("null", () => assert.notPresent(getSuperclass(null))); test("undefined", () => assert.notPresent(getSuperclass(undefined))); test("->", () => assert.notPresent(getSuperclass(() => {}))); return test("{}", () => assert.notPresent(getSuperclass({})));}, getSuper: function() {let MyExtendedClass, myExtendedInstance, MyEs6ExtendedClass; MyExtendedClass = Caf.defClass(class MyExtendedClass extends BaseClass {}, function(MyExtendedClass, classSuper, instanceSuper) {this.prototype.mySpecialProtoProp = 123;}); myExtendedInstance = new MyExtendedClass; try {MyEs6ExtendedClass = eval("(function(){class MyEs6ExtendedClass extends Neptune.Art.ClassSystem.BaseClass {};return MyEs6ExtendedClass;})()");} catch (error) {}; test("{}", () => assert.eq(null, getSuper({}))); test("[]", () => assert.eq({}, getSuper([]))); test("->", () => assert.eq(Function.__proto__, getSuper(() => {}))); MyEs6ExtendedClass && test("MyEs6ExtendedClass -> BaseClass", () => assert.eq(BaseClass, getSuper(MyEs6ExtendedClass))); return MyEs6ExtendedClass && test("myExtendedInstance -> BaseClass.prototype", () => {assert.eq(Object.getPrototypeOf(myExtendedInstance), MyExtendedClass.prototype); assert.eq(Object.getPrototypeOf(Object.getPrototypeOf(myExtendedInstance)), BaseClass.prototype); return assert.eq(getSuper(myExtendedInstance), BaseClass.prototype);});}});});});
//# sourceMappingURL=Types.test.js.map
