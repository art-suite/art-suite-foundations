"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Function", "Array", "Object", "test", "peek"], [global, require('@art-suite/art-core-types'), require('@art-suite/art-core-arrays')], (Function, Array, Object, test, peek) => {let _array, _each, _object, _reduce, _find, _inject, toS, describe, assert, testComprehension, add, mul, x2, even, temp; temp = require('../../build'); _array = temp.array; _each = temp.each; _object = temp.object; _reduce = temp.reduce; _find = temp.find; _inject = temp.inject; toS = function(el) {return (() => {switch (false) {case !(el === null): return "null"; case !(el === undefined): return "undefined"; case !el.name: return el.name; case !(Caf.is(el, Function)): return `${Caf.toString(el)}`; case !(Caf.is(el, Array)): return `[${Caf.toString(Caf.array(el, (v) => toS(v)).join(", "))}]`; case !(Caf.is(el, Object)): return `{${Caf.toString(Caf.array(el, (v, k) => `${Caf.toString(k)}: ${Caf.toString(toS(v))}`).join(", "))}}`; default: return `${Caf.toString(el)}`;};})();}; return [({describe, assert} = require('art-testbench'), {describe, assert}), require('@art-suite/art-core-types'), require('@art-suite/art-core-arrays'), {_array, _each, _object, _reduce, _find, _inject, testComprehension: testComprehension = function(expected, f, source, a, b) {let args; args = [source, a, b]; while (peek(args) === undefined) {args.pop();}; return test(`${Caf.toString(f.name)} ${Caf.toString(Caf.array(args, (arg) => toS(arg)).join(", "))} => ${Caf.toString(toS(expected))}`, () => assert.eq(expected, f(source, a, b), {expected, source, a, b}));}, add: add = function(a, b) {return a + b;}, mul: mul = function(a, b) {return a * b;}, x2: x2 = function(a) {return a + a;}, even: even = function(a) {return a % 2 === 0;}}];});});
//# sourceMappingURL=StandardImport.js.map
