"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "compactFlatten", "test", "jsStringify", "assert", "pluralize"], [global, require('./StandardImport')], (describe, compactFlatten, test, jsStringify, assert, pluralize) => {let testPluralize; testPluralize = function(map) {return Caf.each2(map, (params, expected) => {params = compactFlatten(params); return test(`pluralize ${Caf.toString(Caf.array(params, (p) => jsStringify(p)).join(", "))} >> ${Caf.toString(jsStringify(expected))}`, () => assert.eq(pluralize(...params), expected));});}; return describe({justPluralize: function() {return testPluralize({users: "user", users: "users", people: "person", people: "person who loves me", people_: "person_", person_who_loves_mes: "person_who_loves_me", people: "people"});}, pluralizeWithNumbers: function() {return testPluralize({"0 users": [0, "user"], "1 user": [1, "user"], "-1 users": [-1, "user"], "2 users": [2, "user"], "1 person": [1, "person"], "3 people": [3, "person"]});}, customPluralForm: function() {return testPluralize({"3 toads": [3, "dragon", "toads"], "1 dragon": [1, "dragon", "toads"]});}, regressions: function() {return testPluralize({users: [null, "user"], users: [undefined, "user"], users: ["", "user"]});}});});});
//# sourceMappingURL=Plurlize.test.js.map
