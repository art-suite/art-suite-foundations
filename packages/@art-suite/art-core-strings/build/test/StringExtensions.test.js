"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "humanFriendlyShorten", "replaceLast", "pad", "escapeJavascriptString", "getPadding", "randomString", "allIndexes", "compactFlattenJoin", "jsStringify", "consistentJsonStringify", "JSON", "eachMatch", "stripTrailingWhitespace", "cryptoRandomString"], [global, require('./StandardImport')], (describe, test, assert, humanFriendlyShorten, replaceLast, pad, escapeJavascriptString, getPadding, randomString, allIndexes, compactFlattenJoin, jsStringify, consistentJsonStringify, JSON, eachMatch, stripTrailingWhitespace, cryptoRandomString) => {let hfsStest; hfsStest = function(input, maxLength, output) {return test(`'${Caf.toString(input)}', ${Caf.toString(maxLength)} == '${Caf.toString(output)}'`, () => {let actualOutput; assert.eq(output, actualOutput = humanFriendlyShorten(input, maxLength)); if (input.length <= maxLength) {assert.eq(input, actualOutput);}; assert.eq(true, actualOutput.length <= maxLength); return assert.eq(true, actualOutput.length >= maxLength / 2);});}; return describe({replaceLast: function() {return test("replaceLast", () => {assert.eq("hello mom world", replaceLast("hello there world", "there", "mom")); assert.eq("hello there mom world", replaceLast("hello there there world", "there", "mom")); return assert.eq("hello there world", replaceLast("hello there world", "mom", "foo"));});}, pad: function() {return test("pad", () => {assert.eq("hello world", pad("hello world", 4)); assert.eq("hello world    ", pad("hello world", 15)); assert.eq("hello world----", pad("hello world", 15, "-")); return assert.eq("----hello world", pad("hello world", 15, "-", true));});}, escapeJavascriptString: function() {test("escapeJavascriptString", () => {assert.eq('"hello world"', escapeJavascriptString("hello world")); assert.eq('"hello\\nworld"', escapeJavascriptString("hello\nworld")); return assert.eq('\'hello "world"\'', escapeJavascriptString('hello "world"'));}); return test("escapeJavascriptString without quotes", () => {assert.eq("hello world", escapeJavascriptString("hello world", true)); assert.eq("hello\\nworld", escapeJavascriptString("hello\nworld", true)); return assert.eq("hello 'world'", escapeJavascriptString("hello 'world'", true));});}, misc: function() {test("getPadding", () => {assert.eq("", getPadding(0)); assert.eq(" ", getPadding(1)); assert.eq("  ", getPadding(2)); return assert.eq("--", getPadding(2, "-"));}); test("randomString", () => {assert.eq(32, randomString(32).length); return assert.neq(randomString(32), randomString(32));}); test("allIndexes", () => {let str; str = "hi there mom. How are    you?"; return assert.eq(allIndexes(str, /\s+/g), [2, 8, 13, 17, 21]);}); return test("compactFlattenJoin", () => assert.eq("a messy mess", compactFlattenJoin(" ", [["a"], null, undefined, [], "messy", [[["mess"]]]])));}, jsStringify: function() {let list; list = [null, true, false, 0, -123, 123, 123.456, "hi", "hi\nthere", [], [1], [1, 2, 3], {}, {a: 1}, {a: 1, b: 2}, {number: 1, string: "hi", null: null, true: true, false: false, object: {foo: 1, bar: 2}, array: [1, 2, 3]}, [1, "hi", null, true, false, {bar: 1, foo: 2}, [1, 2, 3]]]; return Caf.each2(list, (o) => test(`${Caf.toString(jsStringify(o))}`, () => assert.eq(o, eval(`(${Caf.toString(jsStringify(o))})`))));}, consistentJsonStringify: {basic: function() {test("consistentJsonStringify null, true, false", () => {assert.eq("null", consistentJsonStringify(null)); assert.eq("true", consistentJsonStringify(true)); return assert.eq("false", consistentJsonStringify(false));}); test("consistentJsonStringify numbers", () => {assert.eq("0", consistentJsonStringify(0)); assert.eq("-123", consistentJsonStringify(-123)); assert.eq("123", consistentJsonStringify(123)); return assert.eq("123.456", consistentJsonStringify(123.456));}); test("consistentJsonStringify string", () => {assert.eq('"hi"', consistentJsonStringify("hi")); return assert.eq('\"hi\\nthere\"', consistentJsonStringify("hi\nthere"));}); test("consistentJsonStringify array", () => {assert.eq("[]", consistentJsonStringify([])); assert.eq("[1]", consistentJsonStringify([1])); return assert.eq("[1, 2, 3]", consistentJsonStringify([1, 2, 3]));}); test("consistentJsonStringify objects", () => {assert.eq("{}", consistentJsonStringify({})); assert.eq('{"a": 1}', consistentJsonStringify({a: 1})); return assert.eq('{"a": 1, "b": 2}', consistentJsonStringify({a: 1, b: 2}));}); test("consistentJsonStringify objects consistently", () => {let o1, o2; o1 = {a: 1, b: 2}; o2 = {b: 2, a: 1}; assert.eq('{"a": 1, "b": 2}', consistentJsonStringify(o1)); assert.eq('{"a": 1, "b": 2}', consistentJsonStringify(o2)); return assert.neq(JSON.stringify(o1), JSON.stringify(o2));}); test("consistentJsonStringify compound object", () => {let o; o = {number: 1, string: "hi", null: null, true: true, false: false, object: {foo: 1, bar: 2}, array: [1, 2, 3]}; return assert.eq('{"array": [1, 2, 3], "false": false, "null": null, "number": 1, "object": {"bar": 2, "foo": 1}, "string": "hi", "true": true}', consistentJsonStringify(o));}); return test("consistentJsonStringify compound array", () => {let a; a = [1, "hi", null, true, false, {foo: 1, bar: 2}, [1, 2, 3]]; return assert.eq('[1, "hi", null, true, false, {"bar": 2, "foo": 1}, [1, 2, 3]]', consistentJsonStringify(a));});}, indent: function() {test("basic object", () => {let obj; obj = {foo: 123, bar: 456}; return assert.eq(consistentJsonStringify(obj, "  "), '{\n  "bar": 456,\n  "foo": 123\n}');}); test("nested objects", () => {let obj; obj = {foo: {one: 1, two: 2}, bar: {three: 3, four: 4}}; return assert.eq(consistentJsonStringify(obj, "  "), '{\n  "bar": {\n    "four": 4,\n    "three": 3\n  },\n  "foo": {\n    "one": 1,\n    "two": 2\n  }\n}');}); test("basic array", () => {let obj; obj = [123, 456]; return assert.eq(consistentJsonStringify(obj, "  "), "[\n  123,\n  456\n]");}); return test("nested arrays", () => {let obj; obj = [[1, 2], [3, 4]]; return assert.eq(consistentJsonStringify(obj, "  "), "[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ]\n]");});}}, eachMatch: function() {return test("eachMatch", () => {let results; results = []; eachMatch("hello   world  ", /\w+/g, (a) => results.push(a)); return assert.eq(results, [["hello"], ["world"]]);});}, stripTrailingWhitespace: function() {return test("stripTrailingWhitespace", () => {assert.eq("hello world", stripTrailingWhitespace("hello world ")); assert.eq("hello world", stripTrailingWhitespace("hello world")); assert.eq("hello world", stripTrailingWhitespace("hello world\n")); return assert.eq("hello world", stripTrailingWhitespace("hello world\n\n"));});}, humanFriendlyShorten: {noWhitespace: function() {test("'foobar', 0 throws error", () => {assert.throws(() => humanFriendlyShorten("foobar", 0)); return undefined;}); hfsStest("foobar", 1, "…"); hfsStest("foobar", 4, "foo…"); hfsStest("foobar", 5, "foob…"); hfsStest("foobar", 6, "foobar"); return hfsStest("foobar", 10, "foobar");}, untrimmedWhitespace: function() {return test("'  foobar  ', 6 == 'foobar'", () => assert.eq("foobar", humanFriendlyShorten("  foobar  ", 6)));}, multiWord: function() {hfsStest("foo bar", 1, "…"); hfsStest("foo bar", 5, "foo…"); hfsStest("foo bar", 6, "foo…"); hfsStest("foo bar", 7, "foo bar"); return hfsStest("foo bar", 10, "foo bar");}, "multiWord ensure at least half maxLength": function() {hfsStest("f bartender", 3, "f…"); hfsStest("f bartender", 4, "f b…"); hfsStest("fo bartender", 4, "fo…"); hfsStest("fo bartender", 5, "fo b…"); hfsStest("foo bartender", 6, "foo…"); hfsStest("foo bartender", 7, "foo ba…"); hfsStest("food bartender", 8, "food…"); hfsStest("food bartender", 9, "food bar…"); hfsStest("food prep bartenders", 18, "food prep…"); hfsStest("food prep bartenders", 19, "food prep bartende…"); return hfsStest("food prep bartenders", 20, "food prep bartenders");}}, cryptoRandomString: function() {return test("basic", () => {assert.eq(10, cryptoRandomString(10).length); return assert.neq(cryptoRandomString(10), cryptoRandomString(10));});}});});});
//# sourceMappingURL=StringExtensions.test.js.map
