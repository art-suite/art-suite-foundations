"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "CallStackLine", "assert", "callStack", "rawCallStack"], [global, require('./StandardImport')], (test, CallStackLine, assert, callStack, rawCallStack) => {let rawLog; rawLog = function() {}; test("parse anonumous", function() {let csl, line; csl = new CallStackLine(line = "at Context.<anonymous> (http://0.0.0.0:9000/kimi_editor/test/spec/text_effects.js:8:9)"); assert.equal(csl.original, line); assert.equal(csl.sourceLine, 8); assert.equal(csl.function, undefined); assert.equal(csl.sourceColumn, 9); assert.equal(csl.source, "http://0.0.0.0:9000/kimi_editor/test/spec/text_effects.js"); assert.equal(csl.sourceFileName, "text_effects.js"); assert.equal(csl.sourcePath, "/kimi_editor/test/spec"); return assert.equal(csl.sourceHostWithPort, "0.0.0.0:9000");}); test("parse 1", function() {let csl, line; csl = new CallStackLine(line = "at myFunc (http://0.0.0.0:9000/scripts/spec/art/foundation/call_stack.js:10:30)"); assert.equal(csl.original, line); assert.equal(csl.sourceLine, 10); assert.equal(csl.function, "myFunc"); assert.equal(csl.sourceColumn, 30); assert.equal(csl.source, "http://0.0.0.0:9000/scripts/spec/art/foundation/call_stack.js"); assert.equal(csl.sourceFileName, "call_stack.js"); assert.equal(csl.sourcePath, "/scripts/spec/art/foundation"); return assert.equal(csl.sourceHostWithPort, "0.0.0.0:9000");}); test("parse without function", function() {let csl, line; csl = new CallStackLine(line = "at http://0.0.0.0:9000/scripts/spec/art/foundation/call_stack.js:26:30"); assert.equal(csl.original, line); assert.equal(csl.sourceLine, 26); assert.equal(csl.function, undefined); assert.equal(csl.sourceColumn, 30); assert.equal(csl.source, "http://0.0.0.0:9000/scripts/spec/art/foundation/call_stack.js"); assert.equal(csl.sourceFileName, "call_stack.js"); assert.equal(csl.sourcePath, "/scripts/spec/art/foundation"); return assert.equal(csl.sourceHostWithPort, "0.0.0.0:9000");}); test("callStack", function() {assert.gt(callStack().length, 5); return assert.gt(callStack(1).length, 5);}); return test("rawCallStack", function() {assert.gt(rawCallStack().length, 5); return assert.gt(rawCallStack(1).length, 5);});});});
//# sourceMappingURL=CallStack.test.js.map
