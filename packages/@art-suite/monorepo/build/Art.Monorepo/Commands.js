"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["allPackageExec", "merge", "cleanMonorepo", "green", "process", "getAllPackagesVersionInfo", "Promise"], [global, require('./StandardImport')], (allPackageExec, merge, cleanMonorepo, green, process, getAllPackagesVersionInfo, Promise) => {return {"update-mono-package": require('./UpdateMonoPackage'), "update-sub-packages": require('./UpdateSubPackages'), test: function(options) {return allPackageExec(merge(options, {command: "npm test", verb: "test"}));}, sync: function(options) {return cleanMonorepo().then(() => require('./UpdateSubPackages')(options)).then(() => require('./UpdateMonoPackage')(options)).then(() => green("All package.json files synced."));}, run: {options: {command: "Shell command to run.", verbose: "true/false", path: 'find all packages in this path. default: "."'}, run: function(options) {let path; if (path = options.path) {process.chdir(path);}; return allPackageExec(merge(options, {verb: "run"}));}}, versions: function() {return getAllPackagesVersionInfo().then((packages) => Caf.object(packages, ({version, publishedVersion, status}) => {return {version, publishedVersion, status: (() => {switch (status) {case "behind": return status.red; case "current": return status.grey; default: return status;};})()};}));}, clean: function(options) {return cleanMonorepo().then(() => green("Monorepo is clean."));}, update: function(options) {return Promise.then(() => require('./UpdateSubPackages')(options)).then(() => require('./UpdateMonoPackage')(options));}};});});
//# sourceMappingURL=Commands.js.map
