"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["allPackageExec", "merge", "cleanMonorepo", "green", "process", "Promise"], [global, require('./StandardImport')], (allPackageExec, merge, cleanMonorepo, green, process, Promise) => {return {"update-mono-package": require('./UpdateMonoPackage'), "update-sub-packages": require('./UpdateSubPackages'), test: {options: {verbose: "true/false"}, description: "Test all packages. This runs `npm test` in every subfolder with a package.json file.", run: function(options) {return allPackageExec(merge(options, {command: "npm test", verb: "test"}));}}, sync: {description: "Sync the root package.json with all package.json files in subfolders. This will ensure all packages are using the same verison of every external dependency. It will also ensure all cross-referenced packages within the monorepo are referencing the latest version. Last, it will update the root package.json to contain all external references. It's best to run `npm install` immediately after running this.\n\nThis happens in three steps:\n\n1. Clean: remove all package-lock.json files and all node_modules folders in sub-folders. There should only be one of each in the root of the monorepo.\n2. Update sub-packages: update all dependency versions in all sub-packages to match the root package.json.\n3. Update mono-package: update the root mono-repo's package.json with any new dependencies found in sub-packages as well as updating any cross-referencing between packages within the monorepo.", options: {quiet: "Supress output."}, run: function(options) {return cleanMonorepo().then(() => require('./UpdateSubPackages')(options)).then(() => require('./UpdateMonoPackage')(options)).then(() => green("All package.json files synced."));}}, run: {description: "Run a command in all packages. This will run the command in every subfolder with a package.json file.", options: {command: "Shell command to run.", verbose: "true/false", path: 'find all packages in this path. default: "."'}, run: function(options) {let path; if (path = options.path) {process.chdir(path);}; return allPackageExec(merge(options, {verb: "run"}));}}, versions: require('./versions'), clean: {description: "Advanced: Delete all package-lock.json files and node_modules folders in all subfolders. There should only be one package-lock.json file and one node_modules folder located in the root of the monorepo.", run: function(options) {return cleanMonorepo().then(() => green("Monorepo is clean."));}}, update: {options: {quiet: "Supress output."}, description: "Advanced: Run the update-sub-packages then update-mono-package.", run: function(options) {return Promise.then(() => require('./UpdateSubPackages')(options)).then(() => require('./UpdateMonoPackage')(options));}}};});});
//# sourceMappingURL=Commands.js.map
