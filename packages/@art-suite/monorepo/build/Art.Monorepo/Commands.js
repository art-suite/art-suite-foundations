"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["allPackageExec", "merge", "compactFlattenAll", "cleanMonorepo", "green", "Promise"], [global, require('./StandardImport')], (allPackageExec, merge, compactFlattenAll, cleanMonorepo, green, Promise) => {let makeNpmRunCommand, makeNpmCommand; makeNpmRunCommand = function(command) {return (options, args) => allPackageExec(merge(options, {skip: ({scripts}, path) => !((Caf.exists(scripts) && scripts[command]) != null) ? `(package.json does not have a '${Caf.toString(command)}' script)` : undefined, folder: compactFlattenAll(options.folder, args), command: `npm run ${Caf.toString(command)}`, verb: command}));}; makeNpmCommand = function(command) {return {options: {verbose: "true/false", folder: 'find all packages in this path. default: "."'}, args: "Find all packages in any additional paths passed as args.", description: `Runs \`npm run ${Caf.toString(command)}\` in every subfolder with a package.json file.`, run: makeNpmRunCommand(command)};}; return {"update-mono-package": require('./UpdateMonoPackage'), "update-sub-packages": require('./UpdateSubPackages'), test: makeNpmCommand("test"), build: makeNpmCommand("build"), sync: {description: 'Syncs the root package.json with all sub-packages. Ensures:\n\n- All sub-packages use the same version of each external dependency.\n- All internal cross-package references are updated to the latest version and linked in the root package.json using "file:..." references to local packages instead of published npm versions.\n- This only affects the root package.json and does not modify sub-packages—so it won’t interfere with publishing and should work seamlessly with CI/CD workflows.\n- The root package.json includes all external dependencies used in sub-packages.\n\nRun npm install immediately after running this command.\n\nThree Steps:\n\n1. Clean: Removes all package-lock.json files and node_modules folders in sub-packages. The root should be the only place with a lockfile and installed modules.\n2. Update sub-packages: Aligns all sub-package dependency versions with the root package.json.\n3. Update root: Merges in any new dependencies from sub-packages and ensures internal package references are up to date and use file: links to local paths.\n\nAbout the preserveRootDependencies option:\n\nBy default, the root package.json is treated as a monorepo manager only—not an active code package. Its dependencies field is fully regenerated to represent the union of all sub-package dependencies and devDependencies. Its devDependencies field is untouched (reserved for monorepo tools like art-monorepo). Any root dependency not used in a sub-package will be removed.\n\nIf the root is also used for coding, use the preserveRootDependencies option. This prevents pruning of root dependencies. Instead, the tool merges sub-package dependencies into the root. You are responsible for removing obsolete dependencies manually.', options: {quiet: "Suppress output.", preserveRootDependencies: "Don't remove dependencies from the root package.json even if they are not found in any sub-packages. See the full command description for more details."}, run: function(options) {return cleanMonorepo().then(() => require('./UpdateSubPackages').run(options)).then(() => require('./UpdateMonoPackage').run(options)).then(() => green("All package.json files synced."));}}, run: {description: "'npm run X' in all packages. This will run the command in every subfolder with a package.json file.", options: {verbose: "true/false", folder: 'find all packages in this path. default: "."'}, args: "Npm run-command.", run: function(options, args) {return makeNpmRunCommand(args[0])(options, args.slice(1));}}, exec: {description: "Run shell command in every subfolder with a package.json file.", options: {verbose: "true/false", folder: 'find all packages in this path. default: "."'}, args: "Shell command to run.", run: function(options, args) {return allPackageExec(merge(options, {verb: "exec", command: args.join(" ")}));}}, versions: require('./versions'), clean: {description: "Advanced: Delete all package-lock.json files and node_modules folders in all subfolders. There should only be one package-lock.json file and one node_modules folder located in the root of the monorepo.", run: function(options) {return cleanMonorepo().then(() => green("Monorepo is clean."));}}, update: {options: {quiet: "Suppress output."}, description: "Advanced: Run the update-sub-packages then update-mono-package.", run: function(options) {return Promise.then(() => require('./UpdateSubPackages').run(options)).then(() => require('./UpdateMonoPackage').run(options));}}};});});
//# sourceMappingURL=Commands.js.map
