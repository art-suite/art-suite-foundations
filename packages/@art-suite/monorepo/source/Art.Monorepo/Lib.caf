import
  &ArtStandardLib.terminalColors
  &ArtStandardLib
  &NpmApi
  &fs
  &fs.promises
  &ArtCommunicationStatus
  &glob
  &path
  {} &semver
  &gitignore

{}
  readJson = (file) ->
    if existsSync file
      try
        JSON.parse readFileSync file
      catch error
        log.error
          """
            Failed to parse: #{file}

            #{error.message}
        process.exit 1
    else {}

  writeJson: (file, data) ->
    writeFileSync
      file
      JSON.stringify data, null, 2
      + :\n

  # gets all non-git-ignored package.json files in the monorepo
  # Implementation note: fast-past filters out all node_modules/ directories, then we filter out all git-ignored files
  globAllPackages = (folder) ->
    folders = array f in compactFlatten [] folder when present f
    Promise
    .then ->
      if folders.length > 0
        Promise.all array folder in folders
          glob join folder, "**", :package.json
        .then compactFlatten
      else
        glob join "!(node_modules)", "**", :package.json

    .then getAllNonIgnoredFiles

  packagePathToPackageFolder = (packagePath) ->
    packagePath
    .replace /(\/)package.json/, ''
    .replace /^package.json$/, '.'

  loadAllPackages = (folder) ->
    globAllPackages folder
    .then (results) ->
      object file from-array results with-key packagePathToPackageFolder file when !/node_modules\//.test file # don't read into node_modules/
        readJson file

  getSubPackageLockFiles = ->
    glob "!(node_modules)/**/package-lock.json"

  getSubNodeModulesFolders = ->
    glob "!(node_modules)/**/node_modules"

  rmFile = (file) ->
    log rm: file
    unlink file
    .then -> log blue "Removed: #{file}"

  rmFolder = (folder) ->
    log yellow cmd = "rm -rf #{folder}"
    execShellCommand cmd
    .then -> log blue "Removed: #{folder}"

  removePackageLocks = ->
    getSubPackageLockFiles()
    .then (results) ->
      if results.length > 0
        log blue "Removing #{pluralize results.length, "package-specific package-lock.json file"}..."
      Promise.all array packageLock in results
        rmFile packageLock
      .then -> if results.length > 0
        log blue "Removed #{pluralize results.length, "package-specific package-lock.json file"}."

  removeNodeModules = ->
    getSubNodeModulesFolders()
    .then (results) ->
      if results.length > 0
        log blue "Removing #{pluralize results.length, "package-specific node_modules/ directory"}..."
      Promise.all array nodeModules in results
        rmFolder nodeModules
      .then -> if results.length > 0
        log blue "Removed #{pluralize results.length, "package-specific node_modules/ directory"}."

  fullMonorepoReset = ->
    log yellow "Resetting the monorepo..."
    log grey "This will remove all package-lock.json files and node_modules folders in the entire monorepo."
    Promise.all []
      removePackageLocks()
      removeNodeModules()
      rmFile "package-lock.json"
      rmFolder "node_modules"
    .then -> log blue "Monorepo reset complete."

  getAllPackagesVersionInfo = ->
    loadAllPackages()
    .then (packages) -> Promise.deepAll
      object _package from packages
        _package extract name, version # weird caffeine-script error using the token "package"
        getLatestPublishedPackageJson name
        .catch (response) -> if response.status == missing then null else Promise.reject response
        .then (publishedPackage) ->
          publishedVersion = publishedPackage?.version
          {}
            name, version, package: _package
            publishedPackage, publishedVersion
            status:
              if !publishedVersion? then :unpublished
              else if semver.gt version, publishedVersion then :ahead
              else if semver.gt publishedVersion, version then :behind
              else :current

  monorepoIsClean = ->
    Promise.all []
      getSubPackageLockFiles()
      getSubNodeModulesFolders()

    .then ([packageLockFiles, nodeModulesFolders]) ->
      packageLockFiles.length == 0 && nodeModulesFolders.length == 0

  cleanMonorepo: ->
    removePackageLocks()
    .then -> removeNodeModules()

  # /** Executes a shell command and return it as a Promise.
  #   * @param cmd {string}
  #   * @return {Promise<string>}
  #   */
  execShellCommand = (cmd) ->
    new Promise (resolve, reject) ->
      &child_process.exec cmd, (error, stdout, stderr) =>
        if error then reject {} stderr, stdout
        else resolve stdout
