import &ArtStandardLib.terminalColors, &ArtStandardLib, &NpmApi, &fs, &fs.promises, &ArtCommunicationStatus, &glob, &path, {} &semver

{}
  readJson = (file) ->
    if existsSync file
      try
        JSON.parse readFileSync file
      catch error
        log.error
          """
            Failed to parse: #{file}

            #{error.message}
        process.exit 1
    else {}

  writeJson: (file, data) ->
    writeFileSync
      file
      consistentJsonStringify data, '  '
      + :\n

  globAllPackages = (folder) ->
    glob log :globAllPackages join folder ? "!(node_modules)", "**", :package.json

  loadAllPackages = (folder) ->
    globAllPackages folder
    .then (results) ->
      object file from-array results with-key file.split(/\/package.json$/)[0] when
          !/node_modules\//.test file # don't read into node_modules/
        readJson file

  removePackageLocks = ->
    glob "!(node_modules)/**/package-lock.json"
    .then (results) ->
      if results.length > 0
        log blue "Removing #{pluralize results.length, "package-specific package-lock.json file"}..."
      Promise.all array packageLock in results
        log rm: packageLock
        unlink packageLock
      .then -> if results.length > 0
        log blue "Removed #{pluralize results.length, "package-specific package-lock.json file"}."


  removeNodeModules = ->
    glob "!(node_modules)/**/node_modules"
    .then (results) ->
      if results.length > 0
        log blue "Removing #{pluralize results.length, "package-specific node_modules/ directory"}..."
      Promise.all array nodeModules in results
        log yellow cmd = "rm -rf #{nodeModules}"
        execShellCommand cmd
      .then -> if results.length > 0
        log blue "Removed #{pluralize results.length, "package-specific node_modules/ directory"}."

  getAllPackagesVersionInfo = ->
    loadAllPackages()
    .then (packages) -> Promise.deepAll
      object _package from packages
        _package extract name, version # weird caffeine-script error using the token "package"
        getLatestPublishedPackageJson name
        .catch (response) -> if response.status == missing then null else Promise.reject response
        .then (publishedPackage) ->
          publishedVersion = publishedPackage?.version
          {}
            name, version, package: _package
            publishedPackage, publishedVersion
            status:
              if !publishedVersion? then :unpublished
              else if semver.gt version, publishedVersion then :ahead
              else if semver.gt publishedVersion, version then :behind
              else :current

  cleanMonorepo: ->
    removePackageLocks()
    .then -> removeNodeModules()

  # /** Executes a shell command and return it as a Promise.
  #   * @param cmd {string}
  #   * @return {Promise<string>}
  #   */
  execShellCommand = (cmd) ->
    new Promise (resolve, reject) ->
      &child_process.exec cmd, (error, stdout, stderr) =>
        if error then reject {} stderr, stdout
        else resolve stdout
