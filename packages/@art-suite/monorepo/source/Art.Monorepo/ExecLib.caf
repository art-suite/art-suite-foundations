import
  &ArtStandardLib
  &ColorsLib
  &Lib

indent = (str, amount = "   ") ->
  amount + str.replace /\n/g "\n#{amount}"

logRun = (verb, packagePath) ->
  log
    blue "#{verb}: "
    + packagePath

allPackageExec: (options) ->
  options extract
    command
    verb
    verbose
    folder
    sync # true/false - if true, run each command in order, waiting for each to finish before running the next.
  skipTest = options.skip ? -> false

  verb = upperCase verb

  loadAllPackages folder
  .then (packages) ->
    array {scripts}, packagePath in packages when scripts?.test
      packagePath

  .then (packagePaths) ->
    logRun "#{verb}ING" pluralize :package packagePaths.length
    passed = []
    skipped = []
    failed = []
    run = (packagePath) ->
      packageContents = readJson &path.join packagePath, :package.json
      if skipReason = skipTest packageContents, packagePath, options
        skipped.push packagePath
        logRun :SKIPPED,
          yellow packagePath
          + if isString skipReason then grey " #{skipReason}" else ""
      else
        logRun verb, grey packagePath

        execShellCommand "" cd #{packagePath};#{command}
        .then
          (stdout) ->
            passed.push packagePath;
            if verbose
              log blue "#{packagePath} > #{command} (stdout)"
              log indent
                stdout.trim()
                "  "

            logRun :SUCCESS green packagePath
            if verbose
              log ""

          ({stdout, stderr}) ->
            failed.push packagePath
            logRun :FAILED red packagePath
            if present stdout
              log blue "  #{packagePath} > #{command} (stdout)"
              log indent stdout.trim()
              log ""
            if present stderr
              log blue "  #{packagePath} > #{command} (stderr)"
              log red indent stderr.trim()
              log ""

    if sync
      serializer = new Promise.Serializer
      log blue "Executing in sequential order"
      each packagePath in packagePaths.sort()
        serializer.then -> run packagePath
      serializer

    else
      log blue "Executing in parallel"
      Promise.all array packagePath in packagePaths
        run packagePath

    .then ->
      log blue "" \nRESULTS:
      log blue "  succeeded: " + green passed.length
      if skipped.length > 0 then log blue "  skipped: " + yellow skipped.length

      if failed.length > 0
        each f in failed with log blue "  failed: " + red f
        process.exit 1

      null
