import &StandardImport

addArtMonorepoFeatures = (rootPackage) ->
  rootPackage.devDependencies[&package.name] ?= :^ + &package.version
  rootPackage.scripts = merge
    # provide defaults
    object script in :test :build :sync :clean :versions
      "" art-monorepo #{script}

    # but don't override any existing scripts
    rootPackage.scripts

  rootPackage

options:
  quiet: "" Suppress output.
  preserveRootDependencies: "" Don't remove dependencies from the root package.json even if they are not found in any sub-packages. See the full command description for more details.
description:
  """
    Updates the root package.json file based on all the package.json files in sub-folders. This includes updating dependency versions, new dependencies, and cross-references between packages in the mono-repo. Run `npm install` after.

    About the preserveRootDependencies option:

    By default, the root package.json is treated as a monorepo manager onlyâ€”not an active code package. Its dependencies field is fully regenerated to represent the union of all sub-package dependencies and devDependencies. Its devDependencies field is untouched (reserved for monorepo tools like art-monorepo). Any root dependency not used in a sub-package will be removed.

    If the root is also used for coding, use the preserveRootDependencies option. This prevents pruning of root dependencies. Instead, the tool merges sub-package dependencies into the root. You are responsible for removing obsolete dependencies manually.

run: ({quiet, preserveRootDependencies}) ->
  unless quiet
    log blue "" Updating **/package.json >> ./package.json...

  rootPackage = readJson :package.json
  originalRootPackage = clone rootPackage
  unless preserveRootDependencies
    rootPackage.dependencies = {}

  previousSubPackages = {}

  class HandledError extends Error

  addDep = (type, name, version, subPackage) ->
    intoPackageSet = rootPackage[type];

    existingDep = intoPackageSet[name]
    alreadyHaveDep = !!existingDep
    alreadyFileDep = alreadyHaveDep && /^file:/.test existingDep
    settingFileDep = /^file:/.test version
    conflict = alreadyHaveDep && existingDep != version && alreadyFileDep == settingFileDep

    if (conflict)
      previousSubPackage = previousSubPackages[type][name]
      previousVersion = intoPackageSet[name]

      log.warn "" CONFLICTING PACKAGE VERSIONS:
      log.withOptions
        color: true
        unquoted: true
        maxLineLength: 78
        {}
          dependency: name
          conflictingPackages:
            [(if subPackage? then subPackage.path else :package) + :/package.json]: version
            [(if previousSubPackage? then previousSubPackage.path else :previous_package) + :/package.json]: previousVersion

      throw new HandledError
        """
          Missmatch conflict:
            #{subPackage?.path}: #{name}: '#{intoPackageSet[name]}'
            #{previousSubPackage?.path}: #{name}: '#{version}'

    else if !alreadyFileDep
      intoPackageSet[name] = version;

    previousSubPackages[type] = previousSubPackages[type] || {}
    previousSubPackages[type][name] = subPackage;

  loadAllPackages()
  .then (packages) ->
    packageFolderByPackageName = {}
    each _package, packageFolder from packages
      _package.path = packageFolder
      _package extract name, dependencies, devDependencies
      if packageFolderByPackageName[name]
        log.error
          """
            Two different packages have the same name in their package.json file:

              #{packageFolder}
              #{packageFolderByPackageName[name]}
        throw new HandledError "" Two packages have the same name

      else
        packageFolderByPackageName[name] = packageFolder if name?

      each v, k in dependencies     with addDep :dependencies, k, v, _package
      each v, k in devDependencies
        if preserveRootDependencies
          # with preserveRootDependencies, sub-package devDependencies are merged into the root package's devDependencies section
          unless rootPackage.dependencies[k] # don't add duplicated devDependencies that already exist in the dependencies section
            addDep :devDependencies, k, v, _package
        else
          # without preserveRootDependencies, sub-package devDependencies are managed into the root package's dependencies section
          addDep :dependencies, k, v, _package

      addDep :dependencies, name, "file:#{packageFolder}" if name?

    unless preserveRootDependencies
      addArtMonorepoFeatures rootPackage

    if neq originalRootPackage, rootPackage
      writeJson :package.json rootPackage
      log "Updated ./package.json"
    else
      log "Everything up to date."

    null

  .catch (error) ->
    throw error unless error is HandledError
