import &StandardImport, {} &semver

stripEmptyKeys = (o) -> object v from o when objectHasKeys v
{}
  &update-mono-package
  &update-sub-packages

  test: (options) ->
    allPackageExec merge options,
      command: "npm test"
      verb: :test

  sync: (options) ->
    cleanMonorepo()
    .then -> &updateSubPackages options
    .then -> &updateMonoPackage options
    .then -> green "" All package.json files synced.

  run:
    options:
      command:  "" Shell command to run.
      verbose:  "" true/false
      path:     "" find all packages in this path. default: "."
    run: (options) ->
      if options extract path
        process.chdir path
      allPackageExec merge options,
        verb: :run

  versions: ({verbose})->
    packageFieldsNpmChanges =
      :gitHead
      :_id
      :_nodeVersion
      :_npmVersion
      :_npmUser
      :directories
      :maintainers
      :_npmOperationalInternal
      :_hasShrinkwrap
      :author
      :bugs
      :dist
      :repository
      :integrity
      :shasum
      :tarball
      :fileCount
      :unpackedSize
      :signatures
      :devDependencies
      :description

    normalizeVersion = (v) ->
      [v] = v.match(/\d+(\.\d+)*/) || []
      if v
        unless /\d+\.\d+\.\d+/.test v
          each til 3 - v.split(".").length
            v = v + ".0"
      v

    getAllPackagesVersionInfo()
    .then (packages) ->
      object {version, publishedVersion, status, package: _package, publishedPackage} from packages
        {} version, publishedVersion, status:
          switch status
          when :unpublished then status.white
          when :behind then status.red
          when :current
            if eq _package, publishedPackage
              status.grey
            else
              if objectHasKeys dependencies = stripEmptyKeys objectDiffReport _package.dependencies, publishedPackage.dependencies
                if dependencies.changed
                  versionChanges = {}
                  each {newItem, oldItem}, key in dependencies.changed
                    newItem = normalizeVersion newItem
                    oldItem = normalizeVersion oldItem

                    if !newItem || !oldItem
                      versionChanges.incomparable = compactFlattenAll versionChanges.incomparable, key
                    else if semver.gt oldItem, newItem
                      versionChanges.reverted = compactFlattenAll versionChanges.reverted, key
                    else
                      changeType = semver.diff oldItem, newItem
                      versionChanges[changeType] = compactFlattenAll versionChanges[changeType], key

                if verbose
                  {} dependencies, versionChanges
                else
                  if dependencies.added
                    "dependencies have been added: #{(Object.keys dependencies.added).join ', '}".yellow
                  else if dependencies.removed
                    "dependencies have been removed: #{(Object.keys dependencies.removed).join ', '}".grey
                  else
                    switch
                    when versionChanges.reverted  then "dependencies have reverted: #{versionChanges.reverted.join ', '}".red
                    when versionChanges.incomparable     then "dependencies have major-version changes: #{versionChanges.incomparable.join ', '}".yellow
                    when versionChanges.major     then "dependencies have major-version changes: #{versionChanges.major.join ', '}".yellow
                    when versionChanges.minor     then "dependencies have minor-version changes: #{versionChanges.minor.join ', '}".yellow
                    when versionChanges.patch     then "dependencies have patch-version changes: #{versionChanges.patch.join ', '}".grey

              else
                otherChanges = stripEmptyKeys objectDiffReport
                  objectWithout _package, packageFieldsNpmChanges...
                  objectWithout publishedPackage, packageFieldsNpmChanges...
                  eq

                if objectHasKeys otherChanges
                  if verbose then otherChanges else "current, but package.json changed".grey

                else status.grey

          else status

  clean: (options) ->
    cleanMonorepo()
    .then -> green "" Monorepo is clean.

  update: (options) ->
    Promise
    .then -> &updateSubPackages options
    .then -> &updateMonoPackage options