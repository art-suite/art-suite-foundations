import &StandardImport

makeNpmRunCommand = (command) ->
  (options, args) ->
    allPackageExec merge options,
      skip: ({scripts}, path) -> unless scripts?[command]? then "(package.json does not have a '#{command}' script)"
      folder: compactFlattenAll options.folder, args
      command: "npm run #{command}"
      verb: command

makeNpmCommand = (command) ->
  options:
    verbose:  "" true/false
    folder:   "" find all packages in this path. default: "."
  args: "" Find all packages in any additional paths passed as args.
  description: "" Runs `npm run #{command}` in every subfolder with a package.json file.
  run: makeNpmRunCommand command

{}
  &update-mono-package
  &update-sub-packages

  test: makeNpmCommand :test
  build: makeNpmCommand :build

  sync:
    description:
      """
        Syncs the root package.json with all sub-packages. Ensures:

        - All sub-packages use the same version of each external dependency.
        - All internal cross-package references are updated to the latest version and linked to use the local packages instead of published npm versions.
        - The root package.json includes all external dependencies used in sub-packages.

        Run npm install immediately after running this command.

        Three Steps:

        1.	Clean: Removes all package-lock.json files and node_modules folders in sub-packages. The root should be the only place with a lockfile and installed modules.
        2.	Update sub-packages: Aligns all sub-package dependency versions with the root package.json.
        3.	Update root: Merges in any new dependencies from sub-packages and ensures internal package references are up to date and use file: links to local paths.

        About the preserveRootDependencies option:

        By default, the root package.json is treated as a monorepo manager onlyâ€”not an active code package. Its dependencies field is fully regenerated to represent the union of all sub-package dependencies and devDependencies. Its devDependencies field is untouched (reserved for monorepo tools like art-monorepo). Any root dependency not used in a sub-package will be removed.

        If the root is also used for coding, use the preserveRootDependencies option. This prevents pruning of root dependencies. Instead, the tool merges sub-package dependencies into the root. You are responsible for removing obsolete dependencies manually.

    options:
      quiet: "" Suppress output.
      preserveRootDependencies: "" Don't remove dependencies from the root package.json even if they are not found in any sub-packages. See the full command description for more details.

    run: (options) ->
      cleanMonorepo()
      .then -> &updateSubPackages.run options
      .then -> &updateMonoPackage.run options
      .then -> green "" All package.json files synced.

  run:
    description: "" 'npm run X' in all packages. This will run the command in every subfolder with a package.json file.
    options:
      verbose:  "" true/false
      folder:   "" find all packages in this path. default: "."
    args:  "" Npm run-command.
    run: (options, args) -> makeNpmRunCommand(args[0]) options, args.slice 1

  exec:
    description: "" Run shell command in every subfolder with a package.json file.
    options:
      verbose:  "" true/false
      folder:   "" find all packages in this path. default: "."
    args:  "" Shell command to run.
    run: (options, args) -> allPackageExec merge options, verb: :exec command: args.join " "

  &versions

  clean:
    description:
      "" Advanced: Delete all package-lock.json files and node_modules folders in all subfolders. There should only be one package-lock.json file and one node_modules folder located in the root of the monorepo.
    run: (options) ->
      cleanMonorepo()
      .then -> green "" Monorepo is clean.

  update:
    options:
      quiet: "" Suppress output.
    description: "" Advanced: Run the update-sub-packages then update-mono-package.
    run: (options) ->
      Promise
      .then -> &updateSubPackages.run options
      .then -> &updateMonoPackage.run options