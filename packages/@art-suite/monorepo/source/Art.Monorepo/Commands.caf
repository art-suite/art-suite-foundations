import &StandardImport

makeNpmRunCommand = (command) ->
  (options, args) ->
    allPackageExec merge options,
      skip: ({scripts}, path) -> unless scripts?[command]? then "(package.json does not have a '#{command}' script)"
      folder: compactFlattenAll options.folder, args
      command: "npm run #{command}"
      verb: command

makeNpmCommand = (command) ->
  options:
    verbose:  "" true/false
    folder:   "" find all packages in this path. default: "."
  args: "" Find all packages in any additional paths passed as args.
  description: "" Runs `npm run #{command}` in every subfolder with a package.json file.
  run: makeNpmRunCommand command

{}
  &update-mono-package
  &update-sub-packages

  test: makeNpmCommand :test
  build: makeNpmCommand :build

  sync:
    description:
      """
        Sync the root package.json with all package.json files in subfolders. This will ensure all packages are using the same version of every external dependency. It will also ensure all cross-referenced packages within the monorepo are referencing the latest version. Last, it will update the root package.json to contain all external references. It's best to run `npm install` immediately after running this.

        This happens in three steps:

        1. Clean: remove all package-lock.json files and all node_modules folders in sub-folders. There should only be one of each in the root of the monorepo.
        2. Update sub-packages: update all dependency versions in all sub-packages to match the root package.json.
        3. Update mono-package: update the root mono-repo's package.json with any new dependencies found in sub-packages as well as updating any cross-referencing between packages within the monorepo.

    options:
      quiet: "" Suppress output.

    run: (options) ->
      cleanMonorepo()
      .then -> &updateSubPackages.run options
      .then -> &updateMonoPackage.run options
      .then -> green "" All package.json files synced.

  run:
    description: "" 'npm run X' in all packages. This will run the command in every subfolder with a package.json file.
    options:
      verbose:  "" true/false
      folder:   "" find all packages in this path. default: "."
    args:  "" Npm run-command.
    run: (options, args) -> makeNpmRunCommand(args[0]) options, args.slice 1

  exec:
    description: "" Run shell command in every subfolder with a package.json file.
    options:
      verbose:  "" true/false
      folder:   "" find all packages in this path. default: "."
    args:  "" Shell command to run.
    run: (options, args) -> allPackageExec merge options, verb: :exec command: args.join " "

  &versions

  clean:
    description:
      "" Advanced: Delete all package-lock.json files and node_modules folders in all subfolders. There should only be one package-lock.json file and one node_modules folder located in the root of the monorepo.
    run: (options) ->
      cleanMonorepo()
      .then -> green "" Monorepo is clean.

  update:
    options:
      quiet: "" Suppress output.
    description: "" Advanced: Run the update-sub-packages then update-mono-package.
    run: (options) ->
      Promise
      .then -> &updateSubPackages.run options
      .then -> &updateMonoPackage.run options