"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "assert", "toInspectedObjects", "neq", "inspectedObjectLiteral"], [global, require('../StandardImport')], (test, assert, toInspectedObjects, neq, inspectedObjectLiteral) => {test("toInspectedObjects 'hi'", function() {return assert.eq(toInspectedObjects("hi"), "hi");}); test("toInspectedObjects function", function() {return neq(toInspectedObjects((a) => {}), inspectedObjectLiteral("a => {}")) ? assert.eq(toInspectedObjects((a) => {}), inspectedObjectLiteral("a => {}")) : undefined;}); test("toInspectedObjects a:1", function() {return assert.eq(toInspectedObjects({a: 1}), {a: 1});}); test("toInspectedObjects [1, 2]", function() {return assert.eq(toInspectedObjects([1, 2]), [1, 2]);}); test("toInspectedObjects [a:1, 2]", function() {return assert.eq(toInspectedObjects([{a: [1, 2]}]), [{a: [1, 2]}]);}); test("toInspectedObjects a:[1, 2], b:3", function() {return assert.eq(toInspectedObjects({a: [1, 2], b: 3}), {a: [1, 2], b: 3});}); test("inspectedObjectLiteral", function() {return assert.eq(toInspectedObjects({a: inspectedObjectLiteral("abc")}), {a: inspectedObjectLiteral("abc")});}); test("toInspectedObjects on JSON structure doesn't change anything", function() {let testStuff; testStuff = {string: "my string", number: 123, nullProp: null, trueProp: true, falseProp: false, nestedObject: {a: 1, b: 2}, nestedArray: [1, 2]}; assert.eq(testStuff, toInspectedObjects(testStuff)); return Caf.each2(["foo", null, 123, true, false, [], {}], (atom) => assert.eq(atom, toInspectedObjects(atom)));}); return test("toInspectedObjects twice doesn't change result", function() {let testStuff, once, twice; testStuff = {string: "my string", number: 123, literal: inspectedObjectLiteral("my literal"), nestedObject: {a: 1, b: 2}, nestedArray: [1, 2]}; once = toInspectedObjects(testStuff); twice = toInspectedObjects(once); assert.eq(once, twice); return assert.eq(once, {string: "my string", number: 123, literal: inspectedObjectLiteral("my literal"), nestedObject: {a: 1, b: 2}, nestedArray: [1, 2]});});});});
//# sourceMappingURL=toInspectedObjects.test.js.map
