"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["RegExp", "escapeRegexp", "min"], [global, require('art-standard-lib')], (RegExp, escapeRegexp, min) => {let compareMatchQuality, getSearchRegExp, getMatchQuality; return {compareMatchQuality: compareMatchQuality = function(a, b) {return a.quality - b.quality;}, getSearchRegExp: getSearchRegExp = function(searchString) {return {searchString, caseInsensative: new RegExp(Caf.array(searchString.split(""), (letter) => escapeRegexp(letter)).join(".*?"), "ig"), caseSensative: new RegExp(Caf.array(searchString.split(""), (letter) => escapeRegexp(letter)).join(".*?"), "g")};}, getMatchQuality: getMatchQuality = function(string, {caseInsensative, caseSensative, searchString}) {let quality, match, fullMatch; quality = 1 / 0; caseSensative.lastIndex = caseInsensative.lastIndex; match = fullMatch = null; while ((fullMatch = caseInsensative.exec(string)) && (match = fullMatch[0])) {let caseSensativeMatchLength, position, q1, base, base1; caseSensativeMatchLength = Caf.exists(base = caseSensative.exec(string)) && (Caf.exists(base1 = base[0]) && base1.length); caseSensative.lastIndex = caseInsensative.lastIndex = 1 + (position = fullMatch.index); q1 = match.length / searchString.length * 1000 + ((caseSensativeMatchLength === match.length) ? 0 : 10) + position / string.length; quality = min(quality, q1);}; return quality;}};});});
//# sourceMappingURL=Lib.js.map
