"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "deepEach", "assert", "deepMap", "toPlainStructure", "toJsonStructure"], [global, require('./StandardImport')], (describe, test, deepEach, assert, deepMap, toPlainStructure, toJsonStructure) => {return describe({deepEach: function() {return test("deepEach", () => {let structure, keys, values; structure = {a: 100, b: {c: [1, 2, 3], d: 300}}; keys = []; values = []; deepEach(structure, (v, k) => {keys.push(k); return values.push(v);}); assert.eq(keys, ["a", 0, 1, 2, "d"]); return assert.eq(values, [100, 1, 2, 3, 300]);});}, deepMap: function() {return test("deepMap", () => {let structure, result; structure = {a: 100, b: {c: [1, 2, 3], d: 300}}; result = deepMap(structure, (v) => v * 2); return assert.eq(result, {a: 200, b: {c: [2, 4, 6], d: 600}});});}, toPlainStructures: function() {let MyClass, structure; MyClass = Caf.defClass(class MyClass extends Object {constructor() {super(...arguments); this.foo = 123;};}, function(MyClass, classSuper, instanceSuper) {this.prototype.toString = function() {return "WOW";};}); structure = {a: 100, b: {c: [1, 2, 3], d: 300, f: new MyClass}}; test("toPlainStructure", () => {let result; result = toPlainStructure(structure); return assert.eq(result, {a: 100, b: {c: [1, 2, 3], d: 300, f: "MyClass"}});}); return test("toJsonStructure", () => {let result; result = toJsonStructure(structure); return assert.eq(result, {a: 100, b: {c: [1, 2, 3], d: 300, f: "WOW"}});});}});});});
//# sourceMappingURL=ArraysAndObjects.test.js.map
