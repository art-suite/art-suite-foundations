"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["isPlainArray", "isPlainObject", "isObject", "objectName", "isJsonAtomicType"], [global, require('./StandardImport')], (isPlainArray, isPlainObject, isObject, objectName, isJsonAtomicType) => {let noopMapper, deepMapArray, cloneObjectUpToKey, deepMapObject, deepEach, deepMap, toJsonStructure; noopMapper = function(v) {return v;}; deepMapArray = function(inputArray, mapper, options) {let res, p; res = null; Caf.each2(inputArray, (v, i) => {let r; r = deepMap(v, mapper, options); return (r !== v) ? (res != null ? res : res = inputArray.slice(), res[i] = r) : undefined;}); res != null ? res : res = inputArray; return (p = Caf.exists(options) && options.postprocessArray) ? p(res) : res;}; cloneObjectUpToKey = function(obj, k) {let res, from, into; res = {}; from = obj; into = from; if (from != null) {for (let k1 in from) {let v, k2; v = from[k1]; k2 = k1; if (k2 === k) {into = undefined; break;}; res[k2] = v;};}; into; return res;}; deepMapObject = function(obj, mapper, options) {let res, p; res = null; Caf.each2(obj, (v, k) => {let r; r = deepMap(v, mapper, options); return (r !== v || res) ? (res != null ? res : res = cloneObjectUpToKey(obj, k), res[k] = r) : undefined;}); res != null ? res : res = obj; return (p = Caf.exists(options) && options.postprocessObject) ? p(res) : res;}; return {deepEach: deepEach = function(v, f, key) {if (isPlainArray(v) || isPlainObject(v)) {Caf.each2(v, (subV, subK) => deepEach(subV, f, subK));} else {f(v, key);}; return v;}, deepMap: deepMap = function(v, mapper, options) {let arrayMapper, objectMapper; arrayMapper = Caf.exists(options) && options.arrays || noopMapper; objectMapper = Caf.exists(options) && options.objects || noopMapper; mapper != null ? mapper : mapper = noopMapper; return isPlainArray(v) ? deepMapArray(arrayMapper(v), mapper, options) : isPlainObject(v) ? deepMapObject(objectMapper(v), mapper, options) : mapper(v);}, toPlainStructure: function(o) {return deepMap(o, (o) => isObject(o) ? o.toPlainStructure ? o.toPlainStructure() : objectName(o) : o);}, toJsonStructure: toJsonStructure = function(o) {return deepMap(o, (o) => isObject(o) ? o.toJsonStructure ? o.toJsonStructure() : toJsonStructure(o.toPlainStructure ? o.toPlainStructure() : `${Caf.toString(o)}`) : isJsonAtomicType(o) ? o : `${Caf.toString(o)}`);}};});});
//# sourceMappingURL=ArraysAndObjects.js.map
