"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["WorkerRpc", "isWebWorker", "webWorkersSupported", "Object", "objectKeyCount", "Promise"], [global, require('art-standard-lib'), require('@art-suite/web-worker')], (WorkerRpc, isWebWorker, webWorkersSupported, Object, objectKeyCount, Promise) => {let workerRpc, localStorage, LocalStorageShimForNode, AsyncLocalStorage, temp; workerRpc = WorkerRpc.workerRpc; localStorage = (undefined !== (temp = global.localStorage)) ? temp : LocalStorageShimForNode = Caf.defClass(class LocalStorageShimForNode extends Object {}, function(LocalStorageShimForNode, classSuper, instanceSuper) {this._store = {}; this.getItem = (k) => this._store[k]; this.setItem = (k, v) => this._store[k] = v; this.removeItem = (k) => delete this._store[k]; this.clear = () => this._store = {}; this.key = (i) => Object.keys(this._store)[i]; this.getLength = () => objectKeyCount(this._store);}); return isWebWorker ? workerRpc.bindWithPromises({localStorage: ["getItem", "setItem", "removeItem", "clear", "key"]}) : (webWorkersSupported ? workerRpc.register({localStorage}) : undefined, AsyncLocalStorage = Caf.defClass(class AsyncLocalStorage extends Object {}, function(AsyncLocalStorage, classSuper, instanceSuper) {this.getItem = function(path) {return Promise.then(() => localStorage.getItem(path));}; this.setItem = function(path, value) {return Promise.then(() => localStorage.setItem(path, value));}; this.removeItem = function(path) {return Promise.then(() => localStorage.removeItem(path));}; this.clear = function() {return Promise.then(() => localStorage.clear());}; this.key = function(index) {return Promise.then(() => localStorage.key(index));}; this.getLength = function() {return Promise.then(() => localStorage.length);};}));});});
//# sourceMappingURL=AsyncLocalStorage.js.map
