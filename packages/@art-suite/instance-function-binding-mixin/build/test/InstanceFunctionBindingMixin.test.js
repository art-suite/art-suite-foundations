"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "BaseClass", "assert", "InstanceFunctionBindingMixin"], [global, require('./StandardImport')], (test, BaseClass, assert, InstanceFunctionBindingMixin) => {test("no mixin", function() {let MyClass, getFoo, mine; MyClass = Caf.defClass(class MyClass extends BaseClass {constructor() {super(...arguments); this.foo = "bar";};}, function(MyClass, classSuper, instanceSuper) {this.prototype.getFoo = function() {return this.foo;};}); ({getFoo} = mine = new MyClass); assert.eq("bar", mine.getFoo()); return assert.rejects(getFoo);}); test("mixin", function() {let MyClass, getFoo, mine; MyClass = Caf.defClass(class MyClass extends InstanceFunctionBindingMixin(BaseClass) {constructor() {super(...arguments); this.foo = "bar";};}, function(MyClass, classSuper, instanceSuper) {this.prototype.getFoo = function() {return this.foo;};}); ({getFoo} = mine = new MyClass); assert.eq("bar", mine.getFoo()); assert.rejects(getFoo); ({getFoo} = mine.bindFunctionsToInstance()); return assert.eq("bar", getFoo());}); return test("mixin hotreload updates bindings for changed functions; deletes bindings for deleted functions", function() {let MyClass, mine, myString, getFoo, extraF; MyClass = Caf.defClass(class MyClass extends InstanceFunctionBindingMixin(BaseClass) {constructor(string) {super(...arguments); this.foo = string; this.foo2 = string + "2";};}, function(MyClass, classSuper, instanceSuper) {this.prototype.getFoo = function() {return this.foo;}; this.prototype.extraF = function() {};}); mine = new MyClass(myString = "bar"); assert.eq(myString, mine.getFoo()); ({getFoo, extraF} = mine.bindFunctionsToInstance()); assert.eq(myString, getFoo()); assert.isFunction(extraF); MyClass.prototype.getFoo = function() {return this.foo2;}; delete MyClass.prototype.extraF; ({getFoo, extraF} = mine); assert.eq(myString, getFoo()); assert.isFunction(extraF); mine.bindFunctionsToInstance(true); ({getFoo, extraF} = mine); assert.eq(myString + "2", getFoo()); return assert.doesNotExists(extraF);});});});
//# sourceMappingURL=InstanceFunctionBindingMixin.test.js.map
