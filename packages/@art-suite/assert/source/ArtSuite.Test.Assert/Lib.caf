import &ArtStandardLib, &Presentation, &Chai

[]
  &Presentation
  {}
    ###
      IN:
        options:
          customFailure:
            (name, value, context) ->
            (name, value1, value2, context) ->

        tester:
          (a) -> true/false
          (a, b) -> true/false
    getTesterFor = (name, a, b) ->
      tester = if isFunction a
        a
      else if isPlainObject a
        options = a
        b
      else
        throw new Error "expected object or function"

      throw new Error "expected tester function" unless isFunction tester

      switch tester.length
      when 1
        (testValue, context) ->
          unless tester testValue
            if options?.customFailure
              options?.customFailure name, testValue, context

            else
              failWithExpectedMessage
                context
                inspectedObjectLiteral name
                "should be true for"
                testValue

      else
        (value1, value2, context) ->
          unless tester value1, value2
            if options?.customFailure
              options?.customFailure name, value1, value2, context
            else
              failWithExpectedMessage
                context
                value1
                switch name
                when :< :> :<= :>= :lte :gte
                  "" should be '#{name}' this value:
                when :== :eq :equal :match
                  "" should '#{name}' this value:
                else
                  "" should be '#{name}' to this value:
                value2

    addTester = (name, a, b) ->
      assert[name] = testerFor = getTesterFor name, a, b


    # each time a function is created, it is unique; this tests to see if the functions have the same strinigfied values
    # within a plain-objects data structures
    eqAfterStringifyingFunctions = (a, b) ->
      switch
      when isObject a then
        isObject b
        && eq Object.keys(a).sort(), Object.keys(b).sort()
        && !find v, k in a when !eqAfterStringifyingFunctions v, b[k]
      when isArray a then
        isArray b
        && a.length == b.length
        && !find v, i in a when !eqAfterStringifyingFunctions v, b[i]
      when isFunction a then
        isFunction b
        && "#{a}" == "#{b}"
      else eq a, b
