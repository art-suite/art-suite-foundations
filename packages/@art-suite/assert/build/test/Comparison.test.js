"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "assert"], [global, require('./StandardImport')], (test, assert) => {let Scaler, scaler; Scaler = Caf.defClass(class Scaler extends Object {constructor(x) {super(...arguments); this.x = x;};}, function(Scaler, classSuper, instanceSuper) {this.prototype.lte = function(p2) {return this.x <= p2.x;}; this.prototype.gte = function(p2) {return this.x >= p2.x;}; this.prototype.eq = function(p2) {return this.x === p2.x;};}); scaler = function(x) {return new Scaler(x);}; test("match", function() {assert.match("hi there", /t.*e/); assert.match("hi there", "hi"); assert.doesNotMatch("hi there", /j.*e/); assert.doesNotMatch("hi there", "ji"); assert.rejects(() => assert.match("hi there", /j.*e/)); return assert.rejects(() => assert.match("hi there", "ji"));}); test("within", function() {assert.within(5, 0, 10); assert.rejects(() => assert.within(-5, 0, 10)); return assert.rejects(() => assert.within(50, 0, 10));}); test("within using .lte and .gte", function() {assert.within(scaler(5), scaler(0), scaler(10)); assert.rejects(() => assert.within(scaler(-5), scaler(0), scaler(10))); return assert.rejects(() => assert.within(scaler(50), scaler(0), scaler(10)));}); return test("selectedEq", function() {assert.selectedEq({a: 123}, {a: 123, b: 456}); return assert.rejects(() => assert.selectedEq({a: 124}, {a: 123, b: 456}));});});});
//# sourceMappingURL=Comparison.test.js.map
