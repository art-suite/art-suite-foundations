"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Promise", "BatchLoader", "assert", "nextTick"], [global, require('./StandardImport')], (describe, test, Promise, BatchLoader, assert, nextTick) => {return describe({"Art.Foundation.Tools.BatchLoader": function() {test("single immediate load", () => new Promise((done) => {let loader; loader = new BatchLoader((src, addAsset) => addAsset(src, true)); loader.load("one", (assets) => {assert.eq(assets["one"], true); return done();}); return null;})); test("addAsset", () => {let al; al = new BatchLoader; al.addAsset("one", "foo"); al.addAsset("two", "bar"); assert.eq(al.assets, {one: "foo", two: "bar"}); return assert.eq(al.loadingAssets, {});}); test("two loads, one already done", () => new Promise((done) => {let loaderInvocations, loader; loaderInvocations = 0; loader = new BatchLoader((src, addAsset) => {loaderInvocations++; return addAsset(src, true);}); loader.addAsset("one", true); loader.load(["one", "two"], (assets) => {assert.eq(assets["one"], true); assert.eq(assets["two"], true); assert.eq(loaderInvocations, 1); return done();}); return null;})); return test("two overlapping simultanious listloads", () => new Promise((done) => {let loaderInvocations, loader, finish, count; loaderInvocations = 0; loader = new BatchLoader((src, addAsset) => {loaderInvocations++; return nextTick(() => addAsset(src, true));}); finish = () => {assert.equal(loaderInvocations, 3); assert.eq(loader.loadingAssets, {}); return done();}; count = 0; loader.load(["one", "two", "three"], (assets) => {if (assets["one"]) {count += 1;}; if (assets["two"]) {count += 1;}; if (assets["three"]) {count += 1;}; return (count === 6) ? finish() : undefined;}); loader.load(["one", "two", "three"], (assets) => {if (assets["one"]) {count += 1;}; if (assets["two"]) {count += 1;}; if (assets["three"]) {count += 1;}; return (count === 6) ? finish() : undefined;}); return null;}));}});});});
//# sourceMappingURL=BatchLoader.test.js.map
