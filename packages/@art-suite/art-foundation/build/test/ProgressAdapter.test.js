"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "ProgressAdapter", "timeout"], [global, require('./StandardImport')], (describe, test, assert, ProgressAdapter, timeout) => {return describe({"Art.Foundation.Tools.ProgressAdapter": function() {return test("checks parameters", () => {assert.throws(() => {let pa; return pa = new ProgressAdapter();}); assert.throws(() => {let pa; return pa = new ProgressAdapter(4);}); assert.throws(() => {let pa; return pa = new ProgressAdapter("hi", () => {});}); assert.throws(() => {let pa; return pa = new ProgressAdapter({}, () => {});}); new ProgressAdapter(4, () => {}); return new ProgressAdapter([4, 4], () => {});});}, "Art.Foundation.Tools.ProgressAdapter.steps": function() {test("new ProgressAdapter 4", () => {let pa; pa = new ProgressAdapter(4, () => {}); return assert.eq(pa.steps, [0, .25, .5, .75]);}); test("new ProgressAdapter [1, 1]", () => {let pa; pa = new ProgressAdapter([1, 1], () => {}); return assert.eq(pa.steps, [0, .5]);}); return test("new ProgressAdapter [1, 2, 1]", () => {let pa; pa = new ProgressAdapter([1, 2, 1], () => {}); return assert.eq(pa.steps, [0, .25, .75]);});}, "Art.Foundation.Tools.ProgressAdapter.makeProgress": function() {test("new ProgressAdapter 2 basic", () => {let callbackValues, pa; callbackValues = []; pa = new ProgressAdapter(2, (v) => callbackValues.push(v)); pa.makeProgress(); pa.makeProgress(); assert.eq(pa.warningCount, 0); return assert.eq(callbackValues, [0, .5, 1]);}); test("new ProgressAdapter 2 when called 3 times outputs console.warn", () => {let callbackValues, pa; callbackValues = []; pa = new ProgressAdapter(2, (v) => callbackValues.push(v)); pa.makeProgress(); pa.makeProgress(); pa.makeProgress(); assert.eq(pa.warningCount, 1); return assert.eq(callbackValues, [0, .5, 1, 1]);}); return test("new ProgressAdapter [1, 2, 1]", () => {let callbackValues, pa; callbackValues = []; pa = new ProgressAdapter([1, 2, 1], (v) => callbackValues.push(v)); pa.makeProgress(); pa.makeProgress(); pa.makeProgress(); return assert.eq(callbackValues, [0, .25, .75, 1]);});}, "Art.Foundation.Tools.ProgressAdapter.makeProgressCallback": function() {test("new ProgressAdapter 2", () => {let callbackValues, pa, cb; callbackValues = []; pa = new ProgressAdapter(2, (v) => callbackValues.push(v)); pa.makeProgress(); cb = pa.makeProgressCallback(); cb(0); cb(.5); cb(1); assert.eq(pa.warningCount, 0); return assert.eq(callbackValues, [0, .5, .5, .75, 1]);}); test("new ProgressAdapter 2 cant go backwards", () => {let callbackValues, pa, cb; callbackValues = []; pa = new ProgressAdapter(2, (v) => callbackValues.push(v)); pa.makeProgress(); cb = pa.makeProgressCallback(); cb(0); cb(.5); cb(0); cb(1); assert.eq(pa.warningCount, 0); return assert.eq(callbackValues, [0, .5, .5, .75, .75, 1]);}); return test("new ProgressAdapter [1, 2, 1]", () => {let callbackValues, pa, cb; callbackValues = []; pa = new ProgressAdapter([1, 2, 1], (v) => callbackValues.push(v)); pa.makeProgress(); cb = pa.makeProgressCallback(); cb(0); cb(.5); cb(1); pa.makeProgress(); assert.eq(pa.warningCount, 0); return assert.eq(callbackValues, [0, .25, .25, .5, .75, 1]);});}, "Art.Foundation.Tools.ProgressAdapter.executePromiseSequence": function() {test("new ProgressAdapter 2", () => {let callbackValues, events, pa; callbackValues = []; events = []; pa = new ProgressAdapter(2, (v) => callbackValues.push(v)); return pa.executePromiseSequence([(_, progressCallback) => {events.push("first step"); return timeout(10).then(() => {progressCallback(.25); return timeout(10);}).then(() => {progressCallback(.50); return timeout(10);}).then(() => {progressCallback(.75); return timeout(10);}).then(() => events.push("timeout"));}, () => events.push("second step")]).then(() => {assert.eq(callbackValues, [0, 0.125, 0.25, 0.375, 0.5, 1]); return assert.eq(events, ["first step", "timeout", "second step"]);});}); return test("ProgressAdapter.executePromiseSequence implicit weights", () => {let callbackValues, events; callbackValues = []; events = []; return ProgressAdapter.executePromiseSequence((v) => callbackValues.push(v), [(_, progressCallback) => {events.push("first step"); return timeout(10).then(() => {progressCallback(.25); return timeout(10);}).then(() => {progressCallback(.50); return timeout(10);}).then(() => {progressCallback(.75); return timeout(10);}).then(() => events.push("timeout"));}, () => events.push("second step")]).then(() => {assert.eq(callbackValues, [0, 0.125, 0.25, 0.375, 0.5, 1]); return assert.eq(events, ["first step", "timeout", "second step"]);});});}});});});
//# sourceMappingURL=ProgressAdapter.test.js.map
