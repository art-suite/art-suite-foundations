"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["JsonStore", "describe", "Object", "objectKeyCount", "chainedTest", "assert"], [global, require('./StandardImport')], (JsonStore, describe, Object, objectKeyCount, chainedTest, assert) => {let mockJsonStore, AsyncSessionStorage; mockJsonStore = new JsonStore(AsyncSessionStorage = Caf.defClass(class AsyncSessionStorage extends Object {}, function(AsyncSessionStorage, classSuper, instanceSuper) {this.store = {}; this.getItem = function(path) {return this.store[path];}; this.setItem = function(path, value) {return this.store[path] = value;}; this.removeItem = function(path) {return delete this.store[path];}; this.clear = function() {return this.store = {};}; this.key = function(index) {return Object.keys(this.store).sort()[index];}; this.getLength = function() {return objectKeyCount(this.store);};})); mockJsonStore.clear(); return describe({mockJsonStore: function() {return chainedTest(() => mockJsonStore.clear()).softTapTest(["get non existant item", () => mockJsonStore.getItem("oasdifaoi").then((result) => assert.doesNotExist(result))], ["clear, setItem, removeItem & length", () => mockJsonStore.getLength().then((length) => assert.eq(length, 0)).then(() => mockJsonStore.setItem("foo", "bar")).then(() => assert.resolved.eq("bar", mockJsonStore.getItem("foo"))).then(() => assert.resolved.eq(1, mockJsonStore.getLength())).then(() => mockJsonStore.setItem("foo2", "bar2")).then(() => assert.resolved.eq(2, mockJsonStore.getLength())).then(() => mockJsonStore.setItem("foo2", "bar3")).then(() => assert.resolved.eq(2, mockJsonStore.getLength())).then(() => mockJsonStore.removeItem("foo")).then(() => assert.resolved.eq(1, mockJsonStore.getLength()))], ["setItem k, custom:'hash'", () => {let o; o = null; return mockJsonStore.setItem("foo", o = {custom: "hash"}).then(() => assert.resolved.eq(o, mockJsonStore.getItem("foo"))).then(() => assert.resolved.notSame(o, mockJsonStore.getItem("foo")));}], ["setItem k, ['custom', 'array']", () => {let o; return mockJsonStore.setItem("foo", o = ["custom", "array"]).then(() => assert.resolved.eq(o, mockJsonStore.getItem("foo"))).then(() => assert.resolved.notSame(o, mockJsonStore.getItem("foo")));}], ["setItem k, complex:['object', 'with', 1], and:true", () => {let o; return mockJsonStore.setItem("foo", o = {complex: ["object", "with", 1], and: true}).then(() => assert.resolved.eq(o, mockJsonStore.getItem("foo"))).then(() => assert.resolved.notSame(o, mockJsonStore.getItem("foo")));}]);}});});});
//# sourceMappingURL=JsonStore.test.js.map
