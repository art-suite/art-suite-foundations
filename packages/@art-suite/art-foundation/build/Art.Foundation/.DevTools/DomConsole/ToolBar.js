// Generated by CoffeeScript 1.12.7

/*
To customize how an object shows up in the DOM console, add
getInspectedObjects member method. For more info, see base_object.coffee
 */

(function() {
  var A, BaseObject, Component, Div, DomConsole, Foundation, ToolBar, defineModule, ref, wordsArray,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Foundation = require('@art-suite/art-foundation');

  DomConsole = require('./namespace');

  Component = require('./PseudoReact').Component;

  BaseObject = Foundation.BaseObject, defineModule = Foundation.defineModule, wordsArray = Foundation.wordsArray;

  ref = Foundation.Browser.DomElementFactories, Div = ref.Div, A = ref.A;

  defineModule(module, ToolBar = (function(superClass) {
    extend(ToolBar, superClass);

    function ToolBar() {
      return ToolBar.__super__.constructor.apply(this, arguments);
    }

    ToolBar.prototype.render = function() {
      var action, shown;
      shown = this.state.shown;
      return Div({
        style: {
          position: "fixed",
          top: 0,
          right: 0,
          display: "flex",
          flexDirection: "row",
          borderBottom: "1px solid #aaa",
          borderLeft: "1px solid #aaa",
          fontSize: "10px",
          fontFamily: "Arial",
          justifyContent: "flex-end",
          backgroundColor: "#f7f3df"
        }
      }, Div({
        style: {
          margin: "5px"
        }
      }, "Art.Foundation.DomConsole"), (function() {
        var i, len, ref1, results;
        ref1 = ["reset", "show", "hide", "increaseWidth", "decreaseWidth"];
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          action = ref1[i];
          results.push((function(_this) {
            return function(action) {
              return Div({
                style: {
                  margin: "5px"
                }
              }, A({
                href: "#",
                on: {
                  click: function() {
                    return DomConsole[action]();
                  }
                }
              }, action));
            };
          })(this)(action));
        }
        return results;
      }).call(this));
    };

    return ToolBar;

  })(Component));

}).call(this);

//# sourceMappingURL=ToolBar.js.map
