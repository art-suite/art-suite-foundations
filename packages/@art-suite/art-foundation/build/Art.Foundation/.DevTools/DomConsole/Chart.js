// Generated by CoffeeScript 1.12.7
(function() {
  var Atomic, Chart, Foundation, Matrix, inspect, log, point, rect, rgbColor;

  Atomic = require('art-atomic');

  Foundation = require('art-foundation');

  point = Atomic.point, rgbColor = Atomic.rgbColor, rect = Atomic.rect, Matrix = Atomic.Matrix;

  inspect = Foundation.inspect, log = Foundation.log;

  module.exports = Chart = (function() {
    function Chart() {}

    Chart.bar = function(numbers, options) {
      var barArea, barColor, barWidth, bgColor, chartBgColor, drawArea, drawMatrix, fontSize, height, i, j, k, len, len1, margin, maxNumber, minWidth, out, percent, pixelsPerPoint, pos, range, size, textColor;
      if (options == null) {
        options = {};
      }
      range = options.range;
      pixelsPerPoint = options.pixelsPerPoint || 2;
      fontSize = options.fontSize || 10;
      margin = options.margin || (range ? fontSize * 1.4 : 0);
      bgColor = rgbColor(options.bgColor || rgbColor(1, 1, 1, 0));
      chartBgColor = rgbColor(options.chartBgColor || "#fff7f0");
      barColor = rgbColor(options.barColor || "rgba(0,0,0,.5)");
      textColor = rgbColor(options.textColor || "orange");
      minWidth = options.minWidth || 50;
      size = options.size || point(numbers.length * 4, 50 + 2 * margin);
      if (options.barWidth) {
        size = size.withX(numbers.length * options.barWidth);
      }
      if (size.x < minWidth) {
        size = size.withX(minWidth);
      }
      barWidth = size.x / numbers.length;
      drawMatrix = Matrix.scale(pixelsPerPoint);
      out = new Art.Canvas.Bitmap(size.mul(pixelsPerPoint));
      out.pixelsPerPoint = pixelsPerPoint;
      out.clear(bgColor);
      drawArea = rect(0, margin, size.w, size.h - 2 * margin);
      out.drawRectangle(drawMatrix, drawArea, chartBgColor);
      pos = drawArea.left;
      maxNumber = 0;
      for (j = 0, len = numbers.length; j < len; j++) {
        i = numbers[j];
        if (i > maxNumber) {
          maxNumber = i;
        }
      }
      for (k = 0, len1 = numbers.length; k < len1; k++) {
        i = numbers[k];
        percent = i / maxNumber;
        height = drawArea.h * percent;
        barArea = rect(pos, drawArea.bottom - height, barWidth, height).round();
        out.drawRectangle(drawMatrix, barArea, barColor);
        pos += barWidth;
      }
      if (range) {
        out.drawText(Matrix.translate(0, fontSize).mul(drawMatrix), "max: " + maxNumber, {
          size: fontSize,
          color: textColor
        });
        out.drawText(Matrix.translate(0, size.y).mul(drawMatrix), range[0], {
          size: fontSize,
          color: textColor
        });
        out.drawText(Matrix.translate(size).mul(drawMatrix), range[1], {
          size: fontSize,
          color: textColor,
          align: "right"
        });
      }
      return out;
    };

    return Chart;

  })();

}).call(this);

//# sourceMappingURL=Chart.js.map
