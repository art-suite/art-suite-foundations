// Generated by CoffeeScript 1.12.7
(function() {
  var BaseObject, Component, Div, Foundation, createObjectTreeFactory, merge,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Foundation = require('@art-suite/art-foundation');

  Div = Foundation.Browser.DomElementFactories.Div;

  merge = Foundation.merge, BaseObject = Foundation.BaseObject;

  createObjectTreeFactory = require('art-object-tree-factory').createObjectTreeFactory;


  /*
  PseudoReact.Component
  ---------------------
  
  Difference between this and real React:
  
    - There is no virtual-dom!
    - There is no life-cycle!
    - There is no @refs
    - Methods ARE NOT BOUND to instances
  
    - @setState and @state are minimally supported
      - setState is epoched, on a per-component basis
      - setting the state results in a full @rerender
  
    - @rerender is provided for manually rerendering
  
    - @rerender DOEST NOT DIFF! It just re-generates EVERYTHING.
      There are NO INCREMENTAL UPDATES within a Component.
      However, you can rerender a sub-component and the parent
      component will not need to be re-rendered.
  
    - @render returns an HTMLElement instead of a virtual-element.
  
    - Component-factories don't actually return components, they return HTMLElements.
      WHY? So they can be used in @render functions in the normal React-style.
   */

  module.exports = Component = (function(superClass) {
    extend(Component, superClass);

    Component.postCreate = function() {
      return this.toComponentFactory();
    };

    Component.toComponentFactory = function() {
      return createObjectTreeFactory((function(_this) {
        return function(props, children) {
          if (props != null) {
            props.children || (props.children = children);
          }
          return (new _this(props)).rerender();
        };
      })(this));
    };

    function Component(props1) {
      this.props = props1 != null ? props1 : {};
      this.state = this.getInitialState();
      this._pendingState = null;
    }

    Component.prototype.getInitialState = function() {
      return {};
    };

    Component.prototype.getPendingState = function() {
      if (this._pendingState) {
        return this._pendingState;
      }
      this._queueApplyPendingState();
      return this._pendingState = {};
    };

    Component.prototype._queueApplyPendingState = function() {
      return setTimeout(((function(_this) {
        return function() {
          return _this._applyPendingState();
        };
      })(this)), 0);
    };

    Component.prototype._applyPendingState = function() {
      var k, ref, v;
      ref = this._pendingState;
      for (k in ref) {
        v = ref[k];
        this.state[k] = v;
      }
      this.rerender();
      return this._pendingState = null;
    };

    Component.prototype._setState = function(k, v) {
      return this.getPendingState()[k] = v;
    };

    Component.prototype.setState = function(a, b) {
      var k, results, v;
      if (a.constructor === Object) {
        results = [];
        for (k in a) {
          v = a[k];
          results.push(this._setState(k, v));
        }
        return results;
      } else {
        return this._setState(a, b);
      }
    };

    Component.prototype.rerender = function() {
      var oldRootElement, ref;
      oldRootElement = this._rootElement;
      this._render();
      if (oldRootElement != null) {
        if ((ref = oldRootElement.parentElement) != null) {
          ref.replaceChild(this._rootElement, oldRootElement);
        }
      }
      return this._rootElement;
    };

    Component.prototype.render = function() {
      return Div();
    };

    Component.prototype._render = function() {
      return this._rootElement = this.render();
    };

    return Component;

  })(BaseObject);

}).call(this);

//# sourceMappingURL=Component.js.map
