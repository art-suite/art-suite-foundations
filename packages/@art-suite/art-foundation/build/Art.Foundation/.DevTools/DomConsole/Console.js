// Generated by CoffeeScript 1.12.7

/*
To customize how an object shows up in the DOM console, add
getInspectedObjects member method. For more info, see base_object.coffee
 */

(function() {
  var Atomic, BaseObject, Color, Console, Div, Foundation, Img, InspectedObjectLiteral, Li, Pre, Promise, Span, ToolBar, Ul, clone, colorRegExp, containsImages, containsPromises, createWithPostCreate, deepAll, deepEach, deepMap, domConsoleId, escapeJavascriptString, findColorRegExp, flatten, hasProperties, htmlEscape, imgToDom, insertBetweenEveryElement, inspect, inspectLean, isArray, isColorOrColorString, isFunction, isHTMLImageElement, isNumber, isPlainArray, isPlainObject, isString, merge, nextTick, objectKeyCount, packageLogArgs, point, point0, ref, ref1, resolveImages, rgbColor, timeout, toInspectedObjects,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  if (self.document) {
    require("./style.css");
  }

  Foundation = require('art-foundation');

  Atomic = require('art-atomic');

  ToolBar = require('./ToolBar');

  isColorOrColorString = Atomic.isColorOrColorString, rgbColor = Atomic.rgbColor, Color = Atomic.Color, point = Atomic.point, point0 = Atomic.point0;

  BaseObject = Foundation.BaseObject, inspect = Foundation.inspect, clone = Foundation.clone, merge = Foundation.merge, nextTick = Foundation.nextTick, timeout = Foundation.timeout, flatten = Foundation.flatten, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, createWithPostCreate = Foundation.createWithPostCreate, colorRegExp = Foundation.colorRegExp, Promise = Foundation.Promise, containsPromises = Foundation.containsPromises, deepAll = Foundation.deepAll, toInspectedObjects = Foundation.toInspectedObjects, isPlainArray = Foundation.isPlainArray, isPlainObject = Foundation.isPlainObject, hasProperties = Foundation.hasProperties, objectKeyCount = Foundation.objectKeyCount, InspectedObjectLiteral = Foundation.InspectedObjectLiteral, deepEach = Foundation.deepEach, deepMap = Foundation.deepMap, inspectLean = Foundation.inspectLean, escapeJavascriptString = Foundation.escapeJavascriptString, findColorRegExp = Foundation.findColorRegExp;

  ref = require('./Images'), containsImages = ref.containsImages, resolveImages = ref.resolveImages, isHTMLImageElement = ref.isHTMLImageElement, imgToDom = ref.imgToDom;

  ref1 = Foundation.Browser.DomElementFactories, Div = ref1.Div, Pre = ref1.Pre, Span = ref1.Span, Img = ref1.Img, Li = ref1.Li, Ul = ref1.Ul;

  htmlEscape = function(str) {
    return str;
  };

  insertBetweenEveryElement = function(array, el) {
    var first, j, len, res, v;
    res = [];
    first = true;
    for (j = 0, len = array.length; j < len; j++) {
      v = array[j];
      if (first) {
        first = false;
      } else {
        res.push(el);
      }
      res.push(v);
    }
    return res;
  };

  domConsoleId = 'artDomConsole';

  packageLogArgs = function(args) {
    if (args.length === 1) {
      return args[0];
    } else {
      return args;
    }
  };

  module.exports = createWithPostCreate(Console = (function(superClass) {
    var literalToDomHelper, logCount, logSerializer, noOptions, toggleCollapsable;

    extend(Console, superClass);

    Console.singletonClass();

    Console.postCreate = function() {
      self.domConsole = this.singleton;
      return Console.__super__.constructor.postCreate.apply(this, arguments);
    };

    function Console() {
      window.domConsole = this;
      this._width = 500;
      this.initDom();
    }

    Console.prototype.reset = function() {
      return this.domContainer.innerHTML = "";
    };

    Console.prototype.hide = function() {
      return this.domConsoleParent.style.display = "none";
    };

    Console.prototype.show = function() {
      return this.domConsoleParent.style.display = "block";
    };

    Console.prototype.increaseWidth = function() {
      return this.width += 25;
    };

    Console.prototype.decreaseWidth = function() {
      return this.width -= 25;
    };

    Console.getter({
      shown: function() {
        return this.domContainer.style.display === "block";
      }
    });

    toggleCollapsable = function(el) {
      var child, j, len, ref2;
      ref2 = el.parentElement.children;
      for (j = 0, len = ref2.length; j < len; j++) {
        child = ref2[j];
        child.style.display = "block";
      }
      return el.style.display = "none";
    };

    Console.setter({
      width: function(w) {
        this._width = w;
        return this.domConsoleParent.style.width = w + "px";
      }
    });

    Console.getter("width");

    Console.prototype.initDom = function() {
      var bodyChildren, child, delay, fixMochaStats, maxAttempts, mocha;
      mocha = document.getElementById("mocha");
      bodyChildren = (function() {
        var j, len, ref2, results;
        ref2 = document.body.childNodes;
        results = [];
        for (j = 0, len = ref2.length; j < len; j++) {
          child = ref2[j];
          results.push(child);
        }
        return results;
      })();
      document.body.appendChild(Div(null, Div({
        style: {
          display: "flex",
          flexDirection: "row",
          position: "fixed",
          left: "0",
          right: "0",
          top: "0",
          bottom: "0"
        }
      }, Div({
        id: domConsoleId + "Area",
        style: {
          flex: "1 1 auto",
          overflow: "scroll"
        }
      }, bodyChildren), this.domConsoleParent = Div({
        style: {
          overflow: "auto",
          backgroundColor: "white",
          top: "0",
          bottom: "0",
          paddingTop: "25px",
          flex: "0 0 auto",
          width: this._width + "px",
          borderLeft: "1px solid #aaa"
        }
      }, this.domContainer = Div({
        "class": "domConsole",
        style: {
          padding: "5px"
        },
        on: {
          click: (function(_this) {
            return function(arg) {
              var results, target;
              target = arg.target;
              results = [];
              while (target) {
                if (target.className.match("collapsable")) {
                  toggleCollapsable(target);
                  break;
                }
                results.push(target = target.parentElement);
              }
              return results;
            };
          })(this)
        }
      }))), ToolBar()));
      if (mocha) {
        maxAttempts = 8;
        delay = 125 / 2;
        fixMochaStats = function() {
          var ms;
          if (!maxAttempts--) {
            console.log("domConsoleMocha fixMochaStats... giving up; sorry for the ugly screen");
            return;
          }
          delay *= 2;
          if (ms = document.getElementById("mocha-stats")) {
            return ms.style.position = "relative";
          } else {
            console.log("domConsoleMocha fixMochaStats... (waiting " + delay + "ms for #mocha-stats div to appear: " + maxAttempts + ")");
            return timeout(delay, fixMochaStats);
          }
        };
        return timeout(delay, fixMochaStats);
      }
    };

    Console.prototype.appendLog = function(domElement) {
      this.domContainer.appendChild(Div({
        "class": "logLine"
      }, domElement));
      return nextTick((function(_this) {
        return function() {
          return _this.domConsoleParent.scrollTop = _this.domConsoleParent.scrollHeight;
        };
      })(this));
    };

    Console.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.logCore(packageLogArgs(args));
      return args[args.length - 1];
    };

    Console.prototype.logF = function(options) {
      this.logCore(options.log, null, null, options);
      return options.log;
    };

    Console.prototype.format = function(domEl, options) {
      var backgroundColor, label, labelColor;
      label = options.label, labelColor = options.labelColor, backgroundColor = options.backgroundColor;
      if (label) {
        domEl = Div({
          style: {
            backgroundColor: backgroundColor
          }
        }, Div(label, {
          style: {
            color: labelColor,
            fontWeight: "bold"
          }
        }), Div({
          style: {
            paddingLeft: "10px"
          }
        }, domEl));
      }
      return domEl;
    };

    Console.prototype.arrayKidsToDomArray = function(arrayOfInspectedObjects, Factory, options, addCommasAndBrackets) {
      var child, i, kids;
      options.maxDepth--;
      kids = (function() {
        var j, len, results;
        results = [];
        for (i = j = 0, len = arrayOfInspectedObjects.length; j < len; i = ++j) {
          child = arrayOfInspectedObjects[i];
          if (i > 50) {
            break;
          }
          if (i === 50) {
            results.push(Factory({
              "class": "value"
            }, "array length: " + arrayOfInspectedObjects.length + " (showing the first " + i + ")"));
          } else {
            results.push(Factory({
              "class": "value"
            }, this.toDom(child, options)));
          }
        }
        return results;
      }).call(this);
      options.maxDepth++;
      if (addCommasAndBrackets) {
        kids = this.addCommasAndBrackets(kids, "[", "]");
      }
      return kids;
    };

    Console.prototype.arrayToDomBasic = function(arrayOfInspectedObjects, options) {
      var l;
      if (options.maxDepth === 0) {
        return Span({
          "class": "array maxdepth " + options["class"]
        }, arrayOfInspectedObjects.length === 0 ? "[]" : arrayOfInspectedObjects.length <= 5 && (l = inspectLean(arrayOfInspectedObjects)).length <= 30 ? "[" + l + "]" : "[... " + arrayOfInspectedObjects.length + "]");
      }
      return Span({
        "class": "array " + options["class"]
      }, this.arrayKidsToDomArray(arrayOfInspectedObjects, Span, options, true));
    };

    Console.prototype.arrayToDom = function(arrayOfInspectedObjects, options) {
      if (options.treeView) {
        return this.arrayToDomTreeView(arrayOfInspectedObjects, options);
      } else {
        return this.arrayToDomBasic(arrayOfInspectedObjects, options);
      }
    };

    Console.prototype.addCommasAndBrackets = function(kids, leftBracket, rightBracket, typeName) {
      var i, j, kid, len;
      for (i = j = 0, len = kids.length; j < len; i = ++j) {
        kid = kids[i];
        if (i + 1 < kids.length) {
          kid.appendChild(Span(", "));
        }
      }
      return flatten(leftBracket, typeName, kids, rightBracket);
    };

    Console.prototype.mapKidsToDomArray = function(inspectedObject, Factory, options, addCommasAndBrackets) {
      var k, kids, v;
      options.maxDepth--;
      kids = (function() {
        var results;
        results = [];
        for (k in inspectedObject) {
          v = inspectedObject[k];
          results.push(Factory(null, Span({
            "class": "key"
          }, k + ": "), Span({
            "class": "value"
          }, this.toDom(v, options))));
        }
        return results;
      }).call(this);
      options.maxDepth++;
      if (addCommasAndBrackets) {
        return this.addCommasAndBrackets(kids, "{", "}");
      } else {
        return kids;
      }
    };

    Console.prototype.objectToDomBasic = function(inspectedObject, options) {
      var inside, l, length;
      if (options.maxDepth === 0) {
        length = objectKeyCount(inspectedObject);
        inside = length === 0 ? "" : length <= 5 ? (l = inspectLean(inspectedObject)).length <= 40 ? l : Object.keys(inspectedObject).join(' ') : "" + length;
        return Span({
          "class": "object maxdepth " + options["class"]
        }, "{" + inside + "}");
      }
      return Span({
        "class": "object"
      }, this.mapKidsToDomArray(inspectedObject, Span, options, true));
    };

    Console.prototype.treeViewCollapsable = function(collapsablePair, options) {
      collapsablePair[options.collapsed ? 0 : 1].style.display = "none";
      return collapsablePair;
    };

    Console.prototype.arrayToDomTreeView = function(arrayOfInspectedObjects, options) {
      if (arrayOfInspectedObjects.length === 0) {
        return Span({
          "class": "array"
        }, "[]");
      }
      return this.treeViewCollapsable([
        Ul({
          "class": "array collapsable open"
        }, this.arrayKidsToDomArray(arrayOfInspectedObjects, Li, options)), Ul({
          "class": "array collapsable closed"
        }, this.arrayToDomBasic(arrayOfInspectedObjects, merge(options, {
          maxDepth: 1,
          treeView: false
        })))
      ], options);
    };

    Console.prototype.objectToDomTreeView = function(inspectedObject, options) {
      if (!hasProperties(inspectedObject)) {
        return Span({
          "class": "object"
        }, "{}");
      }
      return this.treeViewCollapsable([
        Ul({
          "class": "object collapsable open"
        }, this.mapKidsToDomArray(inspectedObject, Li, options)), Ul({
          "class": "object collapsable closed"
        }, this.objectToDomBasic(inspectedObject, merge(options, {
          maxDepth: 1,
          treeView: false
        })))
      ], options);
    };

    Console.prototype.objectToDom = function(inspectedObject, options) {
      if (options.treeView) {
        return this.objectToDomTreeView(inspectedObject, options);
      } else {
        return this.objectToDomBasic(inspectedObject, options);
      }
    };

    literalToDomHelper = function(classes, literalString) {
      var Factory;
      Factory = literalString.match(/\s\s+|\n/) ? Pre : Span;
      return Factory({
        "class": classes
      }, literalString);
    };

    Console.prototype.literalToDom = function(inspectedObject) {
      return literalToDomHelper("literal", isString(inspectedObject) ? escapeJavascriptString(inspectedObject) : "" + inspectedObject);
    };

    Console.prototype.errorLiteralToDom = function(inspectedObject) {
      return literalToDomHelper("errorLiteral", inspectedObject.toString());
    };

    Console.prototype.warningLiteralToDom = function(inspectedObject) {
      return literalToDomHelper("warningLiteral", inspectedObject.toString());
    };

    Console.prototype.colorToDom = function(clr) {
      var c, clrString, displayString, ref2, ref3;
      displayString = isString(clrString = clr) ? ((ref2 = clr.match(findColorRegExp), c = ref2[0], ref2), clr = rgbColor(c), clrString) : (ref3 = typeof clr.inspect === "function" ? clr.inspect() : void 0) != null ? ref3 : clr.toString();
      return Span({
        "class": "inspected",
        style: {
          backgroundColor: clr,
          padding: "0 5px",
          color: clr.perceptualLightness < .8 && clr.a > .25 ? 'white' : 'black'
        }
      }, "" + displayString);
    };

    Console.prototype.toDom = function(inspectedObject, options) {
      if (options == null) {
        options = {};
      }
      if (inspectedObject == null) {
        return this.literalToDom(inspectedObject);
      } else if (inspectedObject instanceof InspectedObjectLiteral) {
        if (isColorOrColorString(inspectedObject.literal)) {
          return this.colorToDom(inspectedObject.literal);
        } else if (inspectedObject.isError) {
          console.error(inspectedObject.literal);
          return this.errorLiteralToDom(inspectedObject.literal);
        } else if (inspectedObject.isWarning) {
          console.warn(inspectedObject.literal);
          return this.warningLiteralToDom(inspectedObject.literal);
        } else {
          return literalToDomHelper("literal", inspectedObject.literal);
        }
      } else if (isHTMLImageElement(inspectedObject)) {
        return imgToDom(inspectedObject);
      } else if (isColorOrColorString(inspectedObject)) {
        return this.colorToDom(inspectedObject);
      } else if (isPlainArray(inspectedObject)) {
        return this.arrayToDom(inspectedObject, options);
      } else if (isPlainObject(inspectedObject)) {
        return this.objectToDom(inspectedObject, options);
      } else {
        return this.literalToDom(inspectedObject);
      }
    };

    logSerializer = new Promise.Serializer;

    logCount = 1;

    noOptions = {};

    Console.prototype.logCore = function(m, callStack, options) {
      var formatSystemMessage, hasPromises, localLogCount, ret;
      if (options == null) {
        options = noOptions;
      }
      formatSystemMessage = function(params) {
        var failure, pending, success, warning;
        success = params.success, failure = params.failure, pending = params.pending, warning = params.warning;
        return {
          backgroundColor: (function() {
            switch (false) {
              case !failure:
                return "#fee";
              case !warning:
                return "#ffe";
            }
          })(),
          labelColor: (function() {
            switch (false) {
              case !success:
                return "green";
              case !failure:
                return "#a00";
              case !pending:
                return "blue";
              case !warning:
                return "#aa0";
            }
          })(),
          label: (success || failure || pending || warning) + ": (log #" + localLogCount + ")"
        };
      };
      localLogCount = logCount;
      if (hasPromises = containsPromises(m)) {
        options = merge(options, formatSystemMessage({
          pending: "RESOLVING PROMISES"
        }));
      }
      if (options.isError) {
        options = merge(options, formatSystemMessage({
          failure: "ERROR"
        }));
      }
      if (options.isWarning) {
        options = merge(options, formatSystemMessage({
          warning: "WARNING"
        }));
      }
      ret = logSerializer.then((function(_this) {
        return function() {
          var maxDepth;
          options.treeView = true;
          maxDepth = options.maxDepth;
          if (!isNumber(maxDepth)) {
            maxDepth = 20;
          }
          if (typeof m === "string" && !colorRegExp.test(m)) {
            return _this.appendLog(_this.format(Pre(m), options));
          } else {
            return Promise.then(function() {
              var inspected;
              if (containsImages(inspected = toInspectedObjects(m))) {
                return resolveImages(inspected);
              } else {
                return inspected;
              }
            }).then(function(inspected) {
              var domEl;
              domEl = _this.toDom(inspected, options);
              return _this.appendLog(_this.format(domEl, options));
            });
          }
        };
      })(this));
      logSerializer["catch"](function(e) {
        return console.error("Error in DomConsole.Console", e);
      });
      if (hasPromises) {
        deepAll(m, function(promiseResult) {
          return {
            'promise.then': promiseResult
          };
        }).then((function(_this) {
          return function(resolvedM) {
            return _this.logCore(resolvedM, callStack, merge(options, formatSystemMessage({
              success: "ALL PROMISES RESOLVED"
            })));
          };
        })(this))["catch"]((function(_this) {
          return function(rejected) {
            return _this.logCore(rejected, callStack, merge(options, formatSystemMessage({
              failure: "ONE OR MORE PROMISES WERE REJECTED"
            })));
          };
        })(this));
      }
      logCount++;
      return ret;
    };

    return Console;

  })(BaseObject));

}).call(this);

//# sourceMappingURL=Console.js.map
