// Generated by CoffeeScript 1.12.7
(function() {
  var Atomic, Foundation, Images, Img, Promise, deepAll, deepEach, deepMap, defineModule, devicePixelRatio, isFunction, point, point0, ref;

  ref = Neptune.Art, Foundation = ref.Foundation, Atomic = ref.Atomic;

  deepAll = Foundation.deepAll, deepMap = Foundation.deepMap, isFunction = Foundation.isFunction, defineModule = Foundation.defineModule, deepEach = Foundation.deepEach, Promise = Foundation.Promise;

  Img = Foundation.Browser.DomElementFactories.Img;

  point = Atomic.point, point0 = Atomic.point0;

  devicePixelRatio = Foundation.Browser.Dom.getDevicePixelRatio();

  defineModule(module, Images = (function() {
    var isHTMLImageElement, isImage;

    function Images() {}

    Images.isHTMLImageElement = isHTMLImageElement = global.HTMLImageElement ? function(obj) {
      return obj instanceof HTMLImageElement;
    } : function() {
      return false;
    };

    Images.isImage = isImage = function(o) {
      return o && (isFunction(o.toImage)) || isHTMLImageElement(o);
    };

    Images.containsImages = function(plainStructure) {
      var foundImages;
      foundImages = false;
      deepEach(plainStructure, function(v) {
        return foundImages || (foundImages = isImage(v));
      });
      return foundImages;
    };

    Images.resolveImages = function(plainStructure) {
      return deepAll(deepMap(plainStructure, function(element) {
        if (!isImage(element)) {
          return element;
        }
        return Promise.then(function() {
          if (isHTMLImageElement(element)) {
            return element;
          } else {
            return element.toImage();
          }
        }).then(function(htmlImageElement) {
          htmlImageElement;
          if (htmlImageElement.complete) {
            return htmlImageElement;
          } else {
            return new Promise(function(resolve) {
              return htmlImageElement.onload = function() {
                return resolve(htmlImageElement);
              };
            });
          }
        });
      }));
    };

    Images.imgToDom = function(image) {
      var maxImageDisplaySize, minImageDisplaySize, scale, size;
      minImageDisplaySize = point(32);
      maxImageDisplaySize = point(1024, 512).mul(devicePixelRatio);
      size = point(image.width, image.height);
      scale = 1 / devicePixelRatio;
      if (!size.gte(minImageDisplaySize)) {
        scale *= Math.ceil(minImageDisplaySize.div(size).min());
      } else if (!size.lt(maxImageDisplaySize)) {
        scale *= maxImageDisplaySize.div(size).min();
      }
      return Img({
        src: image.src
      }, size.gt(point0) ? {
        style: {
          width: (image.naturalWidth * scale | 0) + "px",
          height: (image.naturalHeight * scale | 0) + "px",
          "image-rendering": "pixelated"
        }
      } : void 0);
    };

    return Images;

  })());

}).call(this);

//# sourceMappingURL=Images.js.map
