// Generated by CoffeeScript 1.12.7
(function() {
  var BaseObject, ClassSystem, StandardLib, Stat, inspect, max, min, round,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StandardLib = require('art-standard-lib');

  ClassSystem = require('art-class-system');

  BaseObject = ClassSystem.BaseObject;

  min = StandardLib.min, max = StandardLib.max, round = StandardLib.round, inspect = StandardLib.inspect;

  module.exports = Stat = (function(superClass) {
    extend(Stat, superClass);

    function Stat() {
      this.reset();
    }

    Stat.prototype.reset = function() {
      this.values = [];
      this.sum = 0;
      return this.max = this.min = null;
    };

    Stat.getter({
      length: function() {
        return this.values.length;
      },
      average: function() {
        return this.sum / this.values.length;
      },
      median: function() {
        return this.values.slice().sort()[this.length / 2 | 0];
      }
    });

    Stat.prototype.percential = function(zeroToOneHundred) {
      var i, sorted;
      i = ((this.length - 1) * zeroToOneHundred / 100) | 0;
      sorted = this.values.slice().sort(function(v1, v2) {
        return v2 - v1;
      });
      return sorted[i];
    };

    Stat.prototype.histogram = function(divisions, min, max) {
      var bin, delta, hist, j, k, len, mul, ref, ref1, v;
      if (min == null) {
        min = this.min;
      }
      if (max == null) {
        max = this.max;
      }
      delta = max - min;
      mul = divisions / delta;
      hist = {};
      for (v = j = 0, ref = divisions; j < ref; v = j += 1) {
        hist[min + v / mul] = 0;
      }
      ref1 = this.values;
      for (k = 0, len = ref1.length; k < len; k++) {
        v = ref1[k];
        bin = (v - min) * mul | 0;
        if (bin < 0) {
          bin = 0;
        }
        if (bin >= divisions) {
          bin = divisions - 1;
        }
        hist[min + bin / mul]++;
      }
      return hist;
    };

    Stat.prototype.toString = function() {
      return inspect({
        length: this.length,
        average: this.average,
        median: this.median,
        min: this.min,
        max: this.max
      });
    };

    Stat.prototype.toInfoMap = function() {
      return {
        length: this.length,
        average: this.average,
        median: this.median,
        min: this.min,
        max: this.max,
        p90: this.percential(90),
        p95: this.percential(95),
        p99: this.percential(99)
      };
    };

    Stat.prototype.toIntInfoMap = function() {
      return {
        length: this.length,
        average: round(this.average),
        median: round(this.median),
        min: round(this.min),
        max: round(this.max),
        p90: round(this.percential(90)),
        p95: round(this.percential(95)),
        p99: round(this.percential(99))
      };
    };

    Stat.prototype.toIntString = function() {
      return inspect(this.toIntInfoMap());
    };

    Stat.prototype.add = function(v) {
      this.values.push(v);
      this.sum += v;
      if (this.values.length === 1) {
        return this.max = this.min = v;
      } else {
        this.max = max(this.max, v);
        return this.min = min(this.min, v);
      }
    };

    return Stat;

  })(BaseObject);

}).call(this);

//# sourceMappingURL=Stat.js.map
