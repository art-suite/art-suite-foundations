// Generated by CoffeeScript 1.12.7
(function() {
  var Promise, defineModule, isWebWorker, log, objectKeyCount, ref, workerRpc;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, Promise = ref.Promise, log = ref.log, objectKeyCount = ref.objectKeyCount;

  isWebWorker = require('./WebWorker').isWebWorker;

  workerRpc = require('./WorkerRpc').workerRpc;


  /*
  AsyncLocalStorage defines a consistent API for localStorage across web-workers and the main thread.
  
  API:
    AsyncLocalStorage.
      getItem:    (path)        -> promise.then -> item at path
      setItem:    (path, value) -> promise.then -> success
      removeItem: (path)        -> promise.then -> success
      clear:                    -> promise.then -> success
   */

  defineModule(module, function() {
    var AsyncLocalStorage, LocalStorageShimForNode, localStorage;
    localStorage = global.localStorage;
    localStorage || (localStorage = LocalStorageShimForNode = (function() {
      function LocalStorageShimForNode() {}

      LocalStorageShimForNode.store = {};

      LocalStorageShimForNode.getItem = function(k) {
        return LocalStorageShimForNode.store[k];
      };

      LocalStorageShimForNode.setItem = function(k, v) {
        return LocalStorageShimForNode.store[k] = v;
      };

      LocalStorageShimForNode.removeItem = function(k) {
        return delete LocalStorageShimForNode.store[k];
      };

      LocalStorageShimForNode.clear = function() {
        return LocalStorageShimForNode.store = {};
      };

      LocalStorageShimForNode.key = function(i) {
        return Object.keys(LocalStorageShimForNode.store)[i];
      };

      LocalStorageShimForNode.getLength = function() {
        return objectKeyCount(LocalStorageShimForNode.store);
      };

      return LocalStorageShimForNode;

    })());
    if (isWebWorker) {
      return workerRpc.bindWithPromises({
        localStorage: ["getItem", "setItem", "removeItem", "clear", "key"]
      });
    } else {
      workerRpc.register({
        localStorage: localStorage
      });
      return AsyncLocalStorage = (function() {
        function AsyncLocalStorage() {}

        AsyncLocalStorage.getItem = function(path) {
          return Promise.then(function() {
            return localStorage.getItem(path);
          });
        };

        AsyncLocalStorage.setItem = function(path, value) {
          return Promise.then(function() {
            return localStorage.setItem(path, value);
          });
        };

        AsyncLocalStorage.removeItem = function(path) {
          return Promise.then(function() {
            return localStorage.removeItem(path);
          });
        };

        AsyncLocalStorage.clear = function() {
          return Promise.then(function() {
            return localStorage.clear();
          });
        };

        AsyncLocalStorage.key = function(index) {
          return Promise.then(function() {
            return localStorage.key(index);
          });
        };

        AsyncLocalStorage.getLength = function() {
          return Promise.then(function() {
            return localStorage.length;
          });
        };

        return AsyncLocalStorage;

      })();
    }
  });

}).call(this);

//# sourceMappingURL=AsyncLocalStorage.js.map
