// Generated by CoffeeScript 1.12.7
(function() {
  var BaseObject, BatchLoader, ClassSystem, StandardLib, inspect, log, nextTick, timeout,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StandardLib = require('art-standard-lib');

  ClassSystem = require('art-class-system');

  BaseObject = ClassSystem.BaseObject;

  log = StandardLib.log, inspect = StandardLib.inspect, nextTick = StandardLib.nextTick, timeout = StandardLib.timeout;

  module.exports = BatchLoader = (function(superClass) {
    extend(BatchLoader, superClass);

    function BatchLoader(loadFunction) {
      this.assets = {};
      this.loadingAssets = {};
      this.loadFunction = loadFunction;
    }

    BatchLoader.prototype.load = function(sources, onLoad) {
      if (typeof sources === "string") {
        sources = [sources];
      }
      return this.loadAssets(sources, onLoad);
    };

    BatchLoader.prototype.addAsset = function(source, asset) {
      var base;
      if (asset == null) {
        throw new Error("not a valid asset: " + (inspect(asset)));
      }
      delete this.loadingAssets[source];
      (base = this.assets)[source] || (base[source] = asset);
      return this.notifyListeners();
    };

    BatchLoader.getter({
      blankInfo: function() {
        return {
          loadedFromCache: 0,
          loadedAsynchronously: 0,
          alreadyLoadingAsynchronously: 0
        };
      }
    });

    BatchLoader.prototype.loadAssets = function(sources, onLoad) {
      var info;
      info = this.blankInfo;
      sources.forEach((function(_this) {
        return function(src) {
          if (_this.assets[src] != null) {
            return info.loadedFromCache++;
          } else if (_this.loadingAssets[src]) {
            info.loadedAsynchronously++;
            return info.alreadyLoadingAsynchronously++;
          } else {
            info.loadedAsynchronously++;
            _this.loadingAssets[src] = true;
            return _this.loadFunction(src, function(src, asset) {
              return _this.addAsset(src, asset);
            });
          }
        };
      })(this));
      this.addLoaderListener(sources, onLoad, info);
      return nextTick((function(_this) {
        return function() {
          return _this.notifyListeners();
        };
      })(this));
    };

    BatchLoader.prototype.addLoaderListener = function(sources, onLoad, info) {
      this.loadingListeners || (this.loadingListeners = []);
      return this.loadingListeners.push({
        sources: sources,
        onLoad: onLoad,
        info: info
      });
    };

    BatchLoader.prototype.notifyListeners = function() {
      var allLoaded, i, j, len, len1, listener, oldloadingListeners, ref, source;
      if (!this.loadingListeners) {
        return;
      }
      oldloadingListeners = this.loadingListeners;
      this.loadingListeners = [];
      for (i = 0, len = oldloadingListeners.length; i < len; i++) {
        listener = oldloadingListeners[i];
        allLoaded = true;
        ref = listener.sources;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          source = ref[j];
          if (!this.assets[source]) {
            allLoaded = false;
          }
        }
        if (allLoaded) {
          listener.onLoad(this.assets, listener.sources, listener.info);
        } else {
          this.loadingListeners.push(listener);
        }
      }
      return this.loadingListeners;
    };

    return BatchLoader;

  })(BaseObject);

}).call(this);

//# sourceMappingURL=BatchLoader.js.map
