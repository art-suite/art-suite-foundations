// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var ArrayCompactFlatten, compactFlattenIfNeeded, compactFlattenIfNeededFast, compactFlattenIfNeededFastCustom, doFlattenInternal, doFlattenInternalFast, doFlattenInternalFastCustom, isArray, keepAll, keepUnlessNullOrUndefined, needsFlatteningOrCompacting, needsFlatteningOrCompactingFast, needsFlatteningOrCompactingFastCustom,
    slice = [].slice;

  isArray = require('@art-suite/art-core-types').isArray;

  needsFlatteningOrCompacting = function(inputArray, keepTester) {
    var a, i, len;
    for (i = 0, len = inputArray.length; i < len; i++) {
      a = inputArray[i];
      if (isArray(a) || !keepTester(a)) {
        return true;
      }
    }
    return false;
  };

  keepAll = function() {
    return true;
  };

  keepUnlessNullOrUndefined = function(a) {
    return a != null;
  };

  doFlattenInternal = function(inputArray, output, keepTester) {
    var el, i, len;
    for (i = 0, len = inputArray.length; i < len; i++) {
      el = inputArray[i];
      if (isArray(el)) {
        doFlattenInternal(el, output, keepTester);
      } else {
        if (keepTester(el)) {
          output.push(el);
        }
      }
    }
    return output;
  };

  compactFlattenIfNeeded = function(inputArray, keepTester) {
    switch (false) {
      case !(inputArray == null):
        return inputArray;
      case !!isArray(inputArray):
        return [inputArray];
      case !(needsFlatteningOrCompacting(inputArray, keepTester) || !isArray(inputArray)):
        return doFlattenInternal(inputArray, [], keepTester);
      default:
        return inputArray;
    }
  };

  doFlattenInternalFast = function(inputArray, output) {
    var el, i, len;
    for (i = 0, len = inputArray.length; i < len; i++) {
      el = inputArray[i];
      if (isArray(el)) {
        doFlattenInternalFast(el, output);
      } else if (el != null) {
        output.push(el);
      }
    }
    return output;
  };

  needsFlatteningOrCompactingFast = function(inputArray) {
    var el, i, len;
    for (i = 0, len = inputArray.length; i < len; i++) {
      el = inputArray[i];
      if ((el == null) || isArray(el)) {
        return true;
      }
    }
    return false;
  };

  compactFlattenIfNeededFast = function(inputArray) {
    if (needsFlatteningOrCompactingFast(inputArray)) {
      return doFlattenInternalFast(inputArray, []);
    } else {
      return inputArray;
    }
  };

  doFlattenInternalFastCustom = function(inputArray, output, keepTester) {
    var el, i, len;
    for (i = 0, len = inputArray.length; i < len; i++) {
      el = inputArray[i];
      if (isArray(el)) {
        doFlattenInternalFastCustom(el, output, keepTester);
      } else {
        if (keepTester(el)) {
          output.push(el);
        }
      }
    }
    return output;
  };

  needsFlatteningOrCompactingFastCustom = function(inputArray, keepTester) {
    var a, i, len;
    for (i = 0, len = inputArray.length; i < len; i++) {
      a = inputArray[i];
      if (isArray(a) || !keepTester(a)) {
        return true;
      }
    }
    return false;
  };

  compactFlattenIfNeededFastCustom = function(inputArray, keepTester) {
    if (needsFlatteningOrCompactingFastCustom(inputArray, keepTester)) {
      return doFlattenInternalFastCustom(inputArray, [], keepTester);
    } else {
      return inputArray;
    }
  };

  module.exports = ArrayCompactFlatten = (function() {
    var compact, deepArrayEach, flatten;

    function ArrayCompactFlatten() {}

    ArrayCompactFlatten.keepUnlessNullOrUndefined = function(a) {
      console.warn("DEPRICATED: keepUnlessNullOrUndefined");
      return a != null;
    };


    /*
    IN:
      inputArray: inputArray or arguments-object
      keepTester: (value) -> true/false
        OUT: return true if that element should be in the output
    
    OUT: inputArray where all elements test true to keepTester
    NOTE: NOT recursive - just does a shallow pass
     */

    ArrayCompactFlatten.compact = compact = function(inputArray, keepTester) {
      var a, i, j, len, len1;
      if (keepTester) {
        for (i = 0, len = inputArray.length; i < len; i++) {
          a = inputArray[i];
          if (!keepTester(a)) {
            return (function() {
              var j, len1, results;
              results = [];
              for (j = 0, len1 = inputArray.length; j < len1; j++) {
                a = inputArray[j];
                if (keepTester(a)) {
                  results.push(a);
                }
              }
              return results;
            })();
          }
        }
      } else {
        for (j = 0, len1 = inputArray.length; j < len1; j++) {
          a = inputArray[j];
          if (a == null) {
            return (function() {
              var k, len2, results;
              results = [];
              for (k = 0, len2 = inputArray.length; k < len2; k++) {
                a = inputArray[k];
                if (a != null) {
                  results.push(a);
                }
              }
              return results;
            })();
          }
        }
      }
      return inputArray;
    };


    /* flatten
      IN: accepts any number of arguments
      NOTE: RECURSIVE: recurses into all arry or arguments-objects and adds their contents
        to the top level (flatten)
     */

    ArrayCompactFlatten.flatten = flatten = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return compactFlattenIfNeeded(args.length === 1 ? args[0] : args, keepAll);
    };


    /* compactFlatten
      IN:
        inputArray: inputArray or arguments-object
        keepTester: (value) -> true/false
          OUT: return true if that element should be in the output
    
      OUT: inputArray where all elements test true to keepTester
      NOTE: RECURSIVE: recurses into all arry or arguments-objects and adds their contents
        to the top level (flatten)
     */

    ArrayCompactFlatten.compactFlatten = function(inputArray) {
      return compactFlattenIfNeeded(inputArray, keepUnlessNullOrUndefined);
    };

    ArrayCompactFlatten.customCompactFlatten = function(inputArray, customKeepTester) {
      return compactFlattenIfNeeded(inputArray, customKeepTester);
    };

    ArrayCompactFlatten.compactFlattenAll = function() {
      var all;
      all = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return compactFlattenIfNeededFast(all);
    };

    ArrayCompactFlatten.compactFlattenFast = function(inputArray) {
      return compactFlattenIfNeededFast(inputArray);
    };

    ArrayCompactFlatten.compactFlattenIntoFast = function(into, inputArray) {
      return doFlattenInternalFast(inputArray, into);
    };

    ArrayCompactFlatten.customCompactFlattenFast = function(inputArray, customKeepTester) {
      return compactFlattenIfNeededFastCustom(inputArray, customKeepTester);
    };

    ArrayCompactFlatten.customCompactFlattenIntoFast = function(into, inputArray, customKeepTester) {
      return doFlattenInternalFastCustom(inputArray, into, customKeepTester);
    };


    /* deepArrayEach
      IN: inputArray: any object that has a length
    
      EFFECT:
        iterates over inputArray and recurse over any element which isArray
        invokes f on every element that is not isArray
      OUT: inputArray (same as passed in)
     */

    ArrayCompactFlatten.deepArrayEach = deepArrayEach = function(inputArray, f) {
      var el, i, len;
      for (i = 0, len = inputArray.length; i < len; i++) {
        el = inputArray[i];
        if (isArray(el)) {
          deepArrayEach(el, f);
        } else {
          f(el);
        }
      }
      return inputArray;
    };

    return ArrayCompactFlatten;

  })();

}).call(this);

//# sourceMappingURL=ArrayCompactFlatten.js.map
