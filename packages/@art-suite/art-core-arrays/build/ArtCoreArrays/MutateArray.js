"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {let Math = global.Math, basicCompareFunction, remove; basicCompareFunction = function(a, b) {return a - b;}; return {insertIntoArray: function(inputArray, index, item) {if (index < 0) {index = inputArray.length + index + 1;}; inputArray.splice(index, 0, item); return inputArray;}, remove: remove = function(inputArray, index, amount = 1) {if (index < 0) {index = inputArray.length + index + 1;}; inputArray.splice(index, amount); return inputArray;}, removeFirstMatch: (inputArray, toMatchValue) => {let index; index = inputArray.indexOf(toMatchValue); return (index >= 0) ? remove(inputArray, index) : inputArray;}, shuffleArray: function(inputArray) {let i; i = inputArray.length; while (--i > 0) {let j, t; j = ~~(Math.random() * (i + 1)); t = inputArray[j]; inputArray[j] = inputArray[i]; inputArray[i] = t;}; return inputArray;}, moveArrayElement: function(inputArray, fromIndex, toIndex) {fromIndex = Caf.mod(fromIndex | 0, inputArray.length); toIndex = Caf.mod(toIndex | 0, inputArray.length); inputArray.splice(toIndex, 0, inputArray.splice(fromIndex, 1)[0]); return inputArray;}, stableSort: function(inputArray, compare) {let notSorted, length; compare != null ? compare : compare = basicCompareFunction; notSorted = true; length = inputArray.length; while (notSorted) {let to, i1, by; notSorted = false; to = length; i1 = 1; by = (i1 < to) ? 1 : -1; while (by > 0 && i1 < to || by < 0 && i1 > to) {let i, a, b; i = i1; if (0 < compare(a = inputArray[i - 1], b = inputArray[i])) {inputArray[i - 1] = b; inputArray[i] = a; notSorted = true;}; i1 += by;}; to;}; return inputArray;}};});
//# sourceMappingURL=MutateArray.js.map
