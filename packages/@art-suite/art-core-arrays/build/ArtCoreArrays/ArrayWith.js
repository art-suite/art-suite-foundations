"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["getIndexOfOrLength", "intRand", "insertIntoArray", "remove", "moveArrayElement"], [global, require('@art-suite/art-core-math'), require('@art-suite/art-core-types'), require('./MutateArray'), require('./ArrayFind')], (getIndexOfOrLength, intRand, insertIntoArray, remove, moveArrayElement) => {let wordsRegex, exactlyOneWordRegex, arrayWithLeftOfIndex, arrayWithRightOfIndex, arrayWithElementMoved; wordsRegex = /[^\s]+/g; exactlyOneWordRegex = /^[^\s]+$/; return {arrayWithUniqueValues: function(sortedArray, eqF = (a, b) => a === b) {let from, into, to, i1, temp; return (from = sortedArray, into = [], (from != null) ? (to = from.length, i1 = 0, (() => {while (i1 < to) {let v, i; v = from[i1]; i = i1; if (i === 0 || !eqF(v, sortedArray[i - 1])) {into.push(v);}; temp = i1++;}; return temp;})()) : undefined, into);}, arrayWithLeftOfIndex: arrayWithLeftOfIndex = function(inputArray, index) {if (!inputArray) {return inputArray;}; return inputArray.slice(0, index);}, arrayWithRightOfIndex: arrayWithRightOfIndex = function(inputArray, index) {if (!inputArray) {return inputArray;}; if (index < 0) {index += inputArray.length;}; return inputArray.slice(index + 1);}, arrayWithLeftOf: function(inputArray, value) {return arrayWithLeftOfIndex(inputArray, getIndexOfOrLength(inputArray, value));}, arrayWithRightOf: function(inputArray, value) {return arrayWithRightOfIndex(inputArray, getIndexOfOrLength(inputArray, value));}, arrayWithRandomSort: function(inputArray) {let len, i1; return inputArray ? (len = inputArray.length, (i1 = len - 1, (() => {while (i1 >= 0) {let i, j, a; i = i1; j = intRand(i); a = inputArray[i]; inputArray[i] = inputArray[j]; inputArray[j] = a; i1--;};})(), 0), inputArray) : [];}, arrayWithInsertedAt: (inputArray, index, item) => insertIntoArray(inputArray.slice(), index, item), arrayWithSort: function(inputArray = [], sortFunction) {inputArray = inputArray.slice(); return inputArray.sort(sortFunction);}, arrayWithout: (inputArray, index, amount = 1) => (inputArray != null) ? (!(index != null) ? index = inputArray.length - 1 : undefined, remove(inputArray.slice(), index, amount)) : [], arrayWithoutValue: (inputArray, value) => {let index; return (inputArray != null) ? (0 <= (index = inputArray.indexOf(value))) ? remove(inputArray.slice(), index, 1) : inputArray : [];}, arrayWithoutLast: function(inputArray, amount = 1) {return (inputArray != null && amount < inputArray.length) ? inputArray.slice(0, inputArray.length - amount) : [];}, arrayWith: (inputArray, value) => {if (!inputArray) {return [value];}; inputArray = inputArray.slice(); inputArray.push(value); return inputArray;}, truncatedArrayWith: (inputArray, length, value) => {if (!inputArray) {return [value];}; inputArray = inputArray.slice(0, length); inputArray.push(value); return inputArray;}, arrayWithoutLast: (inputArray) => inputArray.slice(0, inputArray.length - 1), arrayWithExactlyOne: (inputArray, value) => {if (!inputArray) {return [value];}; inputArray = inputArray.slice(); if (!(Caf.in(value, inputArray))) {inputArray.push(value);}; return inputArray;}, arrayWithElementMoved: arrayWithElementMoved = function(inputArray, fromIndex, toIndex) {fromIndex = Caf.mod(fromIndex | 0, inputArray.length); toIndex = Caf.mod(toIndex | 0, inputArray.length); if (fromIndex === toIndex) {return inputArray;}; inputArray = inputArray.slice(); return moveArrayElement(inputArray, fromIndex, toIndex);}, arrayWithElementValueMoved: function(inputArray, value, toIndex) {let fromIndex; fromIndex = inputArray.indexOf(value); if (fromIndex < 0) {return inputArray;}; return arrayWithElementMoved(inputArray, fromIndex, toIndex);}, arrayWithElementReplaced: function(inputArray, value, index) {inputArray = inputArray.slice(); inputArray[index] = value; return inputArray;}};});});
//# sourceMappingURL=ArrayWith.js.map
