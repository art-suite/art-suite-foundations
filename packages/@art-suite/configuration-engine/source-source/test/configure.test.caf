import &StandardImport, {} &ArtBuildConfigurator, &fs

realRequire = null
mkdir = (dir) -> fs.mkdirSync dir unless fs.existsSync dir
isDirectory = (file) ->
  if !fs.existsSync file
    log.error "DNE: #{file}"
  fs.statSync(file).isDirectory()

getTree = readFsTree = (path = '.') ->
  object fileName in fs.readdirSync path
    pathedFilename = &path.join path, fileName
    if isDirectory pathedFilename
      readFsTree pathedFilename
    else
      fs.readFileSync pathedFilename
      .toString()

fsId = randomString()

currentPath = process.cwd()
parentPath = &path.join ".", "temp"
tempPath = &path.join parentPath, fsId

initFs = ->
  mkdir parentPath
  mkdir tempPath
  process.chdir tempPath

restoreFs = ->
  log "" rm #{tempPath}
  process.chdir currentPath

# afterAll -> process.chdir :..
afterAll restoreFs

chainedTest ->
  ArtBuildConfigurator.Main extract realRequire
  ArtBuildConfigurator.Main.realRequire = (file) -> {}
  initFs()

.thenTest "configure once" ->
  ArtBuildConfigurator.go
    process.cwd()
    configure: true
    quiet: true

.thenTest "verify output" ->
  assert.eq
    Object.keys getTree()
    .sort()
    :art.build.config.caf :package.json :register.js :webpack.config.js

.thenTest "configure twice" ->
  ArtBuildConfigurator.go
    process.cwd()
    configure: true
    quiet: true

.thenTest :teardown ->
  ArtBuildConfigurator.Main.realRequire = realRequire
