import &StandardImport, &Util, {} &ParseError

class Main

  ##
    IN: config:
      commands:
        default: command-function (optional)
        command1Name: command-function
        command2Name: command-function
        command3Name: command-function

      help: see Help.getHelp

      argv: [<String>] - defaults to process.argv; provided primarilly for testing

    command-function: (options, args) -> result, optionally a Promise
      IN:
        options:  are the parsed options - see Parse.parseArgs
        args:     undefined or array of arguments not part of options

    options: object mapping lowerCamelCase option names to values parsed from the argv array
  @start: ({commands, default: _default, description, argv, output, preprocessOptions}) =>
    output ?= log.unquoted
    argv ?= process.argv
    [nodeJs, startFile, args...] = argv

    commands = normalizeCommands commands

    Promise.then ->
      {options, commandFunction, commandName, args} = &Parse.parseAndSelectCommand commands, args, _default

      Promise.then ->
        if commandFunction && !options.help
          if options.verbose
            output parsed-command-line: merge {}
              command:  commandName
              args:     if args?.length > 0 then args
              options

          options = preprocessOptions options if preprocessOptions

          commandFunction options, args

        else
          &Help.getHelp
            startFile
            {} commands, description, parsed: {} options, args
            if commandName == :help then args?[0] else commandName
          + if commandName == :help || options.help || !commandName then '' else colors.red "\n\nInvalid command: #{commandName}"

      .tap (result) -> result? &&
        if options.json
          console.log JSON.stringify result
        else output result

    .catch (error) ->
      if error instanceof ParseError
        log.error error.message
      else log error
      if process.env.JEST_WORKER_ID
        throw error
      else
        process.exit 1
