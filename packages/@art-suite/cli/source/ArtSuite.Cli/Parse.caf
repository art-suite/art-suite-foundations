import &StandardImport, &Util, {} &ParseError

class Parse
  @optionRegExp: /^--([^=\[\]]+)(\[\])?(=(.+))?$/
  @evalJsRegExp: /^js:(.*)$/
  @typedArgumentRegExp: /^([a-z]+):(.*)$/
  @numberRegExp:
    ///i
      ^
      [-+]?
      ( # floating point
        [0-9]*
        \.
        [0-9]+
      | # integer
        [0-9]+
      )

      # exponent
      ([eE][-+]?[0-9]+)?
      $

  @parseValue: (value, errorContext) ->
    switch
    when value == :true then true
    when value == :false then false
    when @numberRegExp.test value then value / 1
    when typedMatch = @typedArgumentRegExp.exec value
      [__, type, rawValue] = typedMatch
      switch type
      when :string
        rawValue
      when :json
        try JSON.parse rawValue
        catch error
          throw new ParseError
            """
              Error parsing JSON rawValue for #{errorContext}: #{error.message}
                Value: #{rawValue}

      when :js
        try eval rawValue
        catch error
          throw new ParseError
            """
              Error parsing JavaScript rawValue for #{errorContext}: #{error.message}
                Value: #{rawValue}

      else value

    else value

  @parseArgs: (inputArgs) =>
    errorContext = null
    currentValueAccumulator = args = []
    currentIsArray = false

    if inputArgs[0] && !@optionRegExp.test inputArgs[0]
      commandName = inputArgs[0]
      inputArgs.shift()

    each argument, i in inputArgs into options = {}
      if option = argument.match @optionRegExp
        [_, optionName, isArray, _, value] = option
        currentIsArray = !!isArray
        errorContext = argument
        currentValueAccumulator = options[lowerCamelCase optionName] ?= []

        if value
          currentValueAccumulator.push @parseValue value, errorContext
          errorContext = null
          currentValueAccumulator = args

      else
        currentValueAccumulator.push @parseValue argument, errorContext ? "argument #{i + 1}"

        # if not array, reset to appending to args
        unless currentIsArray
          errorContext = null
          currentValueAccumulator = args

    {} commandName, options, args

  @getCommandFunction: (commands, commandName) ->
    if command = commands[normalizeCommandName commandName]
      command.run

  @parseAndSelectCommand: (commands, args, defaultCommandName) =>
    {commandName, options, args} = @parseArgs args
    commandName = lowerCamelCase commandName ? defaultCommandName

    if selectedCommandConfig = commands[commandName]
      commandFunction = selectedCommandConfig.run
      unless args?.length > 0
        args = selectedCommandConfig.args?.default

      options = normalizeParsedOptionsWithDefaults options, selectedCommandConfig.options

      if selectedCommandConfig.args extract? argsToOptions
        mergeInto options, argsToOptions args || []

      if selectedCommandConfig.onlyAllowListedOptions && !options.help
        legalOptions = selectedCommandConfig.options ? {}
        find v, k from options when !legalOptions[k]
          legalOptions = array v from Object.keys(selectedCommandConfig.options) with "--#{v}"
          throw new ParseError "Option '#{k}' is not a legal option for command '#{commandName}'. Legal options: #{legalOptions.join ', '}"

      else
        each optionConfig, k in selectedCommandConfig.options when optionConfig.required && !(options[lowerCamelCase k]?)
          message = "Option '--#{k}' is required for command '#{commandName}'"
          if options.help
            log.error message
          else
            throw new ParseError message

    {}
      commandFunction
      commandName
      options
      args
