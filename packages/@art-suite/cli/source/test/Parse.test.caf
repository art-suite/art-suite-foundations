import &StandardImport
import ArtCli.Parse, ArtCli.Util, {} ArtCli.ParseError

describe
  parseAndSelectCommand:
    basic: ->
      test 'parseAndSelectCommand' ->
        assert.eq
          parseAndSelectCommand
            normalizeCommands {}
              foo = ->
              bar = ->
            [] :foo :bar

          commandFunction:  foo
          commandName:      :foo
          options:          {}
          args:             [] :bar

      test 'parseAndSelectCommand commands with help' ->
        assert.eq
          parseAndSelectCommand
            {}
              foo:
                run:       foo = ->
                description:  "walk about"
                examples:     "" walk
                options:
                  gate: :mph "" estimated mph for yer walking

              bar = ->
            [] :foo :bar

          commandFunction: foo
          commandName:     :foo
          options:         {}
          args:            [] :bar

    optionDefaults: ->
      test 'with default applied' ->
        assert.eq
          parseAndSelectCommand
            normalizeCommands
              foo:
                run: ->
                options: bar: default: :123
            w "" foo --bar
          .options

          bar: :123

      test 'with default ignored' ->
        assert.eq
          parseAndSelectCommand
            normalizeCommands
              foo:
                run: ->
                options: bar: default: :123
            w "" foo --bar 456
          .options

          bar: 456

    argsDefault: ->
      test 'with default applied' ->
        assert.eq
          parseAndSelectCommand
            normalizeCommands
              foo:
                run: ->
                args: default: w "" 123 456
            w "" foo
          .args

          :123 :456

  parseArgs:
    options: ->
      test 'empty args' ->
        assert.eq
          parseArgs []
          commandName: undefined
          options: {}
          args: []

    dataTypes:
      boolean: ->
        test 'boolean value' ->
          assert.eq
            parseArgs [] "" --verbose
            commandName: undefined
            args: []
            options: verbose: []

        test 'boolean true from "true"' ->
          assert.eq
            parseArgs [] :--verbose :true
            commandName: undefined
            args: []
            options: verbose: [] true

        test 'boolean true from "true"' ->
          assert.eq
            parseArgs [] :--verbose :false
            commandName: undefined
            args: []
            options: verbose: [] false

      number: ->
        test 'number value' ->
          assert.eq
            parseArgs [] :--num :123
            .options
            num: [] 123

      string: ->
        test 'simple string' ->
          assert.eq
            parseArgs [] :--foo :bar
            .options
            foo: [] :bar

        test 'string:true' ->
          assert.eq
            parseArgs [] :--foo :string:true
            .options
            foo: [] :true

        test 'string:false' ->
          assert.eq
            parseArgs [] :--foo :string:false
            .options
            foo: [] :false

        test 'string:10' ->
          assert.eq
            parseArgs [] :--foo :string:10
            .options
            foo: [] :10

      lists: ->
        test 'list' ->
          assert.eq
            parseArgs [] :--foo :bar :--foo :baz
            .options
            foo: :bar :baz

        test 'not a list' ->
          assert.eq
            parseArgs [] :--foo :bar :baz
            .options
            foo: [] :bar

      json: ->
        test 'regexp' ->
          data =
            alpha: null
            beta: true
            gamma: :a :b :c
            delta: :foo

          assert.eq
            parseArgs [] :--my-json "" json:#{} JSON.stringify data
            .options.myJson
            [] data

      js: ->
        test 'regexp' ->
          assert.eq
            parseArgs [] :--regex "js:/[a-z]+/"
            .options.regex[0].exec "123 frank %"
            [] :frank

        test 'function' ->
          f = (v) => v * 123
          assert.eq
            parseArgs [] :--f "js:#{f}"
            .options.f[0] 10
            1230

    arrays: ->
      test 'add [] to the end of an option to make it an array: myCommand myArg --foo[] foo1 foo2 --bam boom myOtherArg' ->
        assert.eq
          parseArgs w "" myCommand myArg --foo[] foo1 foo2 --bam boom myOtherArg
          commandName: :myCommand
          options:
            foo: :foo1 :foo2
            bam: [] :boom
          args: [] :myArg :myOtherArg

    withEquals: ->
      test 'params can have an = sign instead of a space: myCommand myArg --foo=foo1 myOtherArg --bam' ->
        assert.eq
          parseArgs w "" myCommand myArg --foo=foo1 myOtherArg --bam
          commandName: :myCommand
          options:
            foo: [] :foo1
            bam: []
          args: [] :myArg :myOtherArg

    parseErrors:
      js:
        test 'function throws error' ->
          assert.rejects -> parseArgs [] :--f "js:() => {"
          .then (error) ->
            assert.instanceof
              ParseError
              error

    commands: ->
      test 'one command' ->
        assert.eq
          parseArgs [] :myCommand
          commandName: :myCommand
          options: {}
          args: []

      test 'multiple args - first is command' ->
        assert.eq
          parseArgs [] :myCommand1 :myArg2
          commandName: :myCommand1
          args: [] :myArg2
          options: {}

    mixed: ->
      test 'multiple commands and options' ->
        assert.eq
          parseArgs w "" myCommand1 myArg2 --files one.json --files two.json --output out.json
          commandName: :myCommand1
          args: [] :myArg2
          options:
            files:  [] :one.json, :two.json
            output: [] :out.json


      test 'args mixed with options' ->
        assert.eq
          parseArgs w "" myCommand1 --files one.json myArg2 --files two.json --output out.json
          commandName: :myCommand1
          args: [] :myArg2
          options:
            files:  [] :one.json, :two.json
            output: [] :out.json

