import &StandardImport
import ArtCli.Main

expectedGoOutput = :myCommand-myCommand-myCommand

describe
  mainSuite: ->
    test "start + myCommand" ->
      myCommandRan = false
      start
        commands: myCommand: -> myCommandRan = true
        argv: :nodeJs :startFile :myCommand
        output: assert.true

      .then (out) ->
        assert.true out

        assert.eq
          {} myCommandRan
          myCommandRan: true

    test "start + preprocessOptions" ->
      myCommandRan = false
      start
        commands: myCommand: ({x}) -> myX: x | 0
        argv: :nodeJs :startFile :myCommand :--x :123
        preprocessOptions: (options) -> merge options, x: (options.x | 0) + 1
        output: ->

      .then (out) ->
        assert.eq
          out
          myX: 124

    test "start + myCommand --verbose" ->
      myCommandRan = false
      start
        commands: myCommand: -> myCommandRan = true
        argv: :nodeJs :startFile :myCommand :anArg :--verbose
        output: assert.jsTrue

      .then (out) ->
        assert.true out

        assert.eq
          {} myCommandRan
          myCommandRan: true

    test "extra args past as args" ->
      start
        commands: myCommand: (options, args) -> assert.eq args, [] :arg
        argv: :nodeJs :startFile :myCommand :arg

    test "args undefined if there are no extra args" ->
      start
        commands: myCommand: (options, args) -> assert.eq args, undefined
        argv: :nodeJs :startFile :myCommand

    test "start + myCommand + --help" ->
      myCommandRan = false
      start
        commands: myCommand: {}
          description = "" xyz123 description
          options: {}
            more = "" abc123 --more description
          run: -> myCommandRan = true
        argv: :nodeJs :startFile :myCommand :--help
        output: assert.jsTrue

      .then stripAnsi
      .then (out) ->
        assert.false myCommandRan
        assert.match out, description
        assert.match out, more

    test "start with no args" ->
      myCommandRan = false
      start
        commands: myCommand: -> myCommandRan = true
        argv: :nodeJs :startFile
        output: ->

      .then stripAnsi
      .then (output) ->
        assert.match output, "startFile my-command"
        assert.eq
          {} myCommandRan
          myCommandRan: false

    test "start with no args and default" ->
      myCommandOutput = undefined

      start
        commands:
          myCommand: -> myCommandOutput = expectedGoOutput
        default: :myCommand
        argv: :nodeJs :startFile
        output: assert.jsTrue

      .then stripAnsi
      .then (output) ->
        assert.match output, expectedGoOutput
        assert.eq
          {} myCommandOutput
          myCommandOutput: expectedGoOutput

    test "start + noGo" ->
      myCommandRan = false
      start
        commands: myCommand: -> myCommandRan = true
        argv: :nodeJs :startFile :noGo
        output: ->

      .then stripAnsi
      .then (output) ->
        assert.match output, "startFile my-command"
        assert.eq
          {} myCommandRan
          myCommandRan: false


    test "default help command" ->
      myCommandRan = false
      start
        commands: myCommand: -> myCommandRan = true
        argv: :nodeJs :startFile :help
        output: ->

      .then stripAnsi
      .then (output) ->
        assert.match output, "startFile my-command"
        assert.eq
          {} myCommandRan
          myCommandRan: false
