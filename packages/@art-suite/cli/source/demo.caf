import &ArtStandardLib

require :@art-suite/cli
.start
  description:
    """
      A demo of the art-suite/cli library.

      PirateIpsum.me Heave down stern heave to hearties crack Jennys tea cup topgallant snow reef sails belaying pin haul wind. Strike colors mizzenmast nipper draft scurvy skysail gangplank ye list interloper. Squiffy bring a spring upon her cable line chandler execution dock plunder topgallant scourge of the seven seas crimp ahoy.

      Jack Ketch Yellow Jack main sheet list black spot spyglass hearties barque sutler fathom. Stern gally crimp run a rig execution dock lugsail hogshead boatswain Davy Jones' Locker jolly boat. Tender Pieces of Eight league matey mizzenmast take a caulk nipperkin capstan furl chantey.

  commands:
    simplestCommandDefinition: -> "" This command demos the easiest way to define a command - using just a function. Non-null/undefined return values are output at the end of execution. In this case, this string is presented.
    simplestOptionsDefinition:
      description: "" This command demos the easiest way to define your options as an array of strings.
      options: :color :length
      run: ({color, length}) -> log {} color, length

    advanced-and-required-options:
      run: (options) -> options
      options:
        myExpertOption:   advanced: true
        myRequiredOption: required: true

    sing:
      run: ({song, args}) -> "" ♫ #{song ? args?.join ' '} ♫!
      description: "Sing any name you choose"
      examples:
        args: w "" dashing through the snow
        song: "" Jingle Bells
        "" ♫ Jingle Bells ♫!
      options:
        args:
          description:  "your favorite lyrics"
          argument:     :string
        song:
          description: "name of the song to sing"
          argument:     :string
          required:     true

    force-error: -> throw new Error "" You've forced an error!
    send-cheer: -> "" May you have a holly, jolly Christmas this year!
    xmas:
      run: ({ santa, rudolph }) ->
        compactFlatten []
          "" Will Santa come this year?
          if santa > 0 then repeat("Ho! ", santa) else 'No Santa this year.'
          if rudolph then "Rudolph's nose glows!"
        .join :\n
      description: "" This will tell you exactly what you need.
      options:
        rudolph:  "" Should Rudolph come too?
        santa:    :number-of-ho-hos "" Santa will come if he says 'Ho!' at least once.
      examples:
        santa: 10
        """
          output:

            Will Santa come this year?
            Ho! Ho! Ho! Ho! Ho! Ho! Ho! Ho! Ho! Ho!

        rudolph: true
        """
          output:

            Will Santa come this year?
            No Santa this year.
            Rudolph's nose glows!

        rudolph: true santa: 10
        """
          output:

            Will Santa come this year?
            Ho! Ho! Ho! Ho! Ho! Ho! Ho! Ho! Ho! Ho!
            Rudolph's nose glows!

    stat:
      description: "" stat the listed files
      run: ({ args }) ->
        object arg in args
          stat = &fs.statSync arg
          object k from Object.keys stat
            stat[k]
