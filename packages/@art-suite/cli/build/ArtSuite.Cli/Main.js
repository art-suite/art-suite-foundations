"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["log", "process", "normalizeCommands", "Promise", "merge", "colors", "console", "JSON", "ParseError"], [global, require('./StandardImport'), require('./Util'), {ParseError: require('./ParseError')}], (log, process, normalizeCommands, Promise, merge, colors, console, JSON, ParseError) => {let Main; return Main = Caf.defClass(class Main extends Object {}, function(Main, classSuper, instanceSuper) {this.start = ({commands, default: _default, description, argv, output, preprocessOptions}) => {let nodeJs, startFile, args; output != null ? output : output = log.unquoted; argv != null ? argv : argv = process.argv; ([nodeJs, startFile, ...args] = argv); commands = normalizeCommands(commands); return Promise.then(() => {let options, commandFunction, commandName; ({options, commandFunction, commandName, args} = require('./Parse').parseAndSelectCommand(commands, args, _default)); return Promise.then(() => (commandFunction && !options.help) ? (options.verbose ? output({"parsed-command-line": merge({command: commandName, args: ((Caf.exists(args) && args.length) > 0) ? args : undefined, options})}) : undefined, preprocessOptions ? options = preprocessOptions(options) : undefined, commandFunction(options, args)) : require('./Help').getHelp(startFile, {commands, description, parsed: {options, args}}, (commandName === "help") ? Caf.exists(args) && args[0] : commandName) + ((commandName === "help" || options.help || !commandName) ? "" : colors.red(`\n\nInvalid command: ${Caf.toString(commandName)}`))).tap((result) => result != null && (options.json ? console.log(JSON.stringify(result)) : output(result)));}).catch((error) => {if (error instanceof ParseError) {log.error(error.message);} else {log(error);}; return process.env.JEST_WORKER_ID ? (() => {throw error;})() : process.exit(1);});};});});});
//# sourceMappingURL=Main.js.map
