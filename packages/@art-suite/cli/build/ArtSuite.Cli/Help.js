"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "wrap", "compactFlatten", "colors", "dashCase", "wrapProse", "String", "Array", "Object", "log", "Error", "objectHasKeys", "objectWithout", "JSON", "lowerCamelCase", "formattedInspect", "merge"], [global, require('./StandardImport'), require('./Util')], (BaseClass, wrap, compactFlatten, colors, dashCase, wrapProse, String, Array, Object, log, Error, objectHasKeys, objectWithout, JSON, lowerCamelCase, formattedInspect, merge) => {let Help; return Help = Caf.defClass(class Help extends BaseClass {}, function(Help, classSuper, instanceSuper) {this.classProperty("cliName"); this.toHelpString = function(...args) {return wrap(compactFlatten(args).join("\n").trim());}; this.classGetter({coloredCliName: function() {return colors.bold(colors.blue(this.cliName));}}); this.getCommandSummary = function(commandName, {description, options, args}) {commandName = dashCase(commandName); return this.toHelpString(this.getCommandUsage(commandName, options, args), wrapProse(description, 2));}; this.getOptionDetails = function(option, details) {let description, argument, advanced, required, _default; switch (false) {case !(Caf.is(details, String)): description = details; break; case !(Caf.is(details, Array) && details.length === 2): ([argument, description] = details); break; case !(Caf.is(details, Object)): ({argument, description, advanced, required, default: _default} = details); break; default: log.warn({option, details}); throw new Error("expecting options details to be string, 2-length array or object");}; return this.toHelpString(compactFlatten([!(option === "args") ? colors.green(`  --${Caf.toString(option)}`) : undefined, argument ? colors.yellow(argument) : undefined, _default ? colors.grey(`[default: ${Caf.toString(_default)}]`) : undefined, required ? colors.whiteBright("(REQUIRED)") : undefined, advanced ? colors.grey("(ADVANCED)") : undefined]).join(" "), wrapProse(description, 4));}; this.getCommandUsage = (command, options, args) => {let base; command = dashCase(command); return compactFlatten([this.coloredCliName, colors.bold(colors.whiteBright(command)), Caf.exists(args) && (Caf.exists(base = args.argument) && base.replace(/\s+/g, "-")), this.getOptionsList(Caf.object(options, null, (o) => o.required), true), this.getOptionsList(Caf.object(options, null, (o) => !o.required))]).join(" ");}; this.getOptionsList = (options, required) => {let l, from, into, to, i, temp; return objectHasKeys(options) ? (l = (from = Object.keys(options).sort(), into = [], (from != null) ? (to = from.length, i = 0, (() => {while (i < to) {let k; k = from[i]; if (!options[k].advanced) {into.push(colors.green(`--${Caf.toString(k)}`));}; temp = i++;}; return temp;})()) : undefined, into).sort().join(required ? " " : ", "), required ? l : (l.length > 0) ? `[${Caf.toString(l)}]` : undefined) : undefined;}; this.getCommandDetails = (command, {description, options, examples, args}) => {let keys, from, into, to, i1, temp; return this.toHelpString(`usage: ${Caf.toString(this.getCommandUsage(command, options, args))}`, wrapProse(description), "", args ? [colors.blue("args:\n"), "    " + this.getOptionDetails("args", args), ""] : undefined, options ? colors.blue("options:\n") : undefined, options ? (keys = Object.keys(objectWithout(options, "args")).sort(), compactFlatten([Caf.array(keys, (option) => this.getOptionDetails(option, options[option]), (option) => options[option].required && !options[option].advanced), Caf.array(keys, (option) => this.getOptionDetails(option, options[option]), (option) => !options[option].required && !options[option].advanced), Caf.array(keys, (option) => this.getOptionDetails(option, options[option]), (option) => options[option].advanced)]).join("\n\n")) : undefined, ((Caf.exists(examples) && examples.length) > 0) ? colors.blue("\nexamples:\n") : undefined, ((Caf.exists(examples) && examples.length) > 0) ? (from = examples, into = [], (from != null) ? (to = from.length, i1 = 0, (() => {while (i1 < to) {let example, i; example = from[i1]; i = i1; into.push((description = examples[i + 1], [`  ${Caf.toString(this.coloredCliName)} ${Caf.toString(colors.whiteBright(command))}` + ((Caf.is(example, Object)) ? Caf.array(example, (value, option) => colors.green(` --${Caf.toString(option)}`) + ((value !== undefined && value !== true) ? colors.yellow(" " + (/\s/.test(value) ? JSON.stringify(value) : value)) : ""), (value, option) => option !== "args").join("") : example) + (example.args ? " " + example.args.join(" ") : ""), wrapProse(description, 4), ""])); temp = i1 += 2;}; return temp;})()) : undefined, into) : undefined);}; this.getHelp = (startFile, help, commandName) => {let description, commands, commandSpecificHelp; if (help != null) {description = help.description; commands = Caf.object(help.commands, null, null, null, (v, k) => lowerCamelCase(k));}; this.cliName = require('path').basename(startFile); commandSpecificHelp = Caf.exists(commands) && commands[lowerCamelCase(commandName)]; return this.toHelpString(!commandSpecificHelp ? this.getGeneralInfo(description) : undefined, commands ? (commands = Caf.object(commands, null, null, null, (v, k) => lowerCamelCase(k)), commandSpecificHelp ? this.getCommandDetails(commandName, commandSpecificHelp) : Caf.array(Object.keys(commands).sort(), (commandName) => this.getCommandSummary(commandName, commands[commandName])).join("\n\n")) : undefined, help.parsed ? "\n" + formattedInspect({parsed: merge(help.parsed)}, {color: true}) : undefined);}; this.getGeneralInfo = (description) => compactFlatten([`usage: ${Caf.toString(this.coloredCliName)} ${Caf.toString(colors.whiteBright("command"))} ${Caf.toString(colors.blue("[options]"))}` + "\nhelp: " + this.coloredCliName + colors.whiteBright(" command") + colors.green(" --help"), wrapProse(description)]).join("\n\n") + "\n";});});});
//# sourceMappingURL=Help.js.map
