"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "merge", "test", "formattedInspect", "assert", "getLowerCaseCodeWords", "w", "upperCamelCase", "lowerCamelCase", "snakeCase", "capitalizedDashCase", "inspect", "capitalize", "getCodeWords"], [global, require('./StandardImport')], (describe, merge, test, formattedInspect, assert, getLowerCaseCodeWords, w, upperCamelCase, lowerCamelCase, snakeCase, capitalizedDashCase, inspect, capitalize, getCodeWords) => {let testCodeCase, testCodeWords, testReflexivity; testCodeCase = function(testIns) {return {getLowerCaseCodeWords: () => Caf.each2(testIns, (testIn) => test(`getLowerCaseCodeWords ${Caf.toString(formattedInspect(testIn))} >> ['foo', 'bar', 'baz']`, () => assert.eq(getLowerCaseCodeWords(testIn), w("foo bar baz")))), upperCamelCase: () => Caf.each2(testIns, (testIn) => test(`upperCamelCase ${Caf.toString(formattedInspect(testIn))} >> 'FooBarBaz'`, () => assert.eq(upperCamelCase(testIn), "FooBarBaz"))), lowerCamelCase: () => Caf.each2(testIns, (testIn) => test(`lowerCamelCase ${Caf.toString(formattedInspect(testIn))} >> 'fooBarBaz'`, () => assert.eq(lowerCamelCase(testIn), "fooBarBaz"))), snakeCase: () => Caf.each2(testIns, (testIn) => test(`snakeCase ${Caf.toString(formattedInspect(testIn))} >> 'foo_bar_baz'`, () => assert.eq(snakeCase(testIn), "foo_bar_baz"))), capitalizedDashCase: () => Caf.each2(testIns, (testIn) => test(`capitalizedDashCase ${Caf.toString(formattedInspect(testIn))} >> 'foo_bar_baz'`, () => assert.eq(capitalizedDashCase(testIn), "Foo-Bar-Baz")))};}; testCodeWords = function(testIns) {return {getLowerCaseCodeWords: () => Caf.each2(testIns, (codeWords, testIn) => test(`getLowerCaseCodeWords ${Caf.toString(formattedInspect(testIn))} >> ${Caf.toString(inspect(codeWords))}`, () => assert.eq(getLowerCaseCodeWords(testIn), codeWords)))};}; testReflexivity = function(testIns) {return describe({reflexivity: () => Caf.each2(testIns, (codeWords, string) => test(string != null ? string : "null", () => {let ucc, lcc, sc, base; ucc = upperCamelCase(string); lcc = lowerCamelCase(string); sc = snakeCase(string); base = codeWords || getLowerCaseCodeWords(string); assert.eq(base, getLowerCaseCodeWords(ucc)); assert.eq(base, getLowerCaseCodeWords(lcc)); return assert.eq(base, getLowerCaseCodeWords(sc));}))});}; describe(merge({capitalize: function() {return test("capitalize", () => {assert.eq("Foo", capitalize("foo")); assert.eq("Foo", capitalize("Foo")); return assert.eq("Foo bar", capitalize("foo bar"));});}}, testCodeCase(["foo_bar_baz", "foo-bar-baz", "-foo-bar-baz", "FooBarBaz", "FooBar_baz", "fooBarBaz", "FOO_BAR_BAZ", "  ??foo !bar_ baz- "]))); testCodeWords({"foo 123 bar": ["foo", "123", "bar"], "foo-123-bar": ["foo", "123", "bar"], "foo_123_bar": ["foo", "123", "bar"], "foo 123bar": ["foo", "123", "bar"], "foo123 bar": ["foo123", "bar"], "foo123bar": ["foo123bar"], "foo123Bar": ["foo123", "bar"], "hiFoo123byBar": ["hi", "foo123by", "bar"]}); testReflexivity({foo: ["foo"], iFrame: ["i", "frame"], ISSFrame: ["iss", "frame"]}); return test("getCodeWords works with null input", function() {return assert.eq([], getCodeWords());});});});
//# sourceMappingURL=StringCase.test.js.map
