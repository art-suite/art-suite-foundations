import &StandardImport
testCodeCase = (testIns) ->
  getLowerCaseCodeWords: ->
    each testIn from testIns
      test "getLowerCaseCodeWords #{formattedInspect testIn} >> ['foo', 'bar', 'baz']", ->
        assert.eq getLowerCaseCodeWords(testIn), w 'foo bar baz'

  upperCamelCase: ->
    each testIn from testIns
      test "upperCamelCase #{formattedInspect testIn} >> 'FooBarBaz'", ->
        assert.eq upperCamelCase(testIn), 'FooBarBaz'

  lowerCamelCase: ->
    each testIn from testIns
      test "lowerCamelCase #{formattedInspect testIn} >> 'fooBarBaz'", ->
        assert.eq lowerCamelCase(testIn), 'fooBarBaz'

  snakeCase: ->
    each testIn from testIns
      test "snakeCase #{formattedInspect testIn} >> 'foo_bar_baz'", ->
        assert.eq snakeCase(testIn), 'foo_bar_baz'

  capitalizedDashCase: ->
    each testIn from testIns
      test "capitalizedDashCase #{formattedInspect testIn} >> 'foo_bar_baz'", ->
        assert.eq capitalizedDashCase(testIn), 'Foo-Bar-Baz'

testCodeWords = (testIns) ->
  getLowerCaseCodeWords: ->
    each codeWords, testIn from testIns
      test "getLowerCaseCodeWords #{formattedInspect testIn} >> #{inspect codeWords}", ->
        assert.eq getLowerCaseCodeWords(testIn), codeWords

testReflexivity = (testIns) ->
  describe reflexivity: ->
    each codeWords, string from testIns
      test string ? 'null', ->
        ucc = upperCamelCase string
        lcc = lowerCamelCase string
        sc  = snakeCase string
        base = codeWords || getLowerCaseCodeWords string
        assert.eq base, getLowerCaseCodeWords ucc
        assert.eq base, getLowerCaseCodeWords lcc
        assert.eq base, getLowerCaseCodeWords sc


describe merge
  capitalize: ->
    test "capitalize", ->
      assert.eq "Foo", capitalize "foo"
      assert.eq "Foo", capitalize "Foo"
      assert.eq "Foo bar", capitalize "foo bar"

  testCodeCase []
    "foo_bar_baz"
    "foo-bar-baz"
    "-foo-bar-baz"
    "FooBarBaz"
    "FooBar_baz"
    "fooBarBaz"
    "FOO_BAR_BAZ"
    "  ??foo !bar_ baz- "

testCodeWords
  "foo 123 bar": ["foo", "123", "bar"]
  "foo-123-bar": ["foo", "123", "bar"]
  "foo_123_bar": ["foo", "123", "bar"]
  "foo 123bar": ["foo", "123", "bar"]
  "foo123 bar": ["foo123", "bar"]
  "foo123bar": ["foo123bar"]
  "foo123Bar": ["foo123", "bar"]
  "hiFoo123byBar": ["hi", "foo123by", "bar"]


testReflexivity
  foo: [] :foo
  iFrame: :i  :frame
  ISSFrame: :iss :frame

test "getCodeWords works with null input", ->
  assert.eq [], getCodeWords()

