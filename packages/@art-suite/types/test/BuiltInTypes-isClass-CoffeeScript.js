let { assert } = require("chai");
let {
  isClass
} = require("../source");

// CoffeeScript v1.x class support functions (autogenerated by CoffeeScript)
let
  extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
  hasProp = {}.hasOwnProperty;

suite("isClass for CoffeeScript 1.x classes", () => {
  test("isClass empty-class is false - the only class we can't detect correctly", () => {
    var Foo;
    assert.isFalse(isClass(Foo = (() => {
      function Foo() { }

      return Foo;

    })()));
  });
  test("isClass class-contains-class-property is true", () => {
    var Foo;
    assert.isTrue(isClass(Foo = (() => {
      function Foo() { }

      Foo.bar = 0;

      return Foo;

    })()));
  });
  test("isClass class-contains-prototype-property is true", () => {
    var Foo;
    assert.isTrue(isClass(Foo = (() => {
      function Foo() { }

      Foo.prototype.bar = 0;

      return Foo;

    })()));
  });

  test("isClass empty-class derived class is true", () => {
    var Bar, Foo;
    Foo = (() => {
      function Foo() { }

      return Foo;

    })();
    assert.isTrue(isClass(Bar = (function (superClass) {
      extend(Bar, superClass);

      function Bar() {
        return Bar.__super__.constructor.apply(this, arguments);
      }

      return Bar;

    })(Foo)));
  });
  test("isClass non-empty-class derived class is true", () => {
    var Bar, Foo;
    Foo = (() => {
      function Foo() { }

      Foo.prototype.baz = 0;

      return Foo;

    })();
    assert.isTrue(isClass(Bar = (function (superClass) {
      extend(Bar, superClass);

      function Bar() {
        return Bar.__super__.constructor.apply(this, arguments);
      }

      return Bar;

    })(Foo)));
  });
})