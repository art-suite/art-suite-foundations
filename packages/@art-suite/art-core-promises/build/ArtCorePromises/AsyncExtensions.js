"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["self", "Promise", "setTimeout", "toSeconds", "setInterval", "clearInterval", "console", "Neptune"], [global, require('@art-suite/art-core-time'), require('./ArtPromise')], (self, Promise, setTimeout, toSeconds, setInterval, clearInterval, console, Neptune) => {let timeout, interval, throwErrorOutOfStack; return {timeout: timeout = (ms, f) => {let p; p = new Promise((resolve) => setTimeout(resolve, ms)); return (f != null) ? p.then(f) : p;}, timeoutAt: (second, f) => timeout((second - toSeconds()) * 1000, f), interval: interval = (ms, f = () => {}) => {let intervalId, p; intervalId = null; p = new Promise((resolve) => intervalId = setInterval(() => Promise.then(f).then(() => resolve()), ms)); p.stop = () => (intervalId != null) ? clearInterval(intervalId) : undefined; return p;}, requestAnimationFrame: self.requestAnimationFrame || self.webkitRequestAnimationFrame || self.mozRequestAnimationFrame || self.oRequestAnimationFrame || self.msRequestAnimationFrame || function(f) {return setTimeout(f, 1000 / 60);}, nextTick: (f) => Promise.resolve().then(() => Caf.isF(f) && f()), throwErrorOutOfStack: throwErrorOutOfStack = (e) => {console.log(e); return timeout(0, () => (() => {throw e;})());}, evalAndThrowErrorsOutOfStack: (f) => {let e; return (() => {try {return f();} catch (error) {e = error; Neptune.Art.StandardLib.log.error("evalAndThrowErrorsOutOfStack", e); return throwErrorOutOfStack(e);};})();}};});});
//# sourceMappingURL=AsyncExtensions.js.map
