"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["merge", "compactFlattenAll"], [global, require('art-standard-lib')], (merge, compactFlattenAll) => {return {configure: function(options = {}) {return (_package) => {let sourceDir, targetDir, mocha, mochaAndJest, coffeeScript, currentPackage, targetTempDir, buildScript, temp, temp1, temp2; if (Caf.exists(options)) {sourceDir = (undefined !== (temp = options.sourceDir)) ? temp : "source"; targetDir = (undefined !== (temp1 = options.targetDir)) ? temp1 : "build"; mocha = options.mocha; mochaAndJest = options.mochaAndJest; coffeeScript = options.coffeeScript; currentPackage = (undefined !== (temp2 = options.package)) ? temp2 : _package;}; targetTempDir = targetDir + "-temp"; buildScript = (sourceDir, targetDir) => coffeeScript ? `coffee -m --output ${Caf.toString(targetDir)} --compile ${Caf.toString(sourceDir)} &\nCOFFEE_PID=\$!\ncaf -m -c ${Caf.toString(sourceDir)} -o ${Caf.toString(targetDir)} &\nCAF_PID=\$!\nwait \$COFFEE_PID || exit 1\nwait \$CAF_PID || exit 1\nnpm run nn` : `caf -m -c ${Caf.toString(sourceDir)} -o ${Caf.toString(targetDir)}\nnpm run nn`; return merge(currentPackage, {scripts: {nn: `nn ${Caf.toString(targetDir)}/* ${Caf.toString(mocha ? "test/tests" : undefined)}`, test: `npm run nn\n${Caf.toString(mochaAndJest ? "jest\nif [[ $? -ne 0 ]]; then\n  exit 1\nfi\nmocha -u tdd" : mocha ? "mocha -u tdd" : "jest")}`, build: buildScript(sourceDir, targetDir), "build-clean": `# BUILD CLEAN START\n#   - building into: ${Caf.toString(targetTempDir)}\n#\nrm -rf ./__build-old__\n` + buildScript(sourceDir, targetTempDir) + `\n\n# BUILD CLEAN FINIALIZING\n#  - replace old build in:   ${Caf.toString(targetDir)}\n#  - with new build from:    ${Caf.toString(targetTempDir)}\n#\nmv ${Caf.toString(targetDir)} __build-old__\nmv ${Caf.toString(targetTempDir)} ${Caf.toString(targetDir)}\nrm -rf ./__build-old__\nnpm run nn`, clean: `rm -rf ${Caf.toString(targetDir)}/*`, watch: "npm-watch"}, jest: {testEnvironment: "node", verbose: true, collectCoverageFrom: [`${Caf.toString(targetDir)}/**/*.js`, `!${Caf.toString(targetDir)}/test/**/*.js`], testPathIgnorePatterns: ["/node_modules/", "<rootDir>/test"]}, watch: {build: {extensions: compactFlattenAll("caf", coffeeScript && "coffee"), patterns: [sourceDir], quiet: false}}});};}};});});
//# sourceMappingURL=StandardPackageBuilder.js.map
