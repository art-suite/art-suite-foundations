"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "standardPackageBuilder", "assert", "test"], [global, require('./StandardImport')], (describe, standardPackageBuilder, assert, test) => {let assertLooksLikePackage; assertLooksLikePackage = function(options) {let packageBuilder, builtPackage; packageBuilder = standardPackageBuilder.configure(options); builtPackage = packageBuilder(); assert.present(builtPackage.scripts.test); assert.present(builtPackage.scripts.build); return assert.present(builtPackage.scripts["build-watch"]);}; return describe({standardPackageBuilder: function() {test("basics", () => assertLooksLikePackage({})); test("pass in existing package as option", () => {let packageBuilder, builtPackage; packageBuilder = standardPackageBuilder.configure({package: {foo: "bar"}}); builtPackage = packageBuilder({foo2: "bar2"}); assert.eq(builtPackage.foo, "bar"); return assert.doesNotExist(builtPackage.foo2);}); test("pass in existing package when building package", () => {let packageBuilder, builtPackage; packageBuilder = standardPackageBuilder.configure(); builtPackage = packageBuilder({foo: "bar"}); return assert.eq(builtPackage.foo, "bar");}); test("coffeeScript", () => assertLooksLikePackage({coffeeScript: true})); test("mocha", () => assertLooksLikePackage({mocha: true})); test("mochaAndJest", () => assertLooksLikePackage({mochaAndJest: true})); return test("custom scripts", () => {let packageBuilder, builtPackage; packageBuilder = standardPackageBuilder.configure({scripts: {test: "bar"}}); builtPackage = packageBuilder(); return assert.eq(builtPackage.scripts.test, "bar");});}});});});
//# sourceMappingURL=StandardPackageBuilder.test.js.map
